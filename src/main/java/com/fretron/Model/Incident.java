/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Incident extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 696668613427957467L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Incident\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"eventData\",\"type\":\"bytes\"},{\"name\":\"eventTopic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"alert\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Alert\",\"fields\":[{\"name\":\"alertEventTopic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"conditions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AlertCondition\",\"fields\":[{\"name\":\"field\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"windowSize\",\"type\":\"long\",\"default\":0},{\"name\":\"fieldType\",\"type\":{\"type\":\"enum\",\"name\":\"AlertFieldType\",\"symbols\":[\"PRIMITIVE\",\"CALCULATED\",\"AGGREGATE\"]}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valueType\",\"type\":{\"type\":\"enum\",\"name\":\"AlertParamValueType\",\"symbols\":[\"INT\",\"LONG\",\"DOUBLE\",\"STRING\",\"INT_RANGE\",\"LONG_RANGE\",\"DOUBLE_RANGE\",\"LOCATION_PROXIMITY\",\"LOCATION_GEOFENCE\"]}},{\"name\":\"operator\",\"type\":{\"type\":\"enum\",\"name\":\"AlertOperator\",\"symbols\":[\"IS\",\"IN\",\"NIN\",\"GT\",\"GTE\",\"LT\",\"LTE\",\"EQ\",\"REGEX\"]}}]}}},{\"name\":\"actions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AlertAction\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"AlertActionType\",\"symbols\":[\"SMS\",\"EMAIL\"]}},{\"name\":\"valueTemplate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"recipient\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}},{\"name\":\"vehicles\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"snoozeTime\",\"type\":[\"null\",\"long\"],\"default\":0},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String type;
  @Deprecated public java.nio.ByteBuffer eventData;
  @Deprecated public java.lang.String eventTopic;
  @Deprecated public com.fretron.Model.Alert alert;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Incident() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param eventData The new value for eventData
   * @param eventTopic The new value for eventTopic
   * @param alert The new value for alert
   */
  public Incident(java.lang.String type, java.nio.ByteBuffer eventData, java.lang.String eventTopic, com.fretron.Model.Alert alert) {
    this.type = type;
    this.eventData = eventData;
    this.eventTopic = eventTopic;
    this.alert = alert;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return eventData;
    case 2: return eventTopic;
    case 3: return alert;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.String)value$; break;
    case 1: eventData = (java.nio.ByteBuffer)value$; break;
    case 2: eventTopic = (java.lang.String)value$; break;
    case 3: alert = (com.fretron.Model.Alert)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'eventData' field.
   * @return The value of the 'eventData' field.
   */
  public java.nio.ByteBuffer getEventData() {
    return eventData;
  }

  /**
   * Sets the value of the 'eventData' field.
   * @param value the value to set.
   */
  public void setEventData(java.nio.ByteBuffer value) {
    this.eventData = value;
  }

  /**
   * Gets the value of the 'eventTopic' field.
   * @return The value of the 'eventTopic' field.
   */
  public java.lang.String getEventTopic() {
    return eventTopic;
  }

  /**
   * Sets the value of the 'eventTopic' field.
   * @param value the value to set.
   */
  public void setEventTopic(java.lang.String value) {
    this.eventTopic = value;
  }

  /**
   * Gets the value of the 'alert' field.
   * @return The value of the 'alert' field.
   */
  public com.fretron.Model.Alert getAlert() {
    return alert;
  }

  /**
   * Sets the value of the 'alert' field.
   * @param value the value to set.
   */
  public void setAlert(com.fretron.Model.Alert value) {
    this.alert = value;
  }

  /**
   * Creates a new Incident RecordBuilder.
   * @return A new Incident RecordBuilder
   */
  public static com.fretron.Model.Incident.Builder newBuilder() {
    return new com.fretron.Model.Incident.Builder();
  }

  /**
   * Creates a new Incident RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Incident RecordBuilder
   */
  public static com.fretron.Model.Incident.Builder newBuilder(com.fretron.Model.Incident.Builder other) {
    return new com.fretron.Model.Incident.Builder(other);
  }

  /**
   * Creates a new Incident RecordBuilder by copying an existing Incident instance.
   * @param other The existing instance to copy.
   * @return A new Incident RecordBuilder
   */
  public static com.fretron.Model.Incident.Builder newBuilder(com.fretron.Model.Incident other) {
    return new com.fretron.Model.Incident.Builder(other);
  }

  /**
   * RecordBuilder for Incident instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Incident>
    implements org.apache.avro.data.RecordBuilder<Incident> {

    private java.lang.String type;
    private java.nio.ByteBuffer eventData;
    private java.lang.String eventTopic;
    private com.fretron.Model.Alert alert;
    private com.fretron.Model.Alert.Builder alertBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Incident.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventData)) {
        this.eventData = data().deepCopy(fields()[1].schema(), other.eventData);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventTopic)) {
        this.eventTopic = data().deepCopy(fields()[2].schema(), other.eventTopic);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alert)) {
        this.alert = data().deepCopy(fields()[3].schema(), other.alert);
        fieldSetFlags()[3] = true;
      }
      if (other.hasAlertBuilder()) {
        this.alertBuilder = com.fretron.Model.Alert.newBuilder(other.getAlertBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Incident instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Incident other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventData)) {
        this.eventData = data().deepCopy(fields()[1].schema(), other.eventData);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventTopic)) {
        this.eventTopic = data().deepCopy(fields()[2].schema(), other.eventTopic);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alert)) {
        this.alert = data().deepCopy(fields()[3].schema(), other.alert);
        fieldSetFlags()[3] = true;
      }
      this.alertBuilder = null;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.Incident.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.Incident.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventData' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getEventData() {
      return eventData;
    }

    /**
      * Sets the value of the 'eventData' field.
      * @param value The value of 'eventData'.
      * @return This builder.
      */
    public com.fretron.Model.Incident.Builder setEventData(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.eventData = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventData' field has been set.
      * @return True if the 'eventData' field has been set, false otherwise.
      */
    public boolean hasEventData() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventData' field.
      * @return This builder.
      */
    public com.fretron.Model.Incident.Builder clearEventData() {
      eventData = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTopic' field.
      * @return The value.
      */
    public java.lang.String getEventTopic() {
      return eventTopic;
    }

    /**
      * Sets the value of the 'eventTopic' field.
      * @param value The value of 'eventTopic'.
      * @return This builder.
      */
    public com.fretron.Model.Incident.Builder setEventTopic(java.lang.String value) {
      validate(fields()[2], value);
      this.eventTopic = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTopic' field has been set.
      * @return True if the 'eventTopic' field has been set, false otherwise.
      */
    public boolean hasEventTopic() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'eventTopic' field.
      * @return This builder.
      */
    public com.fretron.Model.Incident.Builder clearEventTopic() {
      eventTopic = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'alert' field.
      * @return The value.
      */
    public com.fretron.Model.Alert getAlert() {
      return alert;
    }

    /**
      * Sets the value of the 'alert' field.
      * @param value The value of 'alert'.
      * @return This builder.
      */
    public com.fretron.Model.Incident.Builder setAlert(com.fretron.Model.Alert value) {
      validate(fields()[3], value);
      this.alertBuilder = null;
      this.alert = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'alert' field has been set.
      * @return True if the 'alert' field has been set, false otherwise.
      */
    public boolean hasAlert() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'alert' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Alert.Builder getAlertBuilder() {
      if (alertBuilder == null) {
        if (hasAlert()) {
          setAlertBuilder(com.fretron.Model.Alert.newBuilder(alert));
        } else {
          setAlertBuilder(com.fretron.Model.Alert.newBuilder());
        }
      }
      return alertBuilder;
    }

    /**
     * Sets the Builder instance for the 'alert' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Incident.Builder setAlertBuilder(com.fretron.Model.Alert.Builder value) {
      clearAlert();
      alertBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'alert' field has an active Builder instance
     * @return True if the 'alert' field has an active Builder instance
     */
    public boolean hasAlertBuilder() {
      return alertBuilder != null;
    }

    /**
      * Clears the value of the 'alert' field.
      * @return This builder.
      */
    public com.fretron.Model.Incident.Builder clearAlert() {
      alert = null;
      alertBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Incident build() {
      try {
        Incident record = new Incident();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.eventData = fieldSetFlags()[1] ? this.eventData : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.eventTopic = fieldSetFlags()[2] ? this.eventTopic : (java.lang.String) defaultValue(fields()[2]);
        if (alertBuilder != null) {
          record.alert = this.alertBuilder.build();
        } else {
          record.alert = fieldSetFlags()[3] ? this.alert : (com.fretron.Model.Alert) defaultValue(fields()[3]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
