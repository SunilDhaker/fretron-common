/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OrganisationGroup extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4123144856990614523L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrganisationGroup\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"groupName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"groupType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sharedWith\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String orgId;
  @Deprecated public java.lang.String groupName;
  @Deprecated public java.lang.String groupType;
  @Deprecated public java.util.List<java.lang.String> sharedWith;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrganisationGroup() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param orgId The new value for orgId
   * @param groupName The new value for groupName
   * @param groupType The new value for groupType
   * @param sharedWith The new value for sharedWith
   */
  public OrganisationGroup(java.lang.String uuid, java.lang.String orgId, java.lang.String groupName, java.lang.String groupType, java.util.List<java.lang.String> sharedWith) {
    this.uuid = uuid;
    this.orgId = orgId;
    this.groupName = groupName;
    this.groupType = groupType;
    this.sharedWith = sharedWith;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return orgId;
    case 2: return groupName;
    case 3: return groupType;
    case 4: return sharedWith;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: orgId = (java.lang.String)value$; break;
    case 2: groupName = (java.lang.String)value$; break;
    case 3: groupType = (java.lang.String)value$; break;
    case 4: sharedWith = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'groupName' field.
   * @return The value of the 'groupName' field.
   */
  public java.lang.String getGroupName() {
    return groupName;
  }

  /**
   * Sets the value of the 'groupName' field.
   * @param value the value to set.
   */
  public void setGroupName(java.lang.String value) {
    this.groupName = value;
  }

  /**
   * Gets the value of the 'groupType' field.
   * @return The value of the 'groupType' field.
   */
  public java.lang.String getGroupType() {
    return groupType;
  }

  /**
   * Sets the value of the 'groupType' field.
   * @param value the value to set.
   */
  public void setGroupType(java.lang.String value) {
    this.groupType = value;
  }

  /**
   * Gets the value of the 'sharedWith' field.
   * @return The value of the 'sharedWith' field.
   */
  public java.util.List<java.lang.String> getSharedWith() {
    return sharedWith;
  }

  /**
   * Sets the value of the 'sharedWith' field.
   * @param value the value to set.
   */
  public void setSharedWith(java.util.List<java.lang.String> value) {
    this.sharedWith = value;
  }

  /**
   * Creates a new OrganisationGroup RecordBuilder.
   * @return A new OrganisationGroup RecordBuilder
   */
  public static com.fretron.Model.OrganisationGroup.Builder newBuilder() {
    return new com.fretron.Model.OrganisationGroup.Builder();
  }

  /**
   * Creates a new OrganisationGroup RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrganisationGroup RecordBuilder
   */
  public static com.fretron.Model.OrganisationGroup.Builder newBuilder(com.fretron.Model.OrganisationGroup.Builder other) {
    return new com.fretron.Model.OrganisationGroup.Builder(other);
  }

  /**
   * Creates a new OrganisationGroup RecordBuilder by copying an existing OrganisationGroup instance.
   * @param other The existing instance to copy.
   * @return A new OrganisationGroup RecordBuilder
   */
  public static com.fretron.Model.OrganisationGroup.Builder newBuilder(com.fretron.Model.OrganisationGroup other) {
    return new com.fretron.Model.OrganisationGroup.Builder(other);
  }

  /**
   * RecordBuilder for OrganisationGroup instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrganisationGroup>
    implements org.apache.avro.data.RecordBuilder<OrganisationGroup> {

    private java.lang.String uuid;
    private java.lang.String orgId;
    private java.lang.String groupName;
    private java.lang.String groupType;
    private java.util.List<java.lang.String> sharedWith;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.OrganisationGroup.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.groupName)) {
        this.groupName = data().deepCopy(fields()[2].schema(), other.groupName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.groupType)) {
        this.groupType = data().deepCopy(fields()[3].schema(), other.groupType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sharedWith)) {
        this.sharedWith = data().deepCopy(fields()[4].schema(), other.sharedWith);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OrganisationGroup instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.OrganisationGroup other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.groupName)) {
        this.groupName = data().deepCopy(fields()[2].schema(), other.groupName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.groupType)) {
        this.groupType = data().deepCopy(fields()[3].schema(), other.groupType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sharedWith)) {
        this.sharedWith = data().deepCopy(fields()[4].schema(), other.sharedWith);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder setOrgId(java.lang.String value) {
      validate(fields()[1], value);
      this.orgId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupName' field.
      * @return The value.
      */
    public java.lang.String getGroupName() {
      return groupName;
    }

    /**
      * Sets the value of the 'groupName' field.
      * @param value The value of 'groupName'.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder setGroupName(java.lang.String value) {
      validate(fields()[2], value);
      this.groupName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'groupName' field has been set.
      * @return True if the 'groupName' field has been set, false otherwise.
      */
    public boolean hasGroupName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'groupName' field.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder clearGroupName() {
      groupName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupType' field.
      * @return The value.
      */
    public java.lang.String getGroupType() {
      return groupType;
    }

    /**
      * Sets the value of the 'groupType' field.
      * @param value The value of 'groupType'.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder setGroupType(java.lang.String value) {
      validate(fields()[3], value);
      this.groupType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'groupType' field has been set.
      * @return True if the 'groupType' field has been set, false otherwise.
      */
    public boolean hasGroupType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'groupType' field.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder clearGroupType() {
      groupType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sharedWith' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getSharedWith() {
      return sharedWith;
    }

    /**
      * Sets the value of the 'sharedWith' field.
      * @param value The value of 'sharedWith'.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder setSharedWith(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.sharedWith = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sharedWith' field has been set.
      * @return True if the 'sharedWith' field has been set, false otherwise.
      */
    public boolean hasSharedWith() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sharedWith' field.
      * @return This builder.
      */
    public com.fretron.Model.OrganisationGroup.Builder clearSharedWith() {
      sharedWith = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public OrganisationGroup build() {
      try {
        OrganisationGroup record = new OrganisationGroup();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.orgId = fieldSetFlags()[1] ? this.orgId : (java.lang.String) defaultValue(fields()[1]);
        record.groupName = fieldSetFlags()[2] ? this.groupName : (java.lang.String) defaultValue(fields()[2]);
        record.groupType = fieldSetFlags()[3] ? this.groupType : (java.lang.String) defaultValue(fields()[3]);
        record.sharedWith = fieldSetFlags()[4] ? this.sharedWith : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
