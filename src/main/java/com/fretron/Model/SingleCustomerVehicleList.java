/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SingleCustomerVehicleList extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8905784841478194355L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SingleCustomerVehicleList\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"sharedByCustomer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sharedWith\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"validFrom\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"validTill\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"accessLevel\",\"type\":{\"type\":\"enum\",\"name\":\"AccessLevel\",\"symbols\":[\"DASHBOARD\",\"REPORTS\",\"TRIPS\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String sharedByCustomer;
  @Deprecated public java.lang.String sharedWith;
  @Deprecated public java.util.List<java.lang.String> vehicleList;
  @Deprecated public java.lang.Long validFrom;
  @Deprecated public java.lang.Long validTill;
  @Deprecated public com.fretron.Model.AccessLevel accessLevel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SingleCustomerVehicleList() {}

  /**
   * All-args constructor.
   * @param sharedByCustomer The new value for sharedByCustomer
   * @param sharedWith The new value for sharedWith
   * @param vehicleList The new value for vehicleList
   * @param validFrom The new value for validFrom
   * @param validTill The new value for validTill
   * @param accessLevel The new value for accessLevel
   */
  public SingleCustomerVehicleList(java.lang.String sharedByCustomer, java.lang.String sharedWith, java.util.List<java.lang.String> vehicleList, java.lang.Long validFrom, java.lang.Long validTill, com.fretron.Model.AccessLevel accessLevel) {
    this.sharedByCustomer = sharedByCustomer;
    this.sharedWith = sharedWith;
    this.vehicleList = vehicleList;
    this.validFrom = validFrom;
    this.validTill = validTill;
    this.accessLevel = accessLevel;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sharedByCustomer;
    case 1: return sharedWith;
    case 2: return vehicleList;
    case 3: return validFrom;
    case 4: return validTill;
    case 5: return accessLevel;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sharedByCustomer = (java.lang.String)value$; break;
    case 1: sharedWith = (java.lang.String)value$; break;
    case 2: vehicleList = (java.util.List<java.lang.String>)value$; break;
    case 3: validFrom = (java.lang.Long)value$; break;
    case 4: validTill = (java.lang.Long)value$; break;
    case 5: accessLevel = (com.fretron.Model.AccessLevel)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sharedByCustomer' field.
   * @return The value of the 'sharedByCustomer' field.
   */
  public java.lang.String getSharedByCustomer() {
    return sharedByCustomer;
  }

  /**
   * Sets the value of the 'sharedByCustomer' field.
   * @param value the value to set.
   */
  public void setSharedByCustomer(java.lang.String value) {
    this.sharedByCustomer = value;
  }

  /**
   * Gets the value of the 'sharedWith' field.
   * @return The value of the 'sharedWith' field.
   */
  public java.lang.String getSharedWith() {
    return sharedWith;
  }

  /**
   * Sets the value of the 'sharedWith' field.
   * @param value the value to set.
   */
  public void setSharedWith(java.lang.String value) {
    this.sharedWith = value;
  }

  /**
   * Gets the value of the 'vehicleList' field.
   * @return The value of the 'vehicleList' field.
   */
  public java.util.List<java.lang.String> getVehicleList() {
    return vehicleList;
  }

  /**
   * Sets the value of the 'vehicleList' field.
   * @param value the value to set.
   */
  public void setVehicleList(java.util.List<java.lang.String> value) {
    this.vehicleList = value;
  }

  /**
   * Gets the value of the 'validFrom' field.
   * @return The value of the 'validFrom' field.
   */
  public java.lang.Long getValidFrom() {
    return validFrom;
  }

  /**
   * Sets the value of the 'validFrom' field.
   * @param value the value to set.
   */
  public void setValidFrom(java.lang.Long value) {
    this.validFrom = value;
  }

  /**
   * Gets the value of the 'validTill' field.
   * @return The value of the 'validTill' field.
   */
  public java.lang.Long getValidTill() {
    return validTill;
  }

  /**
   * Sets the value of the 'validTill' field.
   * @param value the value to set.
   */
  public void setValidTill(java.lang.Long value) {
    this.validTill = value;
  }

  /**
   * Gets the value of the 'accessLevel' field.
   * @return The value of the 'accessLevel' field.
   */
  public com.fretron.Model.AccessLevel getAccessLevel() {
    return accessLevel;
  }

  /**
   * Sets the value of the 'accessLevel' field.
   * @param value the value to set.
   */
  public void setAccessLevel(com.fretron.Model.AccessLevel value) {
    this.accessLevel = value;
  }

  /**
   * Creates a new SingleCustomerVehicleList RecordBuilder.
   * @return A new SingleCustomerVehicleList RecordBuilder
   */
  public static com.fretron.Model.SingleCustomerVehicleList.Builder newBuilder() {
    return new com.fretron.Model.SingleCustomerVehicleList.Builder();
  }

  /**
   * Creates a new SingleCustomerVehicleList RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SingleCustomerVehicleList RecordBuilder
   */
  public static com.fretron.Model.SingleCustomerVehicleList.Builder newBuilder(com.fretron.Model.SingleCustomerVehicleList.Builder other) {
    return new com.fretron.Model.SingleCustomerVehicleList.Builder(other);
  }

  /**
   * Creates a new SingleCustomerVehicleList RecordBuilder by copying an existing SingleCustomerVehicleList instance.
   * @param other The existing instance to copy.
   * @return A new SingleCustomerVehicleList RecordBuilder
   */
  public static com.fretron.Model.SingleCustomerVehicleList.Builder newBuilder(com.fretron.Model.SingleCustomerVehicleList other) {
    return new com.fretron.Model.SingleCustomerVehicleList.Builder(other);
  }

  /**
   * RecordBuilder for SingleCustomerVehicleList instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SingleCustomerVehicleList>
    implements org.apache.avro.data.RecordBuilder<SingleCustomerVehicleList> {

    private java.lang.String sharedByCustomer;
    private java.lang.String sharedWith;
    private java.util.List<java.lang.String> vehicleList;
    private java.lang.Long validFrom;
    private java.lang.Long validTill;
    private com.fretron.Model.AccessLevel accessLevel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.SingleCustomerVehicleList.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sharedByCustomer)) {
        this.sharedByCustomer = data().deepCopy(fields()[0].schema(), other.sharedByCustomer);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sharedWith)) {
        this.sharedWith = data().deepCopy(fields()[1].schema(), other.sharedWith);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vehicleList)) {
        this.vehicleList = data().deepCopy(fields()[2].schema(), other.vehicleList);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[3].schema(), other.validFrom);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.validTill)) {
        this.validTill = data().deepCopy(fields()[4].schema(), other.validTill);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.accessLevel)) {
        this.accessLevel = data().deepCopy(fields()[5].schema(), other.accessLevel);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SingleCustomerVehicleList instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.SingleCustomerVehicleList other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sharedByCustomer)) {
        this.sharedByCustomer = data().deepCopy(fields()[0].schema(), other.sharedByCustomer);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sharedWith)) {
        this.sharedWith = data().deepCopy(fields()[1].schema(), other.sharedWith);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vehicleList)) {
        this.vehicleList = data().deepCopy(fields()[2].schema(), other.vehicleList);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[3].schema(), other.validFrom);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.validTill)) {
        this.validTill = data().deepCopy(fields()[4].schema(), other.validTill);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.accessLevel)) {
        this.accessLevel = data().deepCopy(fields()[5].schema(), other.accessLevel);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'sharedByCustomer' field.
      * @return The value.
      */
    public java.lang.String getSharedByCustomer() {
      return sharedByCustomer;
    }

    /**
      * Sets the value of the 'sharedByCustomer' field.
      * @param value The value of 'sharedByCustomer'.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder setSharedByCustomer(java.lang.String value) {
      validate(fields()[0], value);
      this.sharedByCustomer = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sharedByCustomer' field has been set.
      * @return True if the 'sharedByCustomer' field has been set, false otherwise.
      */
    public boolean hasSharedByCustomer() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sharedByCustomer' field.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder clearSharedByCustomer() {
      sharedByCustomer = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sharedWith' field.
      * @return The value.
      */
    public java.lang.String getSharedWith() {
      return sharedWith;
    }

    /**
      * Sets the value of the 'sharedWith' field.
      * @param value The value of 'sharedWith'.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder setSharedWith(java.lang.String value) {
      validate(fields()[1], value);
      this.sharedWith = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sharedWith' field has been set.
      * @return True if the 'sharedWith' field has been set, false otherwise.
      */
    public boolean hasSharedWith() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sharedWith' field.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder clearSharedWith() {
      sharedWith = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleList' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getVehicleList() {
      return vehicleList;
    }

    /**
      * Sets the value of the 'vehicleList' field.
      * @param value The value of 'vehicleList'.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder setVehicleList(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.vehicleList = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleList' field has been set.
      * @return True if the 'vehicleList' field has been set, false otherwise.
      */
    public boolean hasVehicleList() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'vehicleList' field.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder clearVehicleList() {
      vehicleList = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFrom' field.
      * @return The value.
      */
    public java.lang.Long getValidFrom() {
      return validFrom;
    }

    /**
      * Sets the value of the 'validFrom' field.
      * @param value The value of 'validFrom'.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder setValidFrom(java.lang.Long value) {
      validate(fields()[3], value);
      this.validFrom = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'validFrom' field has been set.
      * @return True if the 'validFrom' field has been set, false otherwise.
      */
    public boolean hasValidFrom() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'validFrom' field.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder clearValidFrom() {
      validFrom = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTill' field.
      * @return The value.
      */
    public java.lang.Long getValidTill() {
      return validTill;
    }

    /**
      * Sets the value of the 'validTill' field.
      * @param value The value of 'validTill'.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder setValidTill(java.lang.Long value) {
      validate(fields()[4], value);
      this.validTill = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'validTill' field has been set.
      * @return True if the 'validTill' field has been set, false otherwise.
      */
    public boolean hasValidTill() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'validTill' field.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder clearValidTill() {
      validTill = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'accessLevel' field.
      * @return The value.
      */
    public com.fretron.Model.AccessLevel getAccessLevel() {
      return accessLevel;
    }

    /**
      * Sets the value of the 'accessLevel' field.
      * @param value The value of 'accessLevel'.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder setAccessLevel(com.fretron.Model.AccessLevel value) {
      validate(fields()[5], value);
      this.accessLevel = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'accessLevel' field has been set.
      * @return True if the 'accessLevel' field has been set, false otherwise.
      */
    public boolean hasAccessLevel() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'accessLevel' field.
      * @return This builder.
      */
    public com.fretron.Model.SingleCustomerVehicleList.Builder clearAccessLevel() {
      accessLevel = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public SingleCustomerVehicleList build() {
      try {
        SingleCustomerVehicleList record = new SingleCustomerVehicleList();
        record.sharedByCustomer = fieldSetFlags()[0] ? this.sharedByCustomer : (java.lang.String) defaultValue(fields()[0]);
        record.sharedWith = fieldSetFlags()[1] ? this.sharedWith : (java.lang.String) defaultValue(fields()[1]);
        record.vehicleList = fieldSetFlags()[2] ? this.vehicleList : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.validFrom = fieldSetFlags()[3] ? this.validFrom : (java.lang.Long) defaultValue(fields()[3]);
        record.validTill = fieldSetFlags()[4] ? this.validTill : (java.lang.Long) defaultValue(fields()[4]);
        record.accessLevel = fieldSetFlags()[5] ? this.accessLevel : (com.fretron.Model.AccessLevel) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
