/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LinkObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5124223868159237044L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LinkObject\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"linkedTo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkDirection\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkType\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String linkedTo;
  @Deprecated public java.lang.String linkDirection;
  @Deprecated public java.util.List<java.lang.String> linkType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LinkObject() {}

  /**
   * All-args constructor.
   * @param linkedTo The new value for linkedTo
   * @param linkDirection The new value for linkDirection
   * @param linkType The new value for linkType
   */
  public LinkObject(java.lang.String linkedTo, java.lang.String linkDirection, java.util.List<java.lang.String> linkType) {
    this.linkedTo = linkedTo;
    this.linkDirection = linkDirection;
    this.linkType = linkType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return linkedTo;
    case 1: return linkDirection;
    case 2: return linkType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: linkedTo = (java.lang.String)value$; break;
    case 1: linkDirection = (java.lang.String)value$; break;
    case 2: linkType = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'linkedTo' field.
   * @return The value of the 'linkedTo' field.
   */
  public java.lang.String getLinkedTo() {
    return linkedTo;
  }

  /**
   * Sets the value of the 'linkedTo' field.
   * @param value the value to set.
   */
  public void setLinkedTo(java.lang.String value) {
    this.linkedTo = value;
  }

  /**
   * Gets the value of the 'linkDirection' field.
   * @return The value of the 'linkDirection' field.
   */
  public java.lang.String getLinkDirection() {
    return linkDirection;
  }

  /**
   * Sets the value of the 'linkDirection' field.
   * @param value the value to set.
   */
  public void setLinkDirection(java.lang.String value) {
    this.linkDirection = value;
  }

  /**
   * Gets the value of the 'linkType' field.
   * @return The value of the 'linkType' field.
   */
  public java.util.List<java.lang.String> getLinkType() {
    return linkType;
  }

  /**
   * Sets the value of the 'linkType' field.
   * @param value the value to set.
   */
  public void setLinkType(java.util.List<java.lang.String> value) {
    this.linkType = value;
  }

  /**
   * Creates a new LinkObject RecordBuilder.
   * @return A new LinkObject RecordBuilder
   */
  public static com.fretron.Model.LinkObject.Builder newBuilder() {
    return new com.fretron.Model.LinkObject.Builder();
  }

  /**
   * Creates a new LinkObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LinkObject RecordBuilder
   */
  public static com.fretron.Model.LinkObject.Builder newBuilder(com.fretron.Model.LinkObject.Builder other) {
    return new com.fretron.Model.LinkObject.Builder(other);
  }

  /**
   * Creates a new LinkObject RecordBuilder by copying an existing LinkObject instance.
   * @param other The existing instance to copy.
   * @return A new LinkObject RecordBuilder
   */
  public static com.fretron.Model.LinkObject.Builder newBuilder(com.fretron.Model.LinkObject other) {
    return new com.fretron.Model.LinkObject.Builder(other);
  }

  /**
   * RecordBuilder for LinkObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LinkObject>
    implements org.apache.avro.data.RecordBuilder<LinkObject> {

    private java.lang.String linkedTo;
    private java.lang.String linkDirection;
    private java.util.List<java.lang.String> linkType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.LinkObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.linkedTo)) {
        this.linkedTo = data().deepCopy(fields()[0].schema(), other.linkedTo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkDirection)) {
        this.linkDirection = data().deepCopy(fields()[1].schema(), other.linkDirection);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.linkType)) {
        this.linkType = data().deepCopy(fields()[2].schema(), other.linkType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LinkObject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.LinkObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.linkedTo)) {
        this.linkedTo = data().deepCopy(fields()[0].schema(), other.linkedTo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkDirection)) {
        this.linkDirection = data().deepCopy(fields()[1].schema(), other.linkDirection);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.linkType)) {
        this.linkType = data().deepCopy(fields()[2].schema(), other.linkType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'linkedTo' field.
      * @return The value.
      */
    public java.lang.String getLinkedTo() {
      return linkedTo;
    }

    /**
      * Sets the value of the 'linkedTo' field.
      * @param value The value of 'linkedTo'.
      * @return This builder.
      */
    public com.fretron.Model.LinkObject.Builder setLinkedTo(java.lang.String value) {
      validate(fields()[0], value);
      this.linkedTo = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'linkedTo' field has been set.
      * @return True if the 'linkedTo' field has been set, false otherwise.
      */
    public boolean hasLinkedTo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'linkedTo' field.
      * @return This builder.
      */
    public com.fretron.Model.LinkObject.Builder clearLinkedTo() {
      linkedTo = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkDirection' field.
      * @return The value.
      */
    public java.lang.String getLinkDirection() {
      return linkDirection;
    }

    /**
      * Sets the value of the 'linkDirection' field.
      * @param value The value of 'linkDirection'.
      * @return This builder.
      */
    public com.fretron.Model.LinkObject.Builder setLinkDirection(java.lang.String value) {
      validate(fields()[1], value);
      this.linkDirection = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'linkDirection' field has been set.
      * @return True if the 'linkDirection' field has been set, false otherwise.
      */
    public boolean hasLinkDirection() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'linkDirection' field.
      * @return This builder.
      */
    public com.fretron.Model.LinkObject.Builder clearLinkDirection() {
      linkDirection = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkType' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getLinkType() {
      return linkType;
    }

    /**
      * Sets the value of the 'linkType' field.
      * @param value The value of 'linkType'.
      * @return This builder.
      */
    public com.fretron.Model.LinkObject.Builder setLinkType(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.linkType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'linkType' field has been set.
      * @return True if the 'linkType' field has been set, false otherwise.
      */
    public boolean hasLinkType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'linkType' field.
      * @return This builder.
      */
    public com.fretron.Model.LinkObject.Builder clearLinkType() {
      linkType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public LinkObject build() {
      try {
        LinkObject record = new LinkObject();
        record.linkedTo = fieldSetFlags()[0] ? this.linkedTo : (java.lang.String) defaultValue(fields()[0]);
        record.linkDirection = fieldSetFlags()[1] ? this.linkDirection : (java.lang.String) defaultValue(fields()[1]);
        record.linkType = fieldSetFlags()[2] ? this.linkType : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
