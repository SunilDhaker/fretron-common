/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StandardMeasurement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6745604367108709078L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StandardMeasurement\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"weight\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Measurement\",\"fields\":[{\"name\":\"measurmentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unitOfMeasurment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plannedLoadQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualLoadedQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"netQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"grossQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualDeliveredQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"shortage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"frieghtDeductableQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"claimQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"temperature\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"density\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"moisture\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"volume\",\"type\":[\"null\",\"Measurement\"],\"default\":null},{\"name\":\"package\",\"type\":[\"null\",\"Measurement\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.Measurement weight;
  @Deprecated public com.fretron.Model.Measurement volume;
  @Deprecated public com.fretron.Model.Measurement package$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StandardMeasurement() {}

  /**
   * All-args constructor.
   * @param weight The new value for weight
   * @param volume The new value for volume
   * @param package$ The new value for package
   */
  public StandardMeasurement(com.fretron.Model.Measurement weight, com.fretron.Model.Measurement volume, com.fretron.Model.Measurement package$) {
    this.weight = weight;
    this.volume = volume;
    this.package$ = package$;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return weight;
    case 1: return volume;
    case 2: return package$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: weight = (com.fretron.Model.Measurement)value$; break;
    case 1: volume = (com.fretron.Model.Measurement)value$; break;
    case 2: package$ = (com.fretron.Model.Measurement)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'weight' field.
   * @return The value of the 'weight' field.
   */
  public com.fretron.Model.Measurement getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * @param value the value to set.
   */
  public void setWeight(com.fretron.Model.Measurement value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public com.fretron.Model.Measurement getVolume() {
    return volume;
  }

  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(com.fretron.Model.Measurement value) {
    this.volume = value;
  }

  /**
   * Gets the value of the 'package$' field.
   * @return The value of the 'package$' field.
   */
  public com.fretron.Model.Measurement getPackage$() {
    return package$;
  }

  /**
   * Sets the value of the 'package$' field.
   * @param value the value to set.
   */
  public void setPackage$(com.fretron.Model.Measurement value) {
    this.package$ = value;
  }

  /**
   * Creates a new StandardMeasurement RecordBuilder.
   * @return A new StandardMeasurement RecordBuilder
   */
  public static com.fretron.Model.StandardMeasurement.Builder newBuilder() {
    return new com.fretron.Model.StandardMeasurement.Builder();
  }

  /**
   * Creates a new StandardMeasurement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StandardMeasurement RecordBuilder
   */
  public static com.fretron.Model.StandardMeasurement.Builder newBuilder(com.fretron.Model.StandardMeasurement.Builder other) {
    return new com.fretron.Model.StandardMeasurement.Builder(other);
  }

  /**
   * Creates a new StandardMeasurement RecordBuilder by copying an existing StandardMeasurement instance.
   * @param other The existing instance to copy.
   * @return A new StandardMeasurement RecordBuilder
   */
  public static com.fretron.Model.StandardMeasurement.Builder newBuilder(com.fretron.Model.StandardMeasurement other) {
    return new com.fretron.Model.StandardMeasurement.Builder(other);
  }

  /**
   * RecordBuilder for StandardMeasurement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StandardMeasurement>
    implements org.apache.avro.data.RecordBuilder<StandardMeasurement> {

    private com.fretron.Model.Measurement weight;
    private com.fretron.Model.Measurement.Builder weightBuilder;
    private com.fretron.Model.Measurement volume;
    private com.fretron.Model.Measurement.Builder volumeBuilder;
    private com.fretron.Model.Measurement package$;
    private com.fretron.Model.Measurement.Builder package$Builder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.StandardMeasurement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.weight)) {
        this.weight = data().deepCopy(fields()[0].schema(), other.weight);
        fieldSetFlags()[0] = true;
      }
      if (other.hasWeightBuilder()) {
        this.weightBuilder = com.fretron.Model.Measurement.newBuilder(other.getWeightBuilder());
      }
      if (isValidValue(fields()[1], other.volume)) {
        this.volume = data().deepCopy(fields()[1].schema(), other.volume);
        fieldSetFlags()[1] = true;
      }
      if (other.hasVolumeBuilder()) {
        this.volumeBuilder = com.fretron.Model.Measurement.newBuilder(other.getVolumeBuilder());
      }
      if (isValidValue(fields()[2], other.package$)) {
        this.package$ = data().deepCopy(fields()[2].schema(), other.package$);
        fieldSetFlags()[2] = true;
      }
      if (other.hasPackage$Builder()) {
        this.package$Builder = com.fretron.Model.Measurement.newBuilder(other.getPackage$Builder());
      }
    }

    /**
     * Creates a Builder by copying an existing StandardMeasurement instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.StandardMeasurement other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.weight)) {
        this.weight = data().deepCopy(fields()[0].schema(), other.weight);
        fieldSetFlags()[0] = true;
      }
      this.weightBuilder = null;
      if (isValidValue(fields()[1], other.volume)) {
        this.volume = data().deepCopy(fields()[1].schema(), other.volume);
        fieldSetFlags()[1] = true;
      }
      this.volumeBuilder = null;
      if (isValidValue(fields()[2], other.package$)) {
        this.package$ = data().deepCopy(fields()[2].schema(), other.package$);
        fieldSetFlags()[2] = true;
      }
      this.package$Builder = null;
    }

    /**
      * Gets the value of the 'weight' field.
      * @return The value.
      */
    public com.fretron.Model.Measurement getWeight() {
      return weight;
    }

    /**
      * Sets the value of the 'weight' field.
      * @param value The value of 'weight'.
      * @return This builder.
      */
    public com.fretron.Model.StandardMeasurement.Builder setWeight(com.fretron.Model.Measurement value) {
      validate(fields()[0], value);
      this.weightBuilder = null;
      this.weight = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'weight' field has been set.
      * @return True if the 'weight' field has been set, false otherwise.
      */
    public boolean hasWeight() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'weight' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Measurement.Builder getWeightBuilder() {
      if (weightBuilder == null) {
        if (hasWeight()) {
          setWeightBuilder(com.fretron.Model.Measurement.newBuilder(weight));
        } else {
          setWeightBuilder(com.fretron.Model.Measurement.newBuilder());
        }
      }
      return weightBuilder;
    }

    /**
     * Sets the Builder instance for the 'weight' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder setWeightBuilder(com.fretron.Model.Measurement.Builder value) {
      clearWeight();
      weightBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'weight' field has an active Builder instance
     * @return True if the 'weight' field has an active Builder instance
     */
    public boolean hasWeightBuilder() {
      return weightBuilder != null;
    }

    /**
      * Clears the value of the 'weight' field.
      * @return This builder.
      */
    public com.fretron.Model.StandardMeasurement.Builder clearWeight() {
      weight = null;
      weightBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public com.fretron.Model.Measurement getVolume() {
      return volume;
    }

    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public com.fretron.Model.StandardMeasurement.Builder setVolume(com.fretron.Model.Measurement value) {
      validate(fields()[1], value);
      this.volumeBuilder = null;
      this.volume = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'volume' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Measurement.Builder getVolumeBuilder() {
      if (volumeBuilder == null) {
        if (hasVolume()) {
          setVolumeBuilder(com.fretron.Model.Measurement.newBuilder(volume));
        } else {
          setVolumeBuilder(com.fretron.Model.Measurement.newBuilder());
        }
      }
      return volumeBuilder;
    }

    /**
     * Sets the Builder instance for the 'volume' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder setVolumeBuilder(com.fretron.Model.Measurement.Builder value) {
      clearVolume();
      volumeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'volume' field has an active Builder instance
     * @return True if the 'volume' field has an active Builder instance
     */
    public boolean hasVolumeBuilder() {
      return volumeBuilder != null;
    }

    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public com.fretron.Model.StandardMeasurement.Builder clearVolume() {
      volume = null;
      volumeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'package$' field.
      * @return The value.
      */
    public com.fretron.Model.Measurement getPackage$() {
      return package$;
    }

    /**
      * Sets the value of the 'package$' field.
      * @param value The value of 'package$'.
      * @return This builder.
      */
    public com.fretron.Model.StandardMeasurement.Builder setPackage$(com.fretron.Model.Measurement value) {
      validate(fields()[2], value);
      this.package$Builder = null;
      this.package$ = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'package$' field has been set.
      * @return True if the 'package$' field has been set, false otherwise.
      */
    public boolean hasPackage$() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'package$' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Measurement.Builder getPackage$Builder() {
      if (package$Builder == null) {
        if (hasPackage$()) {
          setPackage$Builder(com.fretron.Model.Measurement.newBuilder(package$));
        } else {
          setPackage$Builder(com.fretron.Model.Measurement.newBuilder());
        }
      }
      return package$Builder;
    }

    /**
     * Sets the Builder instance for the 'package$' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder setPackage$Builder(com.fretron.Model.Measurement.Builder value) {
      clearPackage$();
      package$Builder = value;
      return this;
    }

    /**
     * Checks whether the 'package$' field has an active Builder instance
     * @return True if the 'package$' field has an active Builder instance
     */
    public boolean hasPackage$Builder() {
      return package$Builder != null;
    }

    /**
      * Clears the value of the 'package$' field.
      * @return This builder.
      */
    public com.fretron.Model.StandardMeasurement.Builder clearPackage$() {
      package$ = null;
      package$Builder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public StandardMeasurement build() {
      try {
        StandardMeasurement record = new StandardMeasurement();
        if (weightBuilder != null) {
          record.weight = this.weightBuilder.build();
        } else {
          record.weight = fieldSetFlags()[0] ? this.weight : (com.fretron.Model.Measurement) defaultValue(fields()[0]);
        }
        if (volumeBuilder != null) {
          record.volume = this.volumeBuilder.build();
        } else {
          record.volume = fieldSetFlags()[1] ? this.volume : (com.fretron.Model.Measurement) defaultValue(fields()[1]);
        }
        if (package$Builder != null) {
          record.package$ = this.package$Builder.build();
        } else {
          record.package$ = fieldSetFlags()[2] ? this.package$ : (com.fretron.Model.Measurement) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
