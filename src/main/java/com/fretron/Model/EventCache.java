/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EventCache extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 381673288732470137L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventCache\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"eventTopic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Event\",\"fields\":[{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"eventData\",\"type\":\"bytes\"},{\"name\":\"eventTopic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"]}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String eventTopic;
  @Deprecated public java.util.List<com.fretron.Model.Event> value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventCache() {}

  /**
   * All-args constructor.
   * @param eventTopic The new value for eventTopic
   * @param value The new value for value
   */
  public EventCache(java.lang.String eventTopic, java.util.List<com.fretron.Model.Event> value) {
    this.eventTopic = eventTopic;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventTopic;
    case 1: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventTopic = (java.lang.String)value$; break;
    case 1: value = (java.util.List<com.fretron.Model.Event>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventTopic' field.
   * @return The value of the 'eventTopic' field.
   */
  public java.lang.String getEventTopic() {
    return eventTopic;
  }

  /**
   * Sets the value of the 'eventTopic' field.
   * @param value the value to set.
   */
  public void setEventTopic(java.lang.String value) {
    this.eventTopic = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.util.List<com.fretron.Model.Event> getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.util.List<com.fretron.Model.Event> value) {
    this.value = value;
  }

  /**
   * Creates a new EventCache RecordBuilder.
   * @return A new EventCache RecordBuilder
   */
  public static com.fretron.Model.EventCache.Builder newBuilder() {
    return new com.fretron.Model.EventCache.Builder();
  }

  /**
   * Creates a new EventCache RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventCache RecordBuilder
   */
  public static com.fretron.Model.EventCache.Builder newBuilder(com.fretron.Model.EventCache.Builder other) {
    return new com.fretron.Model.EventCache.Builder(other);
  }

  /**
   * Creates a new EventCache RecordBuilder by copying an existing EventCache instance.
   * @param other The existing instance to copy.
   * @return A new EventCache RecordBuilder
   */
  public static com.fretron.Model.EventCache.Builder newBuilder(com.fretron.Model.EventCache other) {
    return new com.fretron.Model.EventCache.Builder(other);
  }

  /**
   * RecordBuilder for EventCache instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventCache>
    implements org.apache.avro.data.RecordBuilder<EventCache> {

    private java.lang.String eventTopic;
    private java.util.List<com.fretron.Model.Event> value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.EventCache.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventTopic)) {
        this.eventTopic = data().deepCopy(fields()[0].schema(), other.eventTopic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EventCache instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.EventCache other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventTopic)) {
        this.eventTopic = data().deepCopy(fields()[0].schema(), other.eventTopic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'eventTopic' field.
      * @return The value.
      */
    public java.lang.String getEventTopic() {
      return eventTopic;
    }

    /**
      * Sets the value of the 'eventTopic' field.
      * @param value The value of 'eventTopic'.
      * @return This builder.
      */
    public com.fretron.Model.EventCache.Builder setEventTopic(java.lang.String value) {
      validate(fields()[0], value);
      this.eventTopic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTopic' field has been set.
      * @return True if the 'eventTopic' field has been set, false otherwise.
      */
    public boolean hasEventTopic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventTopic' field.
      * @return This builder.
      */
    public com.fretron.Model.EventCache.Builder clearEventTopic() {
      eventTopic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.Event> getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.EventCache.Builder setValue(java.util.List<com.fretron.Model.Event> value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.EventCache.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public EventCache build() {
      try {
        EventCache record = new EventCache();
        record.eventTopic = fieldSetFlags()[0] ? this.eventTopic : (java.lang.String) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.util.List<com.fretron.Model.Event>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
