/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CustomeField extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3207498318739083955L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomeField\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"fieldId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"key\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"keyValue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"valueClass\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"valueSerializer\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String fieldId;
  @Deprecated public java.lang.String key;
  @Deprecated public java.lang.String value;
  @Deprecated public java.lang.String keyValue;
  @Deprecated public java.lang.String valueClass;
  @Deprecated public java.lang.String valueSerializer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomeField() {}

  /**
   * All-args constructor.
   * @param fieldId The new value for fieldId
   * @param key The new value for key
   * @param value The new value for value
   * @param keyValue The new value for keyValue
   * @param valueClass The new value for valueClass
   * @param valueSerializer The new value for valueSerializer
   */
  public CustomeField(java.lang.String fieldId, java.lang.String key, java.lang.String value, java.lang.String keyValue, java.lang.String valueClass, java.lang.String valueSerializer) {
    this.fieldId = fieldId;
    this.key = key;
    this.value = value;
    this.keyValue = keyValue;
    this.valueClass = valueClass;
    this.valueSerializer = valueSerializer;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fieldId;
    case 1: return key;
    case 2: return value;
    case 3: return keyValue;
    case 4: return valueClass;
    case 5: return valueSerializer;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fieldId = (java.lang.String)value$; break;
    case 1: key = (java.lang.String)value$; break;
    case 2: value = (java.lang.String)value$; break;
    case 3: keyValue = (java.lang.String)value$; break;
    case 4: valueClass = (java.lang.String)value$; break;
    case 5: valueSerializer = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fieldId' field.
   * @return The value of the 'fieldId' field.
   */
  public java.lang.String getFieldId() {
    return fieldId;
  }

  /**
   * Sets the value of the 'fieldId' field.
   * @param value the value to set.
   */
  public void setFieldId(java.lang.String value) {
    this.fieldId = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'keyValue' field.
   * @return The value of the 'keyValue' field.
   */
  public java.lang.String getKeyValue() {
    return keyValue;
  }

  /**
   * Sets the value of the 'keyValue' field.
   * @param value the value to set.
   */
  public void setKeyValue(java.lang.String value) {
    this.keyValue = value;
  }

  /**
   * Gets the value of the 'valueClass' field.
   * @return The value of the 'valueClass' field.
   */
  public java.lang.String getValueClass() {
    return valueClass;
  }

  /**
   * Sets the value of the 'valueClass' field.
   * @param value the value to set.
   */
  public void setValueClass(java.lang.String value) {
    this.valueClass = value;
  }

  /**
   * Gets the value of the 'valueSerializer' field.
   * @return The value of the 'valueSerializer' field.
   */
  public java.lang.String getValueSerializer() {
    return valueSerializer;
  }

  /**
   * Sets the value of the 'valueSerializer' field.
   * @param value the value to set.
   */
  public void setValueSerializer(java.lang.String value) {
    this.valueSerializer = value;
  }

  /**
   * Creates a new CustomeField RecordBuilder.
   * @return A new CustomeField RecordBuilder
   */
  public static com.fretron.Model.CustomeField.Builder newBuilder() {
    return new com.fretron.Model.CustomeField.Builder();
  }

  /**
   * Creates a new CustomeField RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomeField RecordBuilder
   */
  public static com.fretron.Model.CustomeField.Builder newBuilder(com.fretron.Model.CustomeField.Builder other) {
    return new com.fretron.Model.CustomeField.Builder(other);
  }

  /**
   * Creates a new CustomeField RecordBuilder by copying an existing CustomeField instance.
   * @param other The existing instance to copy.
   * @return A new CustomeField RecordBuilder
   */
  public static com.fretron.Model.CustomeField.Builder newBuilder(com.fretron.Model.CustomeField other) {
    return new com.fretron.Model.CustomeField.Builder(other);
  }

  /**
   * RecordBuilder for CustomeField instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomeField>
    implements org.apache.avro.data.RecordBuilder<CustomeField> {

    private java.lang.String fieldId;
    private java.lang.String key;
    private java.lang.String value;
    private java.lang.String keyValue;
    private java.lang.String valueClass;
    private java.lang.String valueSerializer;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.CustomeField.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fieldId)) {
        this.fieldId = data().deepCopy(fields()[0].schema(), other.fieldId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.key)) {
        this.key = data().deepCopy(fields()[1].schema(), other.key);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.keyValue)) {
        this.keyValue = data().deepCopy(fields()[3].schema(), other.keyValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.valueClass)) {
        this.valueClass = data().deepCopy(fields()[4].schema(), other.valueClass);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.valueSerializer)) {
        this.valueSerializer = data().deepCopy(fields()[5].schema(), other.valueSerializer);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CustomeField instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.CustomeField other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fieldId)) {
        this.fieldId = data().deepCopy(fields()[0].schema(), other.fieldId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.key)) {
        this.key = data().deepCopy(fields()[1].schema(), other.key);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.keyValue)) {
        this.keyValue = data().deepCopy(fields()[3].schema(), other.keyValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.valueClass)) {
        this.valueClass = data().deepCopy(fields()[4].schema(), other.valueClass);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.valueSerializer)) {
        this.valueSerializer = data().deepCopy(fields()[5].schema(), other.valueSerializer);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'fieldId' field.
      * @return The value.
      */
    public java.lang.String getFieldId() {
      return fieldId;
    }

    /**
      * Sets the value of the 'fieldId' field.
      * @param value The value of 'fieldId'.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder setFieldId(java.lang.String value) {
      validate(fields()[0], value);
      this.fieldId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldId' field has been set.
      * @return True if the 'fieldId' field has been set, false otherwise.
      */
    public boolean hasFieldId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fieldId' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder clearFieldId() {
      fieldId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder setKey(java.lang.String value) {
      validate(fields()[1], value);
      this.key = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder clearKey() {
      key = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder setValue(java.lang.String value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyValue' field.
      * @return The value.
      */
    public java.lang.String getKeyValue() {
      return keyValue;
    }

    /**
      * Sets the value of the 'keyValue' field.
      * @param value The value of 'keyValue'.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder setKeyValue(java.lang.String value) {
      validate(fields()[3], value);
      this.keyValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'keyValue' field has been set.
      * @return True if the 'keyValue' field has been set, false otherwise.
      */
    public boolean hasKeyValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'keyValue' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder clearKeyValue() {
      keyValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueClass' field.
      * @return The value.
      */
    public java.lang.String getValueClass() {
      return valueClass;
    }

    /**
      * Sets the value of the 'valueClass' field.
      * @param value The value of 'valueClass'.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder setValueClass(java.lang.String value) {
      validate(fields()[4], value);
      this.valueClass = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'valueClass' field has been set.
      * @return True if the 'valueClass' field has been set, false otherwise.
      */
    public boolean hasValueClass() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'valueClass' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder clearValueClass() {
      valueClass = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueSerializer' field.
      * @return The value.
      */
    public java.lang.String getValueSerializer() {
      return valueSerializer;
    }

    /**
      * Sets the value of the 'valueSerializer' field.
      * @param value The value of 'valueSerializer'.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder setValueSerializer(java.lang.String value) {
      validate(fields()[5], value);
      this.valueSerializer = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'valueSerializer' field has been set.
      * @return True if the 'valueSerializer' field has been set, false otherwise.
      */
    public boolean hasValueSerializer() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'valueSerializer' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomeField.Builder clearValueSerializer() {
      valueSerializer = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public CustomeField build() {
      try {
        CustomeField record = new CustomeField();
        record.fieldId = fieldSetFlags()[0] ? this.fieldId : (java.lang.String) defaultValue(fields()[0]);
        record.key = fieldSetFlags()[1] ? this.key : (java.lang.String) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.String) defaultValue(fields()[2]);
        record.keyValue = fieldSetFlags()[3] ? this.keyValue : (java.lang.String) defaultValue(fields()[3]);
        record.valueClass = fieldSetFlags()[4] ? this.valueClass : (java.lang.String) defaultValue(fields()[4]);
        record.valueSerializer = fieldSetFlags()[5] ? this.valueSerializer : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
