/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FreightUnit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2461744194048405842L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FreightUnit\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"auctionQuantity\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"StandardMeasurement\",\"fields\":[{\"name\":\"weight\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Measurement\",\"fields\":[{\"name\":\"measurmentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unitOfMeasurment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plannedLoadQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualLoadedQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"netQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"grossQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualDeliveredQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"shortage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"frieghtDeductableQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"claimQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"temperature\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"density\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"moisture\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"volume\",\"type\":[\"null\",\"Measurement\"],\"default\":null},{\"name\":\"packageMeasurement\",\"type\":[\"null\",\"Measurement\"],\"default\":null}]}],\"default\":null},{\"name\":\"allocatedQuantity\",\"type\":[\"null\",\"StandardMeasurement\"],\"default\":null},{\"name\":\"totalQuantity\",\"type\":[\"null\",\"StandardMeasurement\"],\"default\":null},{\"name\":\"allowedLoadTypes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LoadType\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"partnerId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleCategory\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"numberOfWheels\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"passingCapacityMT\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"passingCapacityCFT\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"bodyType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"dimensionString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null},{\"name\":\"lineItems\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FreightUnitLineItem\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"salesOrderMappings\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SalesOrderMapping\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orderId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lineItemId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"legType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"consignmentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"quantity\",\"type\":[\"null\",\"StandardMeasurement\"],\"default\":null}]}}],\"default\":null},{\"name\":\"purchaseOrderId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"purchaseLineItemId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"auctionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"optimisationBasis\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"utilization\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"expectedFreightINR\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"freightType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transporterId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"shipmentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"loadTypeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"alerts\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ResourceAlert\",\"fields\":[{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"closedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"snoozTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"createdAt\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"updatedAt\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}}],\"default\":null},{\"name\":\"finalizationIssues\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}}],\"default\":null},{\"name\":\"updates\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Updates\",\"fields\":[{\"name\":\"forwardReasons\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"updatedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"resourceType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"resourceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sourceOfInformation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"updateType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"forwardedFrom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"revision\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customFields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CustomFields\",\"fields\":[{\"name\":\"fieldType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fieldKey\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"multiple\",\"type\":\"boolean\",\"default\":false},{\"name\":\"isRemark\",\"type\":\"boolean\",\"default\":false},{\"name\":\"remark\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"required\",\"type\":\"boolean\",\"default\":false},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"options\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"indexedValue\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"valueType\",\"type\":[\"null\",{\"type\":\"strin","g\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"input\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unit\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"accessType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null},{\"name\":\"documentDate\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"documentNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String orgId;
  @Deprecated public com.fretron.Model.StandardMeasurement auctionQuantity;
  @Deprecated public com.fretron.Model.StandardMeasurement allocatedQuantity;
  @Deprecated public com.fretron.Model.StandardMeasurement totalQuantity;
  @Deprecated public java.util.List<com.fretron.Model.LoadType> allowedLoadTypes;
  @Deprecated public java.util.List<com.fretron.Model.FreightUnitLineItem> lineItems;
  @Deprecated public com.fretron.Model.Updates updates;
  @Deprecated public java.lang.String type;
  @Deprecated public java.util.List<com.fretron.Model.CustomFields> customFields;
  @Deprecated public java.lang.Long documentDate;
  @Deprecated public java.lang.String documentNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FreightUnit() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param orgId The new value for orgId
   * @param auctionQuantity The new value for auctionQuantity
   * @param allocatedQuantity The new value for allocatedQuantity
   * @param totalQuantity The new value for totalQuantity
   * @param allowedLoadTypes The new value for allowedLoadTypes
   * @param lineItems The new value for lineItems
   * @param updates The new value for updates
   * @param type The new value for type
   * @param customFields The new value for customFields
   * @param documentDate The new value for documentDate
   * @param documentNumber The new value for documentNumber
   */
  public FreightUnit(java.lang.String uuid, java.lang.String orgId, com.fretron.Model.StandardMeasurement auctionQuantity, com.fretron.Model.StandardMeasurement allocatedQuantity, com.fretron.Model.StandardMeasurement totalQuantity, java.util.List<com.fretron.Model.LoadType> allowedLoadTypes, java.util.List<com.fretron.Model.FreightUnitLineItem> lineItems, com.fretron.Model.Updates updates, java.lang.String type, java.util.List<com.fretron.Model.CustomFields> customFields, java.lang.Long documentDate, java.lang.String documentNumber) {
    this.uuid = uuid;
    this.orgId = orgId;
    this.auctionQuantity = auctionQuantity;
    this.allocatedQuantity = allocatedQuantity;
    this.totalQuantity = totalQuantity;
    this.allowedLoadTypes = allowedLoadTypes;
    this.lineItems = lineItems;
    this.updates = updates;
    this.type = type;
    this.customFields = customFields;
    this.documentDate = documentDate;
    this.documentNumber = documentNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return orgId;
    case 2: return auctionQuantity;
    case 3: return allocatedQuantity;
    case 4: return totalQuantity;
    case 5: return allowedLoadTypes;
    case 6: return lineItems;
    case 7: return updates;
    case 8: return type;
    case 9: return customFields;
    case 10: return documentDate;
    case 11: return documentNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: orgId = (java.lang.String)value$; break;
    case 2: auctionQuantity = (com.fretron.Model.StandardMeasurement)value$; break;
    case 3: allocatedQuantity = (com.fretron.Model.StandardMeasurement)value$; break;
    case 4: totalQuantity = (com.fretron.Model.StandardMeasurement)value$; break;
    case 5: allowedLoadTypes = (java.util.List<com.fretron.Model.LoadType>)value$; break;
    case 6: lineItems = (java.util.List<com.fretron.Model.FreightUnitLineItem>)value$; break;
    case 7: updates = (com.fretron.Model.Updates)value$; break;
    case 8: type = (java.lang.String)value$; break;
    case 9: customFields = (java.util.List<com.fretron.Model.CustomFields>)value$; break;
    case 10: documentDate = (java.lang.Long)value$; break;
    case 11: documentNumber = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'auctionQuantity' field.
   * @return The value of the 'auctionQuantity' field.
   */
  public com.fretron.Model.StandardMeasurement getAuctionQuantity() {
    return auctionQuantity;
  }

  /**
   * Sets the value of the 'auctionQuantity' field.
   * @param value the value to set.
   */
  public void setAuctionQuantity(com.fretron.Model.StandardMeasurement value) {
    this.auctionQuantity = value;
  }

  /**
   * Gets the value of the 'allocatedQuantity' field.
   * @return The value of the 'allocatedQuantity' field.
   */
  public com.fretron.Model.StandardMeasurement getAllocatedQuantity() {
    return allocatedQuantity;
  }

  /**
   * Sets the value of the 'allocatedQuantity' field.
   * @param value the value to set.
   */
  public void setAllocatedQuantity(com.fretron.Model.StandardMeasurement value) {
    this.allocatedQuantity = value;
  }

  /**
   * Gets the value of the 'totalQuantity' field.
   * @return The value of the 'totalQuantity' field.
   */
  public com.fretron.Model.StandardMeasurement getTotalQuantity() {
    return totalQuantity;
  }

  /**
   * Sets the value of the 'totalQuantity' field.
   * @param value the value to set.
   */
  public void setTotalQuantity(com.fretron.Model.StandardMeasurement value) {
    this.totalQuantity = value;
  }

  /**
   * Gets the value of the 'allowedLoadTypes' field.
   * @return The value of the 'allowedLoadTypes' field.
   */
  public java.util.List<com.fretron.Model.LoadType> getAllowedLoadTypes() {
    return allowedLoadTypes;
  }

  /**
   * Sets the value of the 'allowedLoadTypes' field.
   * @param value the value to set.
   */
  public void setAllowedLoadTypes(java.util.List<com.fretron.Model.LoadType> value) {
    this.allowedLoadTypes = value;
  }

  /**
   * Gets the value of the 'lineItems' field.
   * @return The value of the 'lineItems' field.
   */
  public java.util.List<com.fretron.Model.FreightUnitLineItem> getLineItems() {
    return lineItems;
  }

  /**
   * Sets the value of the 'lineItems' field.
   * @param value the value to set.
   */
  public void setLineItems(java.util.List<com.fretron.Model.FreightUnitLineItem> value) {
    this.lineItems = value;
  }

  /**
   * Gets the value of the 'updates' field.
   * @return The value of the 'updates' field.
   */
  public com.fretron.Model.Updates getUpdates() {
    return updates;
  }

  /**
   * Sets the value of the 'updates' field.
   * @param value the value to set.
   */
  public void setUpdates(com.fretron.Model.Updates value) {
    this.updates = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'customFields' field.
   * @return The value of the 'customFields' field.
   */
  public java.util.List<com.fretron.Model.CustomFields> getCustomFields() {
    return customFields;
  }

  /**
   * Sets the value of the 'customFields' field.
   * @param value the value to set.
   */
  public void setCustomFields(java.util.List<com.fretron.Model.CustomFields> value) {
    this.customFields = value;
  }

  /**
   * Gets the value of the 'documentDate' field.
   * @return The value of the 'documentDate' field.
   */
  public java.lang.Long getDocumentDate() {
    return documentDate;
  }

  /**
   * Sets the value of the 'documentDate' field.
   * @param value the value to set.
   */
  public void setDocumentDate(java.lang.Long value) {
    this.documentDate = value;
  }

  /**
   * Gets the value of the 'documentNumber' field.
   * @return The value of the 'documentNumber' field.
   */
  public java.lang.String getDocumentNumber() {
    return documentNumber;
  }

  /**
   * Sets the value of the 'documentNumber' field.
   * @param value the value to set.
   */
  public void setDocumentNumber(java.lang.String value) {
    this.documentNumber = value;
  }

  /**
   * Creates a new FreightUnit RecordBuilder.
   * @return A new FreightUnit RecordBuilder
   */
  public static com.fretron.Model.FreightUnit.Builder newBuilder() {
    return new com.fretron.Model.FreightUnit.Builder();
  }

  /**
   * Creates a new FreightUnit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FreightUnit RecordBuilder
   */
  public static com.fretron.Model.FreightUnit.Builder newBuilder(com.fretron.Model.FreightUnit.Builder other) {
    return new com.fretron.Model.FreightUnit.Builder(other);
  }

  /**
   * Creates a new FreightUnit RecordBuilder by copying an existing FreightUnit instance.
   * @param other The existing instance to copy.
   * @return A new FreightUnit RecordBuilder
   */
  public static com.fretron.Model.FreightUnit.Builder newBuilder(com.fretron.Model.FreightUnit other) {
    return new com.fretron.Model.FreightUnit.Builder(other);
  }

  /**
   * RecordBuilder for FreightUnit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FreightUnit>
    implements org.apache.avro.data.RecordBuilder<FreightUnit> {

    private java.lang.String uuid;
    private java.lang.String orgId;
    private com.fretron.Model.StandardMeasurement auctionQuantity;
    private com.fretron.Model.StandardMeasurement.Builder auctionQuantityBuilder;
    private com.fretron.Model.StandardMeasurement allocatedQuantity;
    private com.fretron.Model.StandardMeasurement.Builder allocatedQuantityBuilder;
    private com.fretron.Model.StandardMeasurement totalQuantity;
    private com.fretron.Model.StandardMeasurement.Builder totalQuantityBuilder;
    private java.util.List<com.fretron.Model.LoadType> allowedLoadTypes;
    private java.util.List<com.fretron.Model.FreightUnitLineItem> lineItems;
    private com.fretron.Model.Updates updates;
    private com.fretron.Model.Updates.Builder updatesBuilder;
    private java.lang.String type;
    private java.util.List<com.fretron.Model.CustomFields> customFields;
    private java.lang.Long documentDate;
    private java.lang.String documentNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.FreightUnit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.auctionQuantity)) {
        this.auctionQuantity = data().deepCopy(fields()[2].schema(), other.auctionQuantity);
        fieldSetFlags()[2] = true;
      }
      if (other.hasAuctionQuantityBuilder()) {
        this.auctionQuantityBuilder = com.fretron.Model.StandardMeasurement.newBuilder(other.getAuctionQuantityBuilder());
      }
      if (isValidValue(fields()[3], other.allocatedQuantity)) {
        this.allocatedQuantity = data().deepCopy(fields()[3].schema(), other.allocatedQuantity);
        fieldSetFlags()[3] = true;
      }
      if (other.hasAllocatedQuantityBuilder()) {
        this.allocatedQuantityBuilder = com.fretron.Model.StandardMeasurement.newBuilder(other.getAllocatedQuantityBuilder());
      }
      if (isValidValue(fields()[4], other.totalQuantity)) {
        this.totalQuantity = data().deepCopy(fields()[4].schema(), other.totalQuantity);
        fieldSetFlags()[4] = true;
      }
      if (other.hasTotalQuantityBuilder()) {
        this.totalQuantityBuilder = com.fretron.Model.StandardMeasurement.newBuilder(other.getTotalQuantityBuilder());
      }
      if (isValidValue(fields()[5], other.allowedLoadTypes)) {
        this.allowedLoadTypes = data().deepCopy(fields()[5].schema(), other.allowedLoadTypes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lineItems)) {
        this.lineItems = data().deepCopy(fields()[6].schema(), other.lineItems);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updates)) {
        this.updates = data().deepCopy(fields()[7].schema(), other.updates);
        fieldSetFlags()[7] = true;
      }
      if (other.hasUpdatesBuilder()) {
        this.updatesBuilder = com.fretron.Model.Updates.newBuilder(other.getUpdatesBuilder());
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.customFields)) {
        this.customFields = data().deepCopy(fields()[9].schema(), other.customFields);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.documentDate)) {
        this.documentDate = data().deepCopy(fields()[10].schema(), other.documentDate);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.documentNumber)) {
        this.documentNumber = data().deepCopy(fields()[11].schema(), other.documentNumber);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FreightUnit instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.FreightUnit other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.auctionQuantity)) {
        this.auctionQuantity = data().deepCopy(fields()[2].schema(), other.auctionQuantity);
        fieldSetFlags()[2] = true;
      }
      this.auctionQuantityBuilder = null;
      if (isValidValue(fields()[3], other.allocatedQuantity)) {
        this.allocatedQuantity = data().deepCopy(fields()[3].schema(), other.allocatedQuantity);
        fieldSetFlags()[3] = true;
      }
      this.allocatedQuantityBuilder = null;
      if (isValidValue(fields()[4], other.totalQuantity)) {
        this.totalQuantity = data().deepCopy(fields()[4].schema(), other.totalQuantity);
        fieldSetFlags()[4] = true;
      }
      this.totalQuantityBuilder = null;
      if (isValidValue(fields()[5], other.allowedLoadTypes)) {
        this.allowedLoadTypes = data().deepCopy(fields()[5].schema(), other.allowedLoadTypes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lineItems)) {
        this.lineItems = data().deepCopy(fields()[6].schema(), other.lineItems);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updates)) {
        this.updates = data().deepCopy(fields()[7].schema(), other.updates);
        fieldSetFlags()[7] = true;
      }
      this.updatesBuilder = null;
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.customFields)) {
        this.customFields = data().deepCopy(fields()[9].schema(), other.customFields);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.documentDate)) {
        this.documentDate = data().deepCopy(fields()[10].schema(), other.documentDate);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.documentNumber)) {
        this.documentNumber = data().deepCopy(fields()[11].schema(), other.documentNumber);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setOrgId(java.lang.String value) {
      validate(fields()[1], value);
      this.orgId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'auctionQuantity' field.
      * @return The value.
      */
    public com.fretron.Model.StandardMeasurement getAuctionQuantity() {
      return auctionQuantity;
    }

    /**
      * Sets the value of the 'auctionQuantity' field.
      * @param value The value of 'auctionQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setAuctionQuantity(com.fretron.Model.StandardMeasurement value) {
      validate(fields()[2], value);
      this.auctionQuantityBuilder = null;
      this.auctionQuantity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'auctionQuantity' field has been set.
      * @return True if the 'auctionQuantity' field has been set, false otherwise.
      */
    public boolean hasAuctionQuantity() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'auctionQuantity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder getAuctionQuantityBuilder() {
      if (auctionQuantityBuilder == null) {
        if (hasAuctionQuantity()) {
          setAuctionQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder(auctionQuantity));
        } else {
          setAuctionQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder());
        }
      }
      return auctionQuantityBuilder;
    }

    /**
     * Sets the Builder instance for the 'auctionQuantity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.FreightUnit.Builder setAuctionQuantityBuilder(com.fretron.Model.StandardMeasurement.Builder value) {
      clearAuctionQuantity();
      auctionQuantityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'auctionQuantity' field has an active Builder instance
     * @return True if the 'auctionQuantity' field has an active Builder instance
     */
    public boolean hasAuctionQuantityBuilder() {
      return auctionQuantityBuilder != null;
    }

    /**
      * Clears the value of the 'auctionQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearAuctionQuantity() {
      auctionQuantity = null;
      auctionQuantityBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'allocatedQuantity' field.
      * @return The value.
      */
    public com.fretron.Model.StandardMeasurement getAllocatedQuantity() {
      return allocatedQuantity;
    }

    /**
      * Sets the value of the 'allocatedQuantity' field.
      * @param value The value of 'allocatedQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setAllocatedQuantity(com.fretron.Model.StandardMeasurement value) {
      validate(fields()[3], value);
      this.allocatedQuantityBuilder = null;
      this.allocatedQuantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'allocatedQuantity' field has been set.
      * @return True if the 'allocatedQuantity' field has been set, false otherwise.
      */
    public boolean hasAllocatedQuantity() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'allocatedQuantity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder getAllocatedQuantityBuilder() {
      if (allocatedQuantityBuilder == null) {
        if (hasAllocatedQuantity()) {
          setAllocatedQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder(allocatedQuantity));
        } else {
          setAllocatedQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder());
        }
      }
      return allocatedQuantityBuilder;
    }

    /**
     * Sets the Builder instance for the 'allocatedQuantity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.FreightUnit.Builder setAllocatedQuantityBuilder(com.fretron.Model.StandardMeasurement.Builder value) {
      clearAllocatedQuantity();
      allocatedQuantityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'allocatedQuantity' field has an active Builder instance
     * @return True if the 'allocatedQuantity' field has an active Builder instance
     */
    public boolean hasAllocatedQuantityBuilder() {
      return allocatedQuantityBuilder != null;
    }

    /**
      * Clears the value of the 'allocatedQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearAllocatedQuantity() {
      allocatedQuantity = null;
      allocatedQuantityBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalQuantity' field.
      * @return The value.
      */
    public com.fretron.Model.StandardMeasurement getTotalQuantity() {
      return totalQuantity;
    }

    /**
      * Sets the value of the 'totalQuantity' field.
      * @param value The value of 'totalQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setTotalQuantity(com.fretron.Model.StandardMeasurement value) {
      validate(fields()[4], value);
      this.totalQuantityBuilder = null;
      this.totalQuantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalQuantity' field has been set.
      * @return True if the 'totalQuantity' field has been set, false otherwise.
      */
    public boolean hasTotalQuantity() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'totalQuantity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder getTotalQuantityBuilder() {
      if (totalQuantityBuilder == null) {
        if (hasTotalQuantity()) {
          setTotalQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder(totalQuantity));
        } else {
          setTotalQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder());
        }
      }
      return totalQuantityBuilder;
    }

    /**
     * Sets the Builder instance for the 'totalQuantity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.FreightUnit.Builder setTotalQuantityBuilder(com.fretron.Model.StandardMeasurement.Builder value) {
      clearTotalQuantity();
      totalQuantityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'totalQuantity' field has an active Builder instance
     * @return True if the 'totalQuantity' field has an active Builder instance
     */
    public boolean hasTotalQuantityBuilder() {
      return totalQuantityBuilder != null;
    }

    /**
      * Clears the value of the 'totalQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearTotalQuantity() {
      totalQuantity = null;
      totalQuantityBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'allowedLoadTypes' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.LoadType> getAllowedLoadTypes() {
      return allowedLoadTypes;
    }

    /**
      * Sets the value of the 'allowedLoadTypes' field.
      * @param value The value of 'allowedLoadTypes'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setAllowedLoadTypes(java.util.List<com.fretron.Model.LoadType> value) {
      validate(fields()[5], value);
      this.allowedLoadTypes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'allowedLoadTypes' field has been set.
      * @return True if the 'allowedLoadTypes' field has been set, false otherwise.
      */
    public boolean hasAllowedLoadTypes() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'allowedLoadTypes' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearAllowedLoadTypes() {
      allowedLoadTypes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineItems' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.FreightUnitLineItem> getLineItems() {
      return lineItems;
    }

    /**
      * Sets the value of the 'lineItems' field.
      * @param value The value of 'lineItems'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setLineItems(java.util.List<com.fretron.Model.FreightUnitLineItem> value) {
      validate(fields()[6], value);
      this.lineItems = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'lineItems' field has been set.
      * @return True if the 'lineItems' field has been set, false otherwise.
      */
    public boolean hasLineItems() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'lineItems' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearLineItems() {
      lineItems = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'updates' field.
      * @return The value.
      */
    public com.fretron.Model.Updates getUpdates() {
      return updates;
    }

    /**
      * Sets the value of the 'updates' field.
      * @param value The value of 'updates'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setUpdates(com.fretron.Model.Updates value) {
      validate(fields()[7], value);
      this.updatesBuilder = null;
      this.updates = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'updates' field has been set.
      * @return True if the 'updates' field has been set, false otherwise.
      */
    public boolean hasUpdates() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'updates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Updates.Builder getUpdatesBuilder() {
      if (updatesBuilder == null) {
        if (hasUpdates()) {
          setUpdatesBuilder(com.fretron.Model.Updates.newBuilder(updates));
        } else {
          setUpdatesBuilder(com.fretron.Model.Updates.newBuilder());
        }
      }
      return updatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'updates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.FreightUnit.Builder setUpdatesBuilder(com.fretron.Model.Updates.Builder value) {
      clearUpdates();
      updatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'updates' field has an active Builder instance
     * @return True if the 'updates' field has an active Builder instance
     */
    public boolean hasUpdatesBuilder() {
      return updatesBuilder != null;
    }

    /**
      * Clears the value of the 'updates' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearUpdates() {
      updates = null;
      updatesBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setType(java.lang.String value) {
      validate(fields()[8], value);
      this.type = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearType() {
      type = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'customFields' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.CustomFields> getCustomFields() {
      return customFields;
    }

    /**
      * Sets the value of the 'customFields' field.
      * @param value The value of 'customFields'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setCustomFields(java.util.List<com.fretron.Model.CustomFields> value) {
      validate(fields()[9], value);
      this.customFields = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'customFields' field has been set.
      * @return True if the 'customFields' field has been set, false otherwise.
      */
    public boolean hasCustomFields() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'customFields' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearCustomFields() {
      customFields = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentDate' field.
      * @return The value.
      */
    public java.lang.Long getDocumentDate() {
      return documentDate;
    }

    /**
      * Sets the value of the 'documentDate' field.
      * @param value The value of 'documentDate'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setDocumentDate(java.lang.Long value) {
      validate(fields()[10], value);
      this.documentDate = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'documentDate' field has been set.
      * @return True if the 'documentDate' field has been set, false otherwise.
      */
    public boolean hasDocumentDate() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'documentDate' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearDocumentDate() {
      documentDate = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentNumber' field.
      * @return The value.
      */
    public java.lang.String getDocumentNumber() {
      return documentNumber;
    }

    /**
      * Sets the value of the 'documentNumber' field.
      * @param value The value of 'documentNumber'.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder setDocumentNumber(java.lang.String value) {
      validate(fields()[11], value);
      this.documentNumber = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'documentNumber' field has been set.
      * @return True if the 'documentNumber' field has been set, false otherwise.
      */
    public boolean hasDocumentNumber() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'documentNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.FreightUnit.Builder clearDocumentNumber() {
      documentNumber = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public FreightUnit build() {
      try {
        FreightUnit record = new FreightUnit();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.orgId = fieldSetFlags()[1] ? this.orgId : (java.lang.String) defaultValue(fields()[1]);
        if (auctionQuantityBuilder != null) {
          record.auctionQuantity = this.auctionQuantityBuilder.build();
        } else {
          record.auctionQuantity = fieldSetFlags()[2] ? this.auctionQuantity : (com.fretron.Model.StandardMeasurement) defaultValue(fields()[2]);
        }
        if (allocatedQuantityBuilder != null) {
          record.allocatedQuantity = this.allocatedQuantityBuilder.build();
        } else {
          record.allocatedQuantity = fieldSetFlags()[3] ? this.allocatedQuantity : (com.fretron.Model.StandardMeasurement) defaultValue(fields()[3]);
        }
        if (totalQuantityBuilder != null) {
          record.totalQuantity = this.totalQuantityBuilder.build();
        } else {
          record.totalQuantity = fieldSetFlags()[4] ? this.totalQuantity : (com.fretron.Model.StandardMeasurement) defaultValue(fields()[4]);
        }
        record.allowedLoadTypes = fieldSetFlags()[5] ? this.allowedLoadTypes : (java.util.List<com.fretron.Model.LoadType>) defaultValue(fields()[5]);
        record.lineItems = fieldSetFlags()[6] ? this.lineItems : (java.util.List<com.fretron.Model.FreightUnitLineItem>) defaultValue(fields()[6]);
        if (updatesBuilder != null) {
          record.updates = this.updatesBuilder.build();
        } else {
          record.updates = fieldSetFlags()[7] ? this.updates : (com.fretron.Model.Updates) defaultValue(fields()[7]);
        }
        record.type = fieldSetFlags()[8] ? this.type : (java.lang.String) defaultValue(fields()[8]);
        record.customFields = fieldSetFlags()[9] ? this.customFields : (java.util.List<com.fretron.Model.CustomFields>) defaultValue(fields()[9]);
        record.documentDate = fieldSetFlags()[10] ? this.documentDate : (java.lang.Long) defaultValue(fields()[10]);
        record.documentNumber = fieldSetFlags()[11] ? this.documentNumber : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
