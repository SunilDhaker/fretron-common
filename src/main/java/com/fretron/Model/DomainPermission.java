/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DomainPermission extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1768640833111582974L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DomainPermission\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"entity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isFilteredAccess\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"filters\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"permissions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"chooseAtAssignment\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String entity;
  @Deprecated public java.lang.Boolean isFilteredAccess;
  @Deprecated public java.lang.String filters;
  @Deprecated public java.util.List<java.lang.String> permissions;
  @Deprecated public java.lang.Boolean chooseAtAssignment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DomainPermission() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param entity The new value for entity
   * @param isFilteredAccess The new value for isFilteredAccess
   * @param filters The new value for filters
   * @param permissions The new value for permissions
   * @param chooseAtAssignment The new value for chooseAtAssignment
   */
  public DomainPermission(java.lang.String uuid, java.lang.String entity, java.lang.Boolean isFilteredAccess, java.lang.String filters, java.util.List<java.lang.String> permissions, java.lang.Boolean chooseAtAssignment) {
    this.uuid = uuid;
    this.entity = entity;
    this.isFilteredAccess = isFilteredAccess;
    this.filters = filters;
    this.permissions = permissions;
    this.chooseAtAssignment = chooseAtAssignment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return entity;
    case 2: return isFilteredAccess;
    case 3: return filters;
    case 4: return permissions;
    case 5: return chooseAtAssignment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: entity = (java.lang.String)value$; break;
    case 2: isFilteredAccess = (java.lang.Boolean)value$; break;
    case 3: filters = (java.lang.String)value$; break;
    case 4: permissions = (java.util.List<java.lang.String>)value$; break;
    case 5: chooseAtAssignment = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'entity' field.
   * @return The value of the 'entity' field.
   */
  public java.lang.String getEntity() {
    return entity;
  }

  /**
   * Sets the value of the 'entity' field.
   * @param value the value to set.
   */
  public void setEntity(java.lang.String value) {
    this.entity = value;
  }

  /**
   * Gets the value of the 'isFilteredAccess' field.
   * @return The value of the 'isFilteredAccess' field.
   */
  public java.lang.Boolean getIsFilteredAccess() {
    return isFilteredAccess;
  }

  /**
   * Sets the value of the 'isFilteredAccess' field.
   * @param value the value to set.
   */
  public void setIsFilteredAccess(java.lang.Boolean value) {
    this.isFilteredAccess = value;
  }

  /**
   * Gets the value of the 'filters' field.
   * @return The value of the 'filters' field.
   */
  public java.lang.String getFilters() {
    return filters;
  }

  /**
   * Sets the value of the 'filters' field.
   * @param value the value to set.
   */
  public void setFilters(java.lang.String value) {
    this.filters = value;
  }

  /**
   * Gets the value of the 'permissions' field.
   * @return The value of the 'permissions' field.
   */
  public java.util.List<java.lang.String> getPermissions() {
    return permissions;
  }

  /**
   * Sets the value of the 'permissions' field.
   * @param value the value to set.
   */
  public void setPermissions(java.util.List<java.lang.String> value) {
    this.permissions = value;
  }

  /**
   * Gets the value of the 'chooseAtAssignment' field.
   * @return The value of the 'chooseAtAssignment' field.
   */
  public java.lang.Boolean getChooseAtAssignment() {
    return chooseAtAssignment;
  }

  /**
   * Sets the value of the 'chooseAtAssignment' field.
   * @param value the value to set.
   */
  public void setChooseAtAssignment(java.lang.Boolean value) {
    this.chooseAtAssignment = value;
  }

  /**
   * Creates a new DomainPermission RecordBuilder.
   * @return A new DomainPermission RecordBuilder
   */
  public static com.fretron.Model.DomainPermission.Builder newBuilder() {
    return new com.fretron.Model.DomainPermission.Builder();
  }

  /**
   * Creates a new DomainPermission RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DomainPermission RecordBuilder
   */
  public static com.fretron.Model.DomainPermission.Builder newBuilder(com.fretron.Model.DomainPermission.Builder other) {
    return new com.fretron.Model.DomainPermission.Builder(other);
  }

  /**
   * Creates a new DomainPermission RecordBuilder by copying an existing DomainPermission instance.
   * @param other The existing instance to copy.
   * @return A new DomainPermission RecordBuilder
   */
  public static com.fretron.Model.DomainPermission.Builder newBuilder(com.fretron.Model.DomainPermission other) {
    return new com.fretron.Model.DomainPermission.Builder(other);
  }

  /**
   * RecordBuilder for DomainPermission instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DomainPermission>
    implements org.apache.avro.data.RecordBuilder<DomainPermission> {

    private java.lang.String uuid;
    private java.lang.String entity;
    private java.lang.Boolean isFilteredAccess;
    private java.lang.String filters;
    private java.util.List<java.lang.String> permissions;
    private java.lang.Boolean chooseAtAssignment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.DomainPermission.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entity)) {
        this.entity = data().deepCopy(fields()[1].schema(), other.entity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isFilteredAccess)) {
        this.isFilteredAccess = data().deepCopy(fields()[2].schema(), other.isFilteredAccess);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.filters)) {
        this.filters = data().deepCopy(fields()[3].schema(), other.filters);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.permissions)) {
        this.permissions = data().deepCopy(fields()[4].schema(), other.permissions);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.chooseAtAssignment)) {
        this.chooseAtAssignment = data().deepCopy(fields()[5].schema(), other.chooseAtAssignment);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DomainPermission instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.DomainPermission other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entity)) {
        this.entity = data().deepCopy(fields()[1].schema(), other.entity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isFilteredAccess)) {
        this.isFilteredAccess = data().deepCopy(fields()[2].schema(), other.isFilteredAccess);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.filters)) {
        this.filters = data().deepCopy(fields()[3].schema(), other.filters);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.permissions)) {
        this.permissions = data().deepCopy(fields()[4].schema(), other.permissions);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.chooseAtAssignment)) {
        this.chooseAtAssignment = data().deepCopy(fields()[5].schema(), other.chooseAtAssignment);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'entity' field.
      * @return The value.
      */
    public java.lang.String getEntity() {
      return entity;
    }

    /**
      * Sets the value of the 'entity' field.
      * @param value The value of 'entity'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setEntity(java.lang.String value) {
      validate(fields()[1], value);
      this.entity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'entity' field has been set.
      * @return True if the 'entity' field has been set, false otherwise.
      */
    public boolean hasEntity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'entity' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearEntity() {
      entity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'isFilteredAccess' field.
      * @return The value.
      */
    public java.lang.Boolean getIsFilteredAccess() {
      return isFilteredAccess;
    }

    /**
      * Sets the value of the 'isFilteredAccess' field.
      * @param value The value of 'isFilteredAccess'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setIsFilteredAccess(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.isFilteredAccess = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'isFilteredAccess' field has been set.
      * @return True if the 'isFilteredAccess' field has been set, false otherwise.
      */
    public boolean hasIsFilteredAccess() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'isFilteredAccess' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearIsFilteredAccess() {
      isFilteredAccess = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'filters' field.
      * @return The value.
      */
    public java.lang.String getFilters() {
      return filters;
    }

    /**
      * Sets the value of the 'filters' field.
      * @param value The value of 'filters'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setFilters(java.lang.String value) {
      validate(fields()[3], value);
      this.filters = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'filters' field has been set.
      * @return True if the 'filters' field has been set, false otherwise.
      */
    public boolean hasFilters() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'filters' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearFilters() {
      filters = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'permissions' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getPermissions() {
      return permissions;
    }

    /**
      * Sets the value of the 'permissions' field.
      * @param value The value of 'permissions'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setPermissions(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.permissions = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'permissions' field has been set.
      * @return True if the 'permissions' field has been set, false otherwise.
      */
    public boolean hasPermissions() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'permissions' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearPermissions() {
      permissions = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'chooseAtAssignment' field.
      * @return The value.
      */
    public java.lang.Boolean getChooseAtAssignment() {
      return chooseAtAssignment;
    }

    /**
      * Sets the value of the 'chooseAtAssignment' field.
      * @param value The value of 'chooseAtAssignment'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setChooseAtAssignment(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.chooseAtAssignment = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'chooseAtAssignment' field has been set.
      * @return True if the 'chooseAtAssignment' field has been set, false otherwise.
      */
    public boolean hasChooseAtAssignment() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'chooseAtAssignment' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearChooseAtAssignment() {
      chooseAtAssignment = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public DomainPermission build() {
      try {
        DomainPermission record = new DomainPermission();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.entity = fieldSetFlags()[1] ? this.entity : (java.lang.String) defaultValue(fields()[1]);
        record.isFilteredAccess = fieldSetFlags()[2] ? this.isFilteredAccess : (java.lang.Boolean) defaultValue(fields()[2]);
        record.filters = fieldSetFlags()[3] ? this.filters : (java.lang.String) defaultValue(fields()[3]);
        record.permissions = fieldSetFlags()[4] ? this.permissions : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        record.chooseAtAssignment = fieldSetFlags()[5] ? this.chooseAtAssignment : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
