/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DomainPermission extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7936506343387930582L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DomainPermission\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"entity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"canView\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"canEdit\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"canDelete\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"filteredDataAccess\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"filters\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"morePermissions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String entity;
  @Deprecated public java.lang.Boolean canView;
  @Deprecated public java.lang.Boolean canEdit;
  @Deprecated public java.lang.Boolean canDelete;
  @Deprecated public java.lang.Boolean filteredDataAccess;
  @Deprecated public java.lang.String filters;
  @Deprecated public java.util.List<java.lang.String> morePermissions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DomainPermission() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param entity The new value for entity
   * @param canView The new value for canView
   * @param canEdit The new value for canEdit
   * @param canDelete The new value for canDelete
   * @param filteredDataAccess The new value for filteredDataAccess
   * @param filters The new value for filters
   * @param morePermissions The new value for morePermissions
   */
  public DomainPermission(java.lang.String uuid, java.lang.String entity, java.lang.Boolean canView, java.lang.Boolean canEdit, java.lang.Boolean canDelete, java.lang.Boolean filteredDataAccess, java.lang.String filters, java.util.List<java.lang.String> morePermissions) {
    this.uuid = uuid;
    this.entity = entity;
    this.canView = canView;
    this.canEdit = canEdit;
    this.canDelete = canDelete;
    this.filteredDataAccess = filteredDataAccess;
    this.filters = filters;
    this.morePermissions = morePermissions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return entity;
    case 2: return canView;
    case 3: return canEdit;
    case 4: return canDelete;
    case 5: return filteredDataAccess;
    case 6: return filters;
    case 7: return morePermissions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: entity = (java.lang.String)value$; break;
    case 2: canView = (java.lang.Boolean)value$; break;
    case 3: canEdit = (java.lang.Boolean)value$; break;
    case 4: canDelete = (java.lang.Boolean)value$; break;
    case 5: filteredDataAccess = (java.lang.Boolean)value$; break;
    case 6: filters = (java.lang.String)value$; break;
    case 7: morePermissions = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'entity' field.
   * @return The value of the 'entity' field.
   */
  public java.lang.String getEntity() {
    return entity;
  }

  /**
   * Sets the value of the 'entity' field.
   * @param value the value to set.
   */
  public void setEntity(java.lang.String value) {
    this.entity = value;
  }

  /**
   * Gets the value of the 'canView' field.
   * @return The value of the 'canView' field.
   */
  public java.lang.Boolean getCanView() {
    return canView;
  }

  /**
   * Sets the value of the 'canView' field.
   * @param value the value to set.
   */
  public void setCanView(java.lang.Boolean value) {
    this.canView = value;
  }

  /**
   * Gets the value of the 'canEdit' field.
   * @return The value of the 'canEdit' field.
   */
  public java.lang.Boolean getCanEdit() {
    return canEdit;
  }

  /**
   * Sets the value of the 'canEdit' field.
   * @param value the value to set.
   */
  public void setCanEdit(java.lang.Boolean value) {
    this.canEdit = value;
  }

  /**
   * Gets the value of the 'canDelete' field.
   * @return The value of the 'canDelete' field.
   */
  public java.lang.Boolean getCanDelete() {
    return canDelete;
  }

  /**
   * Sets the value of the 'canDelete' field.
   * @param value the value to set.
   */
  public void setCanDelete(java.lang.Boolean value) {
    this.canDelete = value;
  }

  /**
   * Gets the value of the 'filteredDataAccess' field.
   * @return The value of the 'filteredDataAccess' field.
   */
  public java.lang.Boolean getFilteredDataAccess() {
    return filteredDataAccess;
  }

  /**
   * Sets the value of the 'filteredDataAccess' field.
   * @param value the value to set.
   */
  public void setFilteredDataAccess(java.lang.Boolean value) {
    this.filteredDataAccess = value;
  }

  /**
   * Gets the value of the 'filters' field.
   * @return The value of the 'filters' field.
   */
  public java.lang.String getFilters() {
    return filters;
  }

  /**
   * Sets the value of the 'filters' field.
   * @param value the value to set.
   */
  public void setFilters(java.lang.String value) {
    this.filters = value;
  }

  /**
   * Gets the value of the 'morePermissions' field.
   * @return The value of the 'morePermissions' field.
   */
  public java.util.List<java.lang.String> getMorePermissions() {
    return morePermissions;
  }

  /**
   * Sets the value of the 'morePermissions' field.
   * @param value the value to set.
   */
  public void setMorePermissions(java.util.List<java.lang.String> value) {
    this.morePermissions = value;
  }

  /**
   * Creates a new DomainPermission RecordBuilder.
   * @return A new DomainPermission RecordBuilder
   */
  public static com.fretron.Model.DomainPermission.Builder newBuilder() {
    return new com.fretron.Model.DomainPermission.Builder();
  }

  /**
   * Creates a new DomainPermission RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DomainPermission RecordBuilder
   */
  public static com.fretron.Model.DomainPermission.Builder newBuilder(com.fretron.Model.DomainPermission.Builder other) {
    return new com.fretron.Model.DomainPermission.Builder(other);
  }

  /**
   * Creates a new DomainPermission RecordBuilder by copying an existing DomainPermission instance.
   * @param other The existing instance to copy.
   * @return A new DomainPermission RecordBuilder
   */
  public static com.fretron.Model.DomainPermission.Builder newBuilder(com.fretron.Model.DomainPermission other) {
    return new com.fretron.Model.DomainPermission.Builder(other);
  }

  /**
   * RecordBuilder for DomainPermission instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DomainPermission>
    implements org.apache.avro.data.RecordBuilder<DomainPermission> {

    private java.lang.String uuid;
    private java.lang.String entity;
    private java.lang.Boolean canView;
    private java.lang.Boolean canEdit;
    private java.lang.Boolean canDelete;
    private java.lang.Boolean filteredDataAccess;
    private java.lang.String filters;
    private java.util.List<java.lang.String> morePermissions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.DomainPermission.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entity)) {
        this.entity = data().deepCopy(fields()[1].schema(), other.entity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.canView)) {
        this.canView = data().deepCopy(fields()[2].schema(), other.canView);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.canEdit)) {
        this.canEdit = data().deepCopy(fields()[3].schema(), other.canEdit);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.canDelete)) {
        this.canDelete = data().deepCopy(fields()[4].schema(), other.canDelete);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.filteredDataAccess)) {
        this.filteredDataAccess = data().deepCopy(fields()[5].schema(), other.filteredDataAccess);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.filters)) {
        this.filters = data().deepCopy(fields()[6].schema(), other.filters);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.morePermissions)) {
        this.morePermissions = data().deepCopy(fields()[7].schema(), other.morePermissions);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DomainPermission instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.DomainPermission other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entity)) {
        this.entity = data().deepCopy(fields()[1].schema(), other.entity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.canView)) {
        this.canView = data().deepCopy(fields()[2].schema(), other.canView);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.canEdit)) {
        this.canEdit = data().deepCopy(fields()[3].schema(), other.canEdit);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.canDelete)) {
        this.canDelete = data().deepCopy(fields()[4].schema(), other.canDelete);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.filteredDataAccess)) {
        this.filteredDataAccess = data().deepCopy(fields()[5].schema(), other.filteredDataAccess);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.filters)) {
        this.filters = data().deepCopy(fields()[6].schema(), other.filters);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.morePermissions)) {
        this.morePermissions = data().deepCopy(fields()[7].schema(), other.morePermissions);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'entity' field.
      * @return The value.
      */
    public java.lang.String getEntity() {
      return entity;
    }

    /**
      * Sets the value of the 'entity' field.
      * @param value The value of 'entity'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setEntity(java.lang.String value) {
      validate(fields()[1], value);
      this.entity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'entity' field has been set.
      * @return True if the 'entity' field has been set, false otherwise.
      */
    public boolean hasEntity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'entity' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearEntity() {
      entity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'canView' field.
      * @return The value.
      */
    public java.lang.Boolean getCanView() {
      return canView;
    }

    /**
      * Sets the value of the 'canView' field.
      * @param value The value of 'canView'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setCanView(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.canView = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'canView' field has been set.
      * @return True if the 'canView' field has been set, false otherwise.
      */
    public boolean hasCanView() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'canView' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearCanView() {
      canView = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'canEdit' field.
      * @return The value.
      */
    public java.lang.Boolean getCanEdit() {
      return canEdit;
    }

    /**
      * Sets the value of the 'canEdit' field.
      * @param value The value of 'canEdit'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setCanEdit(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.canEdit = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'canEdit' field has been set.
      * @return True if the 'canEdit' field has been set, false otherwise.
      */
    public boolean hasCanEdit() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'canEdit' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearCanEdit() {
      canEdit = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'canDelete' field.
      * @return The value.
      */
    public java.lang.Boolean getCanDelete() {
      return canDelete;
    }

    /**
      * Sets the value of the 'canDelete' field.
      * @param value The value of 'canDelete'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setCanDelete(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.canDelete = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'canDelete' field has been set.
      * @return True if the 'canDelete' field has been set, false otherwise.
      */
    public boolean hasCanDelete() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'canDelete' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearCanDelete() {
      canDelete = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'filteredDataAccess' field.
      * @return The value.
      */
    public java.lang.Boolean getFilteredDataAccess() {
      return filteredDataAccess;
    }

    /**
      * Sets the value of the 'filteredDataAccess' field.
      * @param value The value of 'filteredDataAccess'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setFilteredDataAccess(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.filteredDataAccess = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'filteredDataAccess' field has been set.
      * @return True if the 'filteredDataAccess' field has been set, false otherwise.
      */
    public boolean hasFilteredDataAccess() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'filteredDataAccess' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearFilteredDataAccess() {
      filteredDataAccess = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'filters' field.
      * @return The value.
      */
    public java.lang.String getFilters() {
      return filters;
    }

    /**
      * Sets the value of the 'filters' field.
      * @param value The value of 'filters'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setFilters(java.lang.String value) {
      validate(fields()[6], value);
      this.filters = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'filters' field has been set.
      * @return True if the 'filters' field has been set, false otherwise.
      */
    public boolean hasFilters() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'filters' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearFilters() {
      filters = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'morePermissions' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getMorePermissions() {
      return morePermissions;
    }

    /**
      * Sets the value of the 'morePermissions' field.
      * @param value The value of 'morePermissions'.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder setMorePermissions(java.util.List<java.lang.String> value) {
      validate(fields()[7], value);
      this.morePermissions = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'morePermissions' field has been set.
      * @return True if the 'morePermissions' field has been set, false otherwise.
      */
    public boolean hasMorePermissions() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'morePermissions' field.
      * @return This builder.
      */
    public com.fretron.Model.DomainPermission.Builder clearMorePermissions() {
      morePermissions = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public DomainPermission build() {
      try {
        DomainPermission record = new DomainPermission();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.entity = fieldSetFlags()[1] ? this.entity : (java.lang.String) defaultValue(fields()[1]);
        record.canView = fieldSetFlags()[2] ? this.canView : (java.lang.Boolean) defaultValue(fields()[2]);
        record.canEdit = fieldSetFlags()[3] ? this.canEdit : (java.lang.Boolean) defaultValue(fields()[3]);
        record.canDelete = fieldSetFlags()[4] ? this.canDelete : (java.lang.Boolean) defaultValue(fields()[4]);
        record.filteredDataAccess = fieldSetFlags()[5] ? this.filteredDataAccess : (java.lang.Boolean) defaultValue(fields()[5]);
        record.filters = fieldSetFlags()[6] ? this.filters : (java.lang.String) defaultValue(fields()[6]);
        record.morePermissions = fieldSetFlags()[7] ? this.morePermissions : (java.util.List<java.lang.String>) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
