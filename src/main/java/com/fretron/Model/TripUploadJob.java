/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TripUploadJob extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2663108721514037148L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TripUploadJob\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"orgId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"jobId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"creationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"totalTripCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"processingStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"processedTripCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"filePath\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"discardedTripsByUser\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"discardedTripsBySystem\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"markedCompletedTripsCount\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String orgId;
  @Deprecated public java.lang.String jobId;
  @Deprecated public java.lang.Long creationTime;
  @Deprecated public java.lang.Integer totalTripCount;
  @Deprecated public java.lang.String processingStatus;
  @Deprecated public java.lang.Integer processedTripCount;
  @Deprecated public java.lang.String filePath;
  @Deprecated public java.lang.Integer discardedTripsByUser;
  @Deprecated public java.lang.Integer discardedTripsBySystem;
  @Deprecated public java.lang.Integer markedCompletedTripsCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TripUploadJob() {}

  /**
   * All-args constructor.
   * @param orgId The new value for orgId
   * @param jobId The new value for jobId
   * @param creationTime The new value for creationTime
   * @param totalTripCount The new value for totalTripCount
   * @param processingStatus The new value for processingStatus
   * @param processedTripCount The new value for processedTripCount
   * @param filePath The new value for filePath
   * @param discardedTripsByUser The new value for discardedTripsByUser
   * @param discardedTripsBySystem The new value for discardedTripsBySystem
   * @param markedCompletedTripsCount The new value for markedCompletedTripsCount
   */
  public TripUploadJob(java.lang.String orgId, java.lang.String jobId, java.lang.Long creationTime, java.lang.Integer totalTripCount, java.lang.String processingStatus, java.lang.Integer processedTripCount, java.lang.String filePath, java.lang.Integer discardedTripsByUser, java.lang.Integer discardedTripsBySystem, java.lang.Integer markedCompletedTripsCount) {
    this.orgId = orgId;
    this.jobId = jobId;
    this.creationTime = creationTime;
    this.totalTripCount = totalTripCount;
    this.processingStatus = processingStatus;
    this.processedTripCount = processedTripCount;
    this.filePath = filePath;
    this.discardedTripsByUser = discardedTripsByUser;
    this.discardedTripsBySystem = discardedTripsBySystem;
    this.markedCompletedTripsCount = markedCompletedTripsCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orgId;
    case 1: return jobId;
    case 2: return creationTime;
    case 3: return totalTripCount;
    case 4: return processingStatus;
    case 5: return processedTripCount;
    case 6: return filePath;
    case 7: return discardedTripsByUser;
    case 8: return discardedTripsBySystem;
    case 9: return markedCompletedTripsCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orgId = (java.lang.String)value$; break;
    case 1: jobId = (java.lang.String)value$; break;
    case 2: creationTime = (java.lang.Long)value$; break;
    case 3: totalTripCount = (java.lang.Integer)value$; break;
    case 4: processingStatus = (java.lang.String)value$; break;
    case 5: processedTripCount = (java.lang.Integer)value$; break;
    case 6: filePath = (java.lang.String)value$; break;
    case 7: discardedTripsByUser = (java.lang.Integer)value$; break;
    case 8: discardedTripsBySystem = (java.lang.Integer)value$; break;
    case 9: markedCompletedTripsCount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'jobId' field.
   * @return The value of the 'jobId' field.
   */
  public java.lang.String getJobId() {
    return jobId;
  }

  /**
   * Sets the value of the 'jobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.String value) {
    this.jobId = value;
  }

  /**
   * Gets the value of the 'creationTime' field.
   * @return The value of the 'creationTime' field.
   */
  public java.lang.Long getCreationTime() {
    return creationTime;
  }

  /**
   * Sets the value of the 'creationTime' field.
   * @param value the value to set.
   */
  public void setCreationTime(java.lang.Long value) {
    this.creationTime = value;
  }

  /**
   * Gets the value of the 'totalTripCount' field.
   * @return The value of the 'totalTripCount' field.
   */
  public java.lang.Integer getTotalTripCount() {
    return totalTripCount;
  }

  /**
   * Sets the value of the 'totalTripCount' field.
   * @param value the value to set.
   */
  public void setTotalTripCount(java.lang.Integer value) {
    this.totalTripCount = value;
  }

  /**
   * Gets the value of the 'processingStatus' field.
   * @return The value of the 'processingStatus' field.
   */
  public java.lang.String getProcessingStatus() {
    return processingStatus;
  }

  /**
   * Sets the value of the 'processingStatus' field.
   * @param value the value to set.
   */
  public void setProcessingStatus(java.lang.String value) {
    this.processingStatus = value;
  }

  /**
   * Gets the value of the 'processedTripCount' field.
   * @return The value of the 'processedTripCount' field.
   */
  public java.lang.Integer getProcessedTripCount() {
    return processedTripCount;
  }

  /**
   * Sets the value of the 'processedTripCount' field.
   * @param value the value to set.
   */
  public void setProcessedTripCount(java.lang.Integer value) {
    this.processedTripCount = value;
  }

  /**
   * Gets the value of the 'filePath' field.
   * @return The value of the 'filePath' field.
   */
  public java.lang.String getFilePath() {
    return filePath;
  }

  /**
   * Sets the value of the 'filePath' field.
   * @param value the value to set.
   */
  public void setFilePath(java.lang.String value) {
    this.filePath = value;
  }

  /**
   * Gets the value of the 'discardedTripsByUser' field.
   * @return The value of the 'discardedTripsByUser' field.
   */
  public java.lang.Integer getDiscardedTripsByUser() {
    return discardedTripsByUser;
  }

  /**
   * Sets the value of the 'discardedTripsByUser' field.
   * @param value the value to set.
   */
  public void setDiscardedTripsByUser(java.lang.Integer value) {
    this.discardedTripsByUser = value;
  }

  /**
   * Gets the value of the 'discardedTripsBySystem' field.
   * @return The value of the 'discardedTripsBySystem' field.
   */
  public java.lang.Integer getDiscardedTripsBySystem() {
    return discardedTripsBySystem;
  }

  /**
   * Sets the value of the 'discardedTripsBySystem' field.
   * @param value the value to set.
   */
  public void setDiscardedTripsBySystem(java.lang.Integer value) {
    this.discardedTripsBySystem = value;
  }

  /**
   * Gets the value of the 'markedCompletedTripsCount' field.
   * @return The value of the 'markedCompletedTripsCount' field.
   */
  public java.lang.Integer getMarkedCompletedTripsCount() {
    return markedCompletedTripsCount;
  }

  /**
   * Sets the value of the 'markedCompletedTripsCount' field.
   * @param value the value to set.
   */
  public void setMarkedCompletedTripsCount(java.lang.Integer value) {
    this.markedCompletedTripsCount = value;
  }

  /**
   * Creates a new TripUploadJob RecordBuilder.
   * @return A new TripUploadJob RecordBuilder
   */
  public static com.fretron.Model.TripUploadJob.Builder newBuilder() {
    return new com.fretron.Model.TripUploadJob.Builder();
  }

  /**
   * Creates a new TripUploadJob RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TripUploadJob RecordBuilder
   */
  public static com.fretron.Model.TripUploadJob.Builder newBuilder(com.fretron.Model.TripUploadJob.Builder other) {
    return new com.fretron.Model.TripUploadJob.Builder(other);
  }

  /**
   * Creates a new TripUploadJob RecordBuilder by copying an existing TripUploadJob instance.
   * @param other The existing instance to copy.
   * @return A new TripUploadJob RecordBuilder
   */
  public static com.fretron.Model.TripUploadJob.Builder newBuilder(com.fretron.Model.TripUploadJob other) {
    return new com.fretron.Model.TripUploadJob.Builder(other);
  }

  /**
   * RecordBuilder for TripUploadJob instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TripUploadJob>
    implements org.apache.avro.data.RecordBuilder<TripUploadJob> {

    private java.lang.String orgId;
    private java.lang.String jobId;
    private java.lang.Long creationTime;
    private java.lang.Integer totalTripCount;
    private java.lang.String processingStatus;
    private java.lang.Integer processedTripCount;
    private java.lang.String filePath;
    private java.lang.Integer discardedTripsByUser;
    private java.lang.Integer discardedTripsBySystem;
    private java.lang.Integer markedCompletedTripsCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.TripUploadJob.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orgId)) {
        this.orgId = data().deepCopy(fields()[0].schema(), other.orgId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jobId)) {
        this.jobId = data().deepCopy(fields()[1].schema(), other.jobId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creationTime)) {
        this.creationTime = data().deepCopy(fields()[2].schema(), other.creationTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalTripCount)) {
        this.totalTripCount = data().deepCopy(fields()[3].schema(), other.totalTripCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.processingStatus)) {
        this.processingStatus = data().deepCopy(fields()[4].schema(), other.processingStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.processedTripCount)) {
        this.processedTripCount = data().deepCopy(fields()[5].schema(), other.processedTripCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.filePath)) {
        this.filePath = data().deepCopy(fields()[6].schema(), other.filePath);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.discardedTripsByUser)) {
        this.discardedTripsByUser = data().deepCopy(fields()[7].schema(), other.discardedTripsByUser);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.discardedTripsBySystem)) {
        this.discardedTripsBySystem = data().deepCopy(fields()[8].schema(), other.discardedTripsBySystem);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.markedCompletedTripsCount)) {
        this.markedCompletedTripsCount = data().deepCopy(fields()[9].schema(), other.markedCompletedTripsCount);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TripUploadJob instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.TripUploadJob other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.orgId)) {
        this.orgId = data().deepCopy(fields()[0].schema(), other.orgId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jobId)) {
        this.jobId = data().deepCopy(fields()[1].schema(), other.jobId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creationTime)) {
        this.creationTime = data().deepCopy(fields()[2].schema(), other.creationTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalTripCount)) {
        this.totalTripCount = data().deepCopy(fields()[3].schema(), other.totalTripCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.processingStatus)) {
        this.processingStatus = data().deepCopy(fields()[4].schema(), other.processingStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.processedTripCount)) {
        this.processedTripCount = data().deepCopy(fields()[5].schema(), other.processedTripCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.filePath)) {
        this.filePath = data().deepCopy(fields()[6].schema(), other.filePath);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.discardedTripsByUser)) {
        this.discardedTripsByUser = data().deepCopy(fields()[7].schema(), other.discardedTripsByUser);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.discardedTripsBySystem)) {
        this.discardedTripsBySystem = data().deepCopy(fields()[8].schema(), other.discardedTripsBySystem);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.markedCompletedTripsCount)) {
        this.markedCompletedTripsCount = data().deepCopy(fields()[9].schema(), other.markedCompletedTripsCount);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setOrgId(java.lang.String value) {
      validate(fields()[0], value);
      this.orgId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobId' field.
      * @return The value.
      */
    public java.lang.String getJobId() {
      return jobId;
    }

    /**
      * Sets the value of the 'jobId' field.
      * @param value The value of 'jobId'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setJobId(java.lang.String value) {
      validate(fields()[1], value);
      this.jobId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'jobId' field has been set.
      * @return True if the 'jobId' field has been set, false otherwise.
      */
    public boolean hasJobId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'jobId' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearJobId() {
      jobId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationTime' field.
      * @return The value.
      */
    public java.lang.Long getCreationTime() {
      return creationTime;
    }

    /**
      * Sets the value of the 'creationTime' field.
      * @param value The value of 'creationTime'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setCreationTime(java.lang.Long value) {
      validate(fields()[2], value);
      this.creationTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTime' field has been set.
      * @return True if the 'creationTime' field has been set, false otherwise.
      */
    public boolean hasCreationTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'creationTime' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearCreationTime() {
      creationTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTripCount' field.
      * @return The value.
      */
    public java.lang.Integer getTotalTripCount() {
      return totalTripCount;
    }

    /**
      * Sets the value of the 'totalTripCount' field.
      * @param value The value of 'totalTripCount'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setTotalTripCount(java.lang.Integer value) {
      validate(fields()[3], value);
      this.totalTripCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTripCount' field has been set.
      * @return True if the 'totalTripCount' field has been set, false otherwise.
      */
    public boolean hasTotalTripCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalTripCount' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearTotalTripCount() {
      totalTripCount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'processingStatus' field.
      * @return The value.
      */
    public java.lang.String getProcessingStatus() {
      return processingStatus;
    }

    /**
      * Sets the value of the 'processingStatus' field.
      * @param value The value of 'processingStatus'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setProcessingStatus(java.lang.String value) {
      validate(fields()[4], value);
      this.processingStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'processingStatus' field has been set.
      * @return True if the 'processingStatus' field has been set, false otherwise.
      */
    public boolean hasProcessingStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'processingStatus' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearProcessingStatus() {
      processingStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'processedTripCount' field.
      * @return The value.
      */
    public java.lang.Integer getProcessedTripCount() {
      return processedTripCount;
    }

    /**
      * Sets the value of the 'processedTripCount' field.
      * @param value The value of 'processedTripCount'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setProcessedTripCount(java.lang.Integer value) {
      validate(fields()[5], value);
      this.processedTripCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'processedTripCount' field has been set.
      * @return True if the 'processedTripCount' field has been set, false otherwise.
      */
    public boolean hasProcessedTripCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'processedTripCount' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearProcessedTripCount() {
      processedTripCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'filePath' field.
      * @return The value.
      */
    public java.lang.String getFilePath() {
      return filePath;
    }

    /**
      * Sets the value of the 'filePath' field.
      * @param value The value of 'filePath'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setFilePath(java.lang.String value) {
      validate(fields()[6], value);
      this.filePath = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'filePath' field has been set.
      * @return True if the 'filePath' field has been set, false otherwise.
      */
    public boolean hasFilePath() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'filePath' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearFilePath() {
      filePath = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'discardedTripsByUser' field.
      * @return The value.
      */
    public java.lang.Integer getDiscardedTripsByUser() {
      return discardedTripsByUser;
    }

    /**
      * Sets the value of the 'discardedTripsByUser' field.
      * @param value The value of 'discardedTripsByUser'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setDiscardedTripsByUser(java.lang.Integer value) {
      validate(fields()[7], value);
      this.discardedTripsByUser = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'discardedTripsByUser' field has been set.
      * @return True if the 'discardedTripsByUser' field has been set, false otherwise.
      */
    public boolean hasDiscardedTripsByUser() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'discardedTripsByUser' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearDiscardedTripsByUser() {
      discardedTripsByUser = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'discardedTripsBySystem' field.
      * @return The value.
      */
    public java.lang.Integer getDiscardedTripsBySystem() {
      return discardedTripsBySystem;
    }

    /**
      * Sets the value of the 'discardedTripsBySystem' field.
      * @param value The value of 'discardedTripsBySystem'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setDiscardedTripsBySystem(java.lang.Integer value) {
      validate(fields()[8], value);
      this.discardedTripsBySystem = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'discardedTripsBySystem' field has been set.
      * @return True if the 'discardedTripsBySystem' field has been set, false otherwise.
      */
    public boolean hasDiscardedTripsBySystem() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'discardedTripsBySystem' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearDiscardedTripsBySystem() {
      discardedTripsBySystem = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'markedCompletedTripsCount' field.
      * @return The value.
      */
    public java.lang.Integer getMarkedCompletedTripsCount() {
      return markedCompletedTripsCount;
    }

    /**
      * Sets the value of the 'markedCompletedTripsCount' field.
      * @param value The value of 'markedCompletedTripsCount'.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder setMarkedCompletedTripsCount(java.lang.Integer value) {
      validate(fields()[9], value);
      this.markedCompletedTripsCount = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'markedCompletedTripsCount' field has been set.
      * @return True if the 'markedCompletedTripsCount' field has been set, false otherwise.
      */
    public boolean hasMarkedCompletedTripsCount() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'markedCompletedTripsCount' field.
      * @return This builder.
      */
    public com.fretron.Model.TripUploadJob.Builder clearMarkedCompletedTripsCount() {
      markedCompletedTripsCount = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public TripUploadJob build() {
      try {
        TripUploadJob record = new TripUploadJob();
        record.orgId = fieldSetFlags()[0] ? this.orgId : (java.lang.String) defaultValue(fields()[0]);
        record.jobId = fieldSetFlags()[1] ? this.jobId : (java.lang.String) defaultValue(fields()[1]);
        record.creationTime = fieldSetFlags()[2] ? this.creationTime : (java.lang.Long) defaultValue(fields()[2]);
        record.totalTripCount = fieldSetFlags()[3] ? this.totalTripCount : (java.lang.Integer) defaultValue(fields()[3]);
        record.processingStatus = fieldSetFlags()[4] ? this.processingStatus : (java.lang.String) defaultValue(fields()[4]);
        record.processedTripCount = fieldSetFlags()[5] ? this.processedTripCount : (java.lang.Integer) defaultValue(fields()[5]);
        record.filePath = fieldSetFlags()[6] ? this.filePath : (java.lang.String) defaultValue(fields()[6]);
        record.discardedTripsByUser = fieldSetFlags()[7] ? this.discardedTripsByUser : (java.lang.Integer) defaultValue(fields()[7]);
        record.discardedTripsBySystem = fieldSetFlags()[8] ? this.discardedTripsBySystem : (java.lang.Integer) defaultValue(fields()[8]);
        record.markedCompletedTripsCount = fieldSetFlags()[9] ? this.markedCompletedTripsCount : (java.lang.Integer) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
