/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class QuantityEstimation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6027254983481155187L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"QuantityEstimation\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"quantityEstimationRule\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"quantityEstimatedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"estimatedQuantityTolerance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"estimatedQuantity\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"StandardMeasurement\",\"fields\":[{\"name\":\"weight\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Measurement\",\"fields\":[{\"name\":\"measurmentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unitOfMeasurment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plannedLoadQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualLoadedQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"netQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"grossQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualDeliveredQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"shortage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"frieghtDeductableQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"claimQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"temperature\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"density\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"moisture\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"volume\",\"type\":[\"null\",\"Measurement\"],\"default\":null},{\"name\":\"packageMeasurement\",\"type\":[\"null\",\"Measurement\"],\"default\":null},{\"name\":\"trucks\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"containers\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String quantityEstimationRule;
  @Deprecated public java.lang.String quantityEstimatedBy;
  @Deprecated public java.lang.Double estimatedQuantityTolerance;
  @Deprecated public com.fretron.Model.StandardMeasurement estimatedQuantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public QuantityEstimation() {}

  /**
   * All-args constructor.
   * @param quantityEstimationRule The new value for quantityEstimationRule
   * @param quantityEstimatedBy The new value for quantityEstimatedBy
   * @param estimatedQuantityTolerance The new value for estimatedQuantityTolerance
   * @param estimatedQuantity The new value for estimatedQuantity
   */
  public QuantityEstimation(java.lang.String quantityEstimationRule, java.lang.String quantityEstimatedBy, java.lang.Double estimatedQuantityTolerance, com.fretron.Model.StandardMeasurement estimatedQuantity) {
    this.quantityEstimationRule = quantityEstimationRule;
    this.quantityEstimatedBy = quantityEstimatedBy;
    this.estimatedQuantityTolerance = estimatedQuantityTolerance;
    this.estimatedQuantity = estimatedQuantity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return quantityEstimationRule;
    case 1: return quantityEstimatedBy;
    case 2: return estimatedQuantityTolerance;
    case 3: return estimatedQuantity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: quantityEstimationRule = (java.lang.String)value$; break;
    case 1: quantityEstimatedBy = (java.lang.String)value$; break;
    case 2: estimatedQuantityTolerance = (java.lang.Double)value$; break;
    case 3: estimatedQuantity = (com.fretron.Model.StandardMeasurement)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'quantityEstimationRule' field.
   * @return The value of the 'quantityEstimationRule' field.
   */
  public java.lang.String getQuantityEstimationRule() {
    return quantityEstimationRule;
  }

  /**
   * Sets the value of the 'quantityEstimationRule' field.
   * @param value the value to set.
   */
  public void setQuantityEstimationRule(java.lang.String value) {
    this.quantityEstimationRule = value;
  }

  /**
   * Gets the value of the 'quantityEstimatedBy' field.
   * @return The value of the 'quantityEstimatedBy' field.
   */
  public java.lang.String getQuantityEstimatedBy() {
    return quantityEstimatedBy;
  }

  /**
   * Sets the value of the 'quantityEstimatedBy' field.
   * @param value the value to set.
   */
  public void setQuantityEstimatedBy(java.lang.String value) {
    this.quantityEstimatedBy = value;
  }

  /**
   * Gets the value of the 'estimatedQuantityTolerance' field.
   * @return The value of the 'estimatedQuantityTolerance' field.
   */
  public java.lang.Double getEstimatedQuantityTolerance() {
    return estimatedQuantityTolerance;
  }

  /**
   * Sets the value of the 'estimatedQuantityTolerance' field.
   * @param value the value to set.
   */
  public void setEstimatedQuantityTolerance(java.lang.Double value) {
    this.estimatedQuantityTolerance = value;
  }

  /**
   * Gets the value of the 'estimatedQuantity' field.
   * @return The value of the 'estimatedQuantity' field.
   */
  public com.fretron.Model.StandardMeasurement getEstimatedQuantity() {
    return estimatedQuantity;
  }

  /**
   * Sets the value of the 'estimatedQuantity' field.
   * @param value the value to set.
   */
  public void setEstimatedQuantity(com.fretron.Model.StandardMeasurement value) {
    this.estimatedQuantity = value;
  }

  /**
   * Creates a new QuantityEstimation RecordBuilder.
   * @return A new QuantityEstimation RecordBuilder
   */
  public static com.fretron.Model.QuantityEstimation.Builder newBuilder() {
    return new com.fretron.Model.QuantityEstimation.Builder();
  }

  /**
   * Creates a new QuantityEstimation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new QuantityEstimation RecordBuilder
   */
  public static com.fretron.Model.QuantityEstimation.Builder newBuilder(com.fretron.Model.QuantityEstimation.Builder other) {
    return new com.fretron.Model.QuantityEstimation.Builder(other);
  }

  /**
   * Creates a new QuantityEstimation RecordBuilder by copying an existing QuantityEstimation instance.
   * @param other The existing instance to copy.
   * @return A new QuantityEstimation RecordBuilder
   */
  public static com.fretron.Model.QuantityEstimation.Builder newBuilder(com.fretron.Model.QuantityEstimation other) {
    return new com.fretron.Model.QuantityEstimation.Builder(other);
  }

  /**
   * RecordBuilder for QuantityEstimation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<QuantityEstimation>
    implements org.apache.avro.data.RecordBuilder<QuantityEstimation> {

    private java.lang.String quantityEstimationRule;
    private java.lang.String quantityEstimatedBy;
    private java.lang.Double estimatedQuantityTolerance;
    private com.fretron.Model.StandardMeasurement estimatedQuantity;
    private com.fretron.Model.StandardMeasurement.Builder estimatedQuantityBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.QuantityEstimation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.quantityEstimationRule)) {
        this.quantityEstimationRule = data().deepCopy(fields()[0].schema(), other.quantityEstimationRule);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantityEstimatedBy)) {
        this.quantityEstimatedBy = data().deepCopy(fields()[1].schema(), other.quantityEstimatedBy);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.estimatedQuantityTolerance)) {
        this.estimatedQuantityTolerance = data().deepCopy(fields()[2].schema(), other.estimatedQuantityTolerance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.estimatedQuantity)) {
        this.estimatedQuantity = data().deepCopy(fields()[3].schema(), other.estimatedQuantity);
        fieldSetFlags()[3] = true;
      }
      if (other.hasEstimatedQuantityBuilder()) {
        this.estimatedQuantityBuilder = com.fretron.Model.StandardMeasurement.newBuilder(other.getEstimatedQuantityBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing QuantityEstimation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.QuantityEstimation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.quantityEstimationRule)) {
        this.quantityEstimationRule = data().deepCopy(fields()[0].schema(), other.quantityEstimationRule);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantityEstimatedBy)) {
        this.quantityEstimatedBy = data().deepCopy(fields()[1].schema(), other.quantityEstimatedBy);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.estimatedQuantityTolerance)) {
        this.estimatedQuantityTolerance = data().deepCopy(fields()[2].schema(), other.estimatedQuantityTolerance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.estimatedQuantity)) {
        this.estimatedQuantity = data().deepCopy(fields()[3].schema(), other.estimatedQuantity);
        fieldSetFlags()[3] = true;
      }
      this.estimatedQuantityBuilder = null;
    }

    /**
      * Gets the value of the 'quantityEstimationRule' field.
      * @return The value.
      */
    public java.lang.String getQuantityEstimationRule() {
      return quantityEstimationRule;
    }

    /**
      * Sets the value of the 'quantityEstimationRule' field.
      * @param value The value of 'quantityEstimationRule'.
      * @return This builder.
      */
    public com.fretron.Model.QuantityEstimation.Builder setQuantityEstimationRule(java.lang.String value) {
      validate(fields()[0], value);
      this.quantityEstimationRule = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityEstimationRule' field has been set.
      * @return True if the 'quantityEstimationRule' field has been set, false otherwise.
      */
    public boolean hasQuantityEstimationRule() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'quantityEstimationRule' field.
      * @return This builder.
      */
    public com.fretron.Model.QuantityEstimation.Builder clearQuantityEstimationRule() {
      quantityEstimationRule = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantityEstimatedBy' field.
      * @return The value.
      */
    public java.lang.String getQuantityEstimatedBy() {
      return quantityEstimatedBy;
    }

    /**
      * Sets the value of the 'quantityEstimatedBy' field.
      * @param value The value of 'quantityEstimatedBy'.
      * @return This builder.
      */
    public com.fretron.Model.QuantityEstimation.Builder setQuantityEstimatedBy(java.lang.String value) {
      validate(fields()[1], value);
      this.quantityEstimatedBy = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityEstimatedBy' field has been set.
      * @return True if the 'quantityEstimatedBy' field has been set, false otherwise.
      */
    public boolean hasQuantityEstimatedBy() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantityEstimatedBy' field.
      * @return This builder.
      */
    public com.fretron.Model.QuantityEstimation.Builder clearQuantityEstimatedBy() {
      quantityEstimatedBy = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedQuantityTolerance' field.
      * @return The value.
      */
    public java.lang.Double getEstimatedQuantityTolerance() {
      return estimatedQuantityTolerance;
    }

    /**
      * Sets the value of the 'estimatedQuantityTolerance' field.
      * @param value The value of 'estimatedQuantityTolerance'.
      * @return This builder.
      */
    public com.fretron.Model.QuantityEstimation.Builder setEstimatedQuantityTolerance(java.lang.Double value) {
      validate(fields()[2], value);
      this.estimatedQuantityTolerance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedQuantityTolerance' field has been set.
      * @return True if the 'estimatedQuantityTolerance' field has been set, false otherwise.
      */
    public boolean hasEstimatedQuantityTolerance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'estimatedQuantityTolerance' field.
      * @return This builder.
      */
    public com.fretron.Model.QuantityEstimation.Builder clearEstimatedQuantityTolerance() {
      estimatedQuantityTolerance = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedQuantity' field.
      * @return The value.
      */
    public com.fretron.Model.StandardMeasurement getEstimatedQuantity() {
      return estimatedQuantity;
    }

    /**
      * Sets the value of the 'estimatedQuantity' field.
      * @param value The value of 'estimatedQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.QuantityEstimation.Builder setEstimatedQuantity(com.fretron.Model.StandardMeasurement value) {
      validate(fields()[3], value);
      this.estimatedQuantityBuilder = null;
      this.estimatedQuantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedQuantity' field has been set.
      * @return True if the 'estimatedQuantity' field has been set, false otherwise.
      */
    public boolean hasEstimatedQuantity() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'estimatedQuantity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder getEstimatedQuantityBuilder() {
      if (estimatedQuantityBuilder == null) {
        if (hasEstimatedQuantity()) {
          setEstimatedQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder(estimatedQuantity));
        } else {
          setEstimatedQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder());
        }
      }
      return estimatedQuantityBuilder;
    }

    /**
     * Sets the Builder instance for the 'estimatedQuantity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.QuantityEstimation.Builder setEstimatedQuantityBuilder(com.fretron.Model.StandardMeasurement.Builder value) {
      clearEstimatedQuantity();
      estimatedQuantityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'estimatedQuantity' field has an active Builder instance
     * @return True if the 'estimatedQuantity' field has an active Builder instance
     */
    public boolean hasEstimatedQuantityBuilder() {
      return estimatedQuantityBuilder != null;
    }

    /**
      * Clears the value of the 'estimatedQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.QuantityEstimation.Builder clearEstimatedQuantity() {
      estimatedQuantity = null;
      estimatedQuantityBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public QuantityEstimation build() {
      try {
        QuantityEstimation record = new QuantityEstimation();
        record.quantityEstimationRule = fieldSetFlags()[0] ? this.quantityEstimationRule : (java.lang.String) defaultValue(fields()[0]);
        record.quantityEstimatedBy = fieldSetFlags()[1] ? this.quantityEstimatedBy : (java.lang.String) defaultValue(fields()[1]);
        record.estimatedQuantityTolerance = fieldSetFlags()[2] ? this.estimatedQuantityTolerance : (java.lang.Double) defaultValue(fields()[2]);
        if (estimatedQuantityBuilder != null) {
          record.estimatedQuantity = this.estimatedQuantityBuilder.build();
        } else {
          record.estimatedQuantity = fieldSetFlags()[3] ? this.estimatedQuantity : (com.fretron.Model.StandardMeasurement) defaultValue(fields()[3]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
