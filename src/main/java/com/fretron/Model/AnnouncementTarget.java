/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AnnouncementTarget extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 851842718970621573L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AnnouncementTarget\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"domains\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"organisations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"modules\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.String> domains;
  @Deprecated public java.util.List<java.lang.String> organisations;
  @Deprecated public java.util.List<java.lang.String> modules;
  @Deprecated public java.util.List<java.lang.String> tags;
  @Deprecated public java.lang.String version;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AnnouncementTarget() {}

  /**
   * All-args constructor.
   * @param domains The new value for domains
   * @param organisations The new value for organisations
   * @param modules The new value for modules
   * @param tags The new value for tags
   * @param version The new value for version
   */
  public AnnouncementTarget(java.util.List<java.lang.String> domains, java.util.List<java.lang.String> organisations, java.util.List<java.lang.String> modules, java.util.List<java.lang.String> tags, java.lang.String version) {
    this.domains = domains;
    this.organisations = organisations;
    this.modules = modules;
    this.tags = tags;
    this.version = version;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return domains;
    case 1: return organisations;
    case 2: return modules;
    case 3: return tags;
    case 4: return version;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: domains = (java.util.List<java.lang.String>)value$; break;
    case 1: organisations = (java.util.List<java.lang.String>)value$; break;
    case 2: modules = (java.util.List<java.lang.String>)value$; break;
    case 3: tags = (java.util.List<java.lang.String>)value$; break;
    case 4: version = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'domains' field.
   * @return The value of the 'domains' field.
   */
  public java.util.List<java.lang.String> getDomains() {
    return domains;
  }

  /**
   * Sets the value of the 'domains' field.
   * @param value the value to set.
   */
  public void setDomains(java.util.List<java.lang.String> value) {
    this.domains = value;
  }

  /**
   * Gets the value of the 'organisations' field.
   * @return The value of the 'organisations' field.
   */
  public java.util.List<java.lang.String> getOrganisations() {
    return organisations;
  }

  /**
   * Sets the value of the 'organisations' field.
   * @param value the value to set.
   */
  public void setOrganisations(java.util.List<java.lang.String> value) {
    this.organisations = value;
  }

  /**
   * Gets the value of the 'modules' field.
   * @return The value of the 'modules' field.
   */
  public java.util.List<java.lang.String> getModules() {
    return modules;
  }

  /**
   * Sets the value of the 'modules' field.
   * @param value the value to set.
   */
  public void setModules(java.util.List<java.lang.String> value) {
    this.modules = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return The value of the 'tags' field.
   */
  public java.util.List<java.lang.String> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.String> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.String value) {
    this.version = value;
  }

  /**
   * Creates a new AnnouncementTarget RecordBuilder.
   * @return A new AnnouncementTarget RecordBuilder
   */
  public static com.fretron.Model.AnnouncementTarget.Builder newBuilder() {
    return new com.fretron.Model.AnnouncementTarget.Builder();
  }

  /**
   * Creates a new AnnouncementTarget RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AnnouncementTarget RecordBuilder
   */
  public static com.fretron.Model.AnnouncementTarget.Builder newBuilder(com.fretron.Model.AnnouncementTarget.Builder other) {
    return new com.fretron.Model.AnnouncementTarget.Builder(other);
  }

  /**
   * Creates a new AnnouncementTarget RecordBuilder by copying an existing AnnouncementTarget instance.
   * @param other The existing instance to copy.
   * @return A new AnnouncementTarget RecordBuilder
   */
  public static com.fretron.Model.AnnouncementTarget.Builder newBuilder(com.fretron.Model.AnnouncementTarget other) {
    return new com.fretron.Model.AnnouncementTarget.Builder(other);
  }

  /**
   * RecordBuilder for AnnouncementTarget instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AnnouncementTarget>
    implements org.apache.avro.data.RecordBuilder<AnnouncementTarget> {

    private java.util.List<java.lang.String> domains;
    private java.util.List<java.lang.String> organisations;
    private java.util.List<java.lang.String> modules;
    private java.util.List<java.lang.String> tags;
    private java.lang.String version;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.AnnouncementTarget.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.domains)) {
        this.domains = data().deepCopy(fields()[0].schema(), other.domains);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.organisations)) {
        this.organisations = data().deepCopy(fields()[1].schema(), other.organisations);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.modules)) {
        this.modules = data().deepCopy(fields()[2].schema(), other.modules);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tags)) {
        this.tags = data().deepCopy(fields()[3].schema(), other.tags);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.version)) {
        this.version = data().deepCopy(fields()[4].schema(), other.version);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AnnouncementTarget instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.AnnouncementTarget other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.domains)) {
        this.domains = data().deepCopy(fields()[0].schema(), other.domains);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.organisations)) {
        this.organisations = data().deepCopy(fields()[1].schema(), other.organisations);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.modules)) {
        this.modules = data().deepCopy(fields()[2].schema(), other.modules);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tags)) {
        this.tags = data().deepCopy(fields()[3].schema(), other.tags);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.version)) {
        this.version = data().deepCopy(fields()[4].schema(), other.version);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'domains' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getDomains() {
      return domains;
    }

    /**
      * Sets the value of the 'domains' field.
      * @param value The value of 'domains'.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder setDomains(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.domains = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'domains' field has been set.
      * @return True if the 'domains' field has been set, false otherwise.
      */
    public boolean hasDomains() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'domains' field.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder clearDomains() {
      domains = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'organisations' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getOrganisations() {
      return organisations;
    }

    /**
      * Sets the value of the 'organisations' field.
      * @param value The value of 'organisations'.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder setOrganisations(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.organisations = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'organisations' field has been set.
      * @return True if the 'organisations' field has been set, false otherwise.
      */
    public boolean hasOrganisations() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'organisations' field.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder clearOrganisations() {
      organisations = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'modules' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getModules() {
      return modules;
    }

    /**
      * Sets the value of the 'modules' field.
      * @param value The value of 'modules'.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder setModules(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.modules = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'modules' field has been set.
      * @return True if the 'modules' field has been set, false otherwise.
      */
    public boolean hasModules() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'modules' field.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder clearModules() {
      modules = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getTags() {
      return tags;
    }

    /**
      * Sets the value of the 'tags' field.
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder setTags(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.tags = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tags' field.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder clearTags() {
      tags = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.String getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder setVersion(java.lang.String value) {
      validate(fields()[4], value);
      this.version = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public com.fretron.Model.AnnouncementTarget.Builder clearVersion() {
      version = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public AnnouncementTarget build() {
      try {
        AnnouncementTarget record = new AnnouncementTarget();
        record.domains = fieldSetFlags()[0] ? this.domains : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.organisations = fieldSetFlags()[1] ? this.organisations : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.modules = fieldSetFlags()[2] ? this.modules : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.tags = fieldSetFlags()[3] ? this.tags : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        record.version = fieldSetFlags()[4] ? this.version : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
