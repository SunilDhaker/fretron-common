/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Hub extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5174106799969934638L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Hub\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"catagory\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"externalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"geometry\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geometry\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"coordinates\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}],\"default\":null}]}],\"default\":null},{\"name\":\"addedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"accessibility\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"places\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Place\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"category\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"center\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"suggestedRadius\",\"type\":\"double\",\"default\":null},{\"name\":\"viewport\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ViewPort\",\"fields\":[{\"name\":\"northeast\",\"type\":[\"null\",\"Location\"],\"default\":null},{\"name\":\"southwest\",\"type\":[\"null\",\"Location\"],\"default\":null}]}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"boundary\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String type;
  @Deprecated public java.lang.String catagory;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String address;
  @Deprecated public java.lang.String externalId;
  @Deprecated public com.fretron.Model.Geometry geometry;
  @Deprecated public java.lang.String addedBy;
  @Deprecated public java.lang.String source;
  @Deprecated public java.lang.String accessibility;
  @Deprecated public java.util.List<com.fretron.Model.Place> places;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Hub() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param type The new value for type
   * @param catagory The new value for catagory
   * @param name The new value for name
   * @param address The new value for address
   * @param externalId The new value for externalId
   * @param geometry The new value for geometry
   * @param addedBy The new value for addedBy
   * @param source The new value for source
   * @param accessibility The new value for accessibility
   * @param places The new value for places
   */
  public Hub(java.lang.String uuid, java.lang.String type, java.lang.String catagory, java.lang.String name, java.lang.String address, java.lang.String externalId, com.fretron.Model.Geometry geometry, java.lang.String addedBy, java.lang.String source, java.lang.String accessibility, java.util.List<com.fretron.Model.Place> places) {
    this.uuid = uuid;
    this.type = type;
    this.catagory = catagory;
    this.name = name;
    this.address = address;
    this.externalId = externalId;
    this.geometry = geometry;
    this.addedBy = addedBy;
    this.source = source;
    this.accessibility = accessibility;
    this.places = places;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return type;
    case 2: return catagory;
    case 3: return name;
    case 4: return address;
    case 5: return externalId;
    case 6: return geometry;
    case 7: return addedBy;
    case 8: return source;
    case 9: return accessibility;
    case 10: return places;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: type = (java.lang.String)value$; break;
    case 2: catagory = (java.lang.String)value$; break;
    case 3: name = (java.lang.String)value$; break;
    case 4: address = (java.lang.String)value$; break;
    case 5: externalId = (java.lang.String)value$; break;
    case 6: geometry = (com.fretron.Model.Geometry)value$; break;
    case 7: addedBy = (java.lang.String)value$; break;
    case 8: source = (java.lang.String)value$; break;
    case 9: accessibility = (java.lang.String)value$; break;
    case 10: places = (java.util.List<com.fretron.Model.Place>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'catagory' field.
   * @return The value of the 'catagory' field.
   */
  public java.lang.String getCatagory() {
    return catagory;
  }

  /**
   * Sets the value of the 'catagory' field.
   * @param value the value to set.
   */
  public void setCatagory(java.lang.String value) {
    this.catagory = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'externalId' field.
   * @return The value of the 'externalId' field.
   */
  public java.lang.String getExternalId() {
    return externalId;
  }

  /**
   * Sets the value of the 'externalId' field.
   * @param value the value to set.
   */
  public void setExternalId(java.lang.String value) {
    this.externalId = value;
  }

  /**
   * Gets the value of the 'geometry' field.
   * @return The value of the 'geometry' field.
   */
  public com.fretron.Model.Geometry getGeometry() {
    return geometry;
  }

  /**
   * Sets the value of the 'geometry' field.
   * @param value the value to set.
   */
  public void setGeometry(com.fretron.Model.Geometry value) {
    this.geometry = value;
  }

  /**
   * Gets the value of the 'addedBy' field.
   * @return The value of the 'addedBy' field.
   */
  public java.lang.String getAddedBy() {
    return addedBy;
  }

  /**
   * Sets the value of the 'addedBy' field.
   * @param value the value to set.
   */
  public void setAddedBy(java.lang.String value) {
    this.addedBy = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'accessibility' field.
   * @return The value of the 'accessibility' field.
   */
  public java.lang.String getAccessibility() {
    return accessibility;
  }

  /**
   * Sets the value of the 'accessibility' field.
   * @param value the value to set.
   */
  public void setAccessibility(java.lang.String value) {
    this.accessibility = value;
  }

  /**
   * Gets the value of the 'places' field.
   * @return The value of the 'places' field.
   */
  public java.util.List<com.fretron.Model.Place> getPlaces() {
    return places;
  }

  /**
   * Sets the value of the 'places' field.
   * @param value the value to set.
   */
  public void setPlaces(java.util.List<com.fretron.Model.Place> value) {
    this.places = value;
  }

  /**
   * Creates a new Hub RecordBuilder.
   * @return A new Hub RecordBuilder
   */
  public static com.fretron.Model.Hub.Builder newBuilder() {
    return new com.fretron.Model.Hub.Builder();
  }

  /**
   * Creates a new Hub RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Hub RecordBuilder
   */
  public static com.fretron.Model.Hub.Builder newBuilder(com.fretron.Model.Hub.Builder other) {
    return new com.fretron.Model.Hub.Builder(other);
  }

  /**
   * Creates a new Hub RecordBuilder by copying an existing Hub instance.
   * @param other The existing instance to copy.
   * @return A new Hub RecordBuilder
   */
  public static com.fretron.Model.Hub.Builder newBuilder(com.fretron.Model.Hub other) {
    return new com.fretron.Model.Hub.Builder(other);
  }

  /**
   * RecordBuilder for Hub instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Hub>
    implements org.apache.avro.data.RecordBuilder<Hub> {

    private java.lang.String uuid;
    private java.lang.String type;
    private java.lang.String catagory;
    private java.lang.String name;
    private java.lang.String address;
    private java.lang.String externalId;
    private com.fretron.Model.Geometry geometry;
    private com.fretron.Model.Geometry.Builder geometryBuilder;
    private java.lang.String addedBy;
    private java.lang.String source;
    private java.lang.String accessibility;
    private java.util.List<com.fretron.Model.Place> places;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Hub.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.catagory)) {
        this.catagory = data().deepCopy(fields()[2].schema(), other.catagory);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.externalId)) {
        this.externalId = data().deepCopy(fields()[5].schema(), other.externalId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.geometry)) {
        this.geometry = data().deepCopy(fields()[6].schema(), other.geometry);
        fieldSetFlags()[6] = true;
      }
      if (other.hasGeometryBuilder()) {
        this.geometryBuilder = com.fretron.Model.Geometry.newBuilder(other.getGeometryBuilder());
      }
      if (isValidValue(fields()[7], other.addedBy)) {
        this.addedBy = data().deepCopy(fields()[7].schema(), other.addedBy);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.source)) {
        this.source = data().deepCopy(fields()[8].schema(), other.source);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.accessibility)) {
        this.accessibility = data().deepCopy(fields()[9].schema(), other.accessibility);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.places)) {
        this.places = data().deepCopy(fields()[10].schema(), other.places);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Hub instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Hub other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.catagory)) {
        this.catagory = data().deepCopy(fields()[2].schema(), other.catagory);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.externalId)) {
        this.externalId = data().deepCopy(fields()[5].schema(), other.externalId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.geometry)) {
        this.geometry = data().deepCopy(fields()[6].schema(), other.geometry);
        fieldSetFlags()[6] = true;
      }
      this.geometryBuilder = null;
      if (isValidValue(fields()[7], other.addedBy)) {
        this.addedBy = data().deepCopy(fields()[7].schema(), other.addedBy);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.source)) {
        this.source = data().deepCopy(fields()[8].schema(), other.source);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.accessibility)) {
        this.accessibility = data().deepCopy(fields()[9].schema(), other.accessibility);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.places)) {
        this.places = data().deepCopy(fields()[10].schema(), other.places);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setType(java.lang.String value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'catagory' field.
      * @return The value.
      */
    public java.lang.String getCatagory() {
      return catagory;
    }

    /**
      * Sets the value of the 'catagory' field.
      * @param value The value of 'catagory'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setCatagory(java.lang.String value) {
      validate(fields()[2], value);
      this.catagory = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'catagory' field has been set.
      * @return True if the 'catagory' field has been set, false otherwise.
      */
    public boolean hasCatagory() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'catagory' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearCatagory() {
      catagory = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setName(java.lang.String value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setAddress(java.lang.String value) {
      validate(fields()[4], value);
      this.address = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearAddress() {
      address = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalId' field.
      * @return The value.
      */
    public java.lang.String getExternalId() {
      return externalId;
    }

    /**
      * Sets the value of the 'externalId' field.
      * @param value The value of 'externalId'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setExternalId(java.lang.String value) {
      validate(fields()[5], value);
      this.externalId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'externalId' field has been set.
      * @return True if the 'externalId' field has been set, false otherwise.
      */
    public boolean hasExternalId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'externalId' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearExternalId() {
      externalId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'geometry' field.
      * @return The value.
      */
    public com.fretron.Model.Geometry getGeometry() {
      return geometry;
    }

    /**
      * Sets the value of the 'geometry' field.
      * @param value The value of 'geometry'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setGeometry(com.fretron.Model.Geometry value) {
      validate(fields()[6], value);
      this.geometryBuilder = null;
      this.geometry = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'geometry' field has been set.
      * @return True if the 'geometry' field has been set, false otherwise.
      */
    public boolean hasGeometry() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'geometry' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Geometry.Builder getGeometryBuilder() {
      if (geometryBuilder == null) {
        if (hasGeometry()) {
          setGeometryBuilder(com.fretron.Model.Geometry.newBuilder(geometry));
        } else {
          setGeometryBuilder(com.fretron.Model.Geometry.newBuilder());
        }
      }
      return geometryBuilder;
    }

    /**
     * Sets the Builder instance for the 'geometry' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Hub.Builder setGeometryBuilder(com.fretron.Model.Geometry.Builder value) {
      clearGeometry();
      geometryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'geometry' field has an active Builder instance
     * @return True if the 'geometry' field has an active Builder instance
     */
    public boolean hasGeometryBuilder() {
      return geometryBuilder != null;
    }

    /**
      * Clears the value of the 'geometry' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearGeometry() {
      geometry = null;
      geometryBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'addedBy' field.
      * @return The value.
      */
    public java.lang.String getAddedBy() {
      return addedBy;
    }

    /**
      * Sets the value of the 'addedBy' field.
      * @param value The value of 'addedBy'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setAddedBy(java.lang.String value) {
      validate(fields()[7], value);
      this.addedBy = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'addedBy' field has been set.
      * @return True if the 'addedBy' field has been set, false otherwise.
      */
    public boolean hasAddedBy() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'addedBy' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearAddedBy() {
      addedBy = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setSource(java.lang.String value) {
      validate(fields()[8], value);
      this.source = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearSource() {
      source = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'accessibility' field.
      * @return The value.
      */
    public java.lang.String getAccessibility() {
      return accessibility;
    }

    /**
      * Sets the value of the 'accessibility' field.
      * @param value The value of 'accessibility'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setAccessibility(java.lang.String value) {
      validate(fields()[9], value);
      this.accessibility = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'accessibility' field has been set.
      * @return True if the 'accessibility' field has been set, false otherwise.
      */
    public boolean hasAccessibility() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'accessibility' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearAccessibility() {
      accessibility = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'places' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.Place> getPlaces() {
      return places;
    }

    /**
      * Sets the value of the 'places' field.
      * @param value The value of 'places'.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder setPlaces(java.util.List<com.fretron.Model.Place> value) {
      validate(fields()[10], value);
      this.places = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'places' field has been set.
      * @return True if the 'places' field has been set, false otherwise.
      */
    public boolean hasPlaces() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'places' field.
      * @return This builder.
      */
    public com.fretron.Model.Hub.Builder clearPlaces() {
      places = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public Hub build() {
      try {
        Hub record = new Hub();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.String) defaultValue(fields()[1]);
        record.catagory = fieldSetFlags()[2] ? this.catagory : (java.lang.String) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.String) defaultValue(fields()[3]);
        record.address = fieldSetFlags()[4] ? this.address : (java.lang.String) defaultValue(fields()[4]);
        record.externalId = fieldSetFlags()[5] ? this.externalId : (java.lang.String) defaultValue(fields()[5]);
        if (geometryBuilder != null) {
          record.geometry = this.geometryBuilder.build();
        } else {
          record.geometry = fieldSetFlags()[6] ? this.geometry : (com.fretron.Model.Geometry) defaultValue(fields()[6]);
        }
        record.addedBy = fieldSetFlags()[7] ? this.addedBy : (java.lang.String) defaultValue(fields()[7]);
        record.source = fieldSetFlags()[8] ? this.source : (java.lang.String) defaultValue(fields()[8]);
        record.accessibility = fieldSetFlags()[9] ? this.accessibility : (java.lang.String) defaultValue(fields()[9]);
        record.places = fieldSetFlags()[10] ? this.places : (java.util.List<com.fretron.Model.Place>) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
