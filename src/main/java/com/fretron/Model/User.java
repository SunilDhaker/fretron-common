/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1830800775258910973L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"mobileNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"authToken\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Token\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"provider\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"token\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null},{\"name\":\"tokens\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"onBoardingType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"otpEnabled\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"isGod\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"profileDocumentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"profileThumbnailString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String email;
  @Deprecated public java.lang.String mobileNumber;
  @Deprecated public java.lang.String address;
  @Deprecated public java.util.List<com.fretron.Model.Token> authToken;
  @Deprecated public java.util.List<java.lang.String> tokens;
  @Deprecated public java.lang.String onBoardingType;
  @Deprecated public java.lang.Boolean otpEnabled;
  @Deprecated public java.lang.Boolean isGod;
  @Deprecated public java.lang.String profileDocumentId;
  @Deprecated public java.lang.String profileThumbnailString;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param name The new value for name
   * @param email The new value for email
   * @param mobileNumber The new value for mobileNumber
   * @param address The new value for address
   * @param authToken The new value for authToken
   * @param tokens The new value for tokens
   * @param onBoardingType The new value for onBoardingType
   * @param otpEnabled The new value for otpEnabled
   * @param isGod The new value for isGod
   * @param profileDocumentId The new value for profileDocumentId
   * @param profileThumbnailString The new value for profileThumbnailString
   */
  public User(java.lang.String uuid, java.lang.String name, java.lang.String email, java.lang.String mobileNumber, java.lang.String address, java.util.List<com.fretron.Model.Token> authToken, java.util.List<java.lang.String> tokens, java.lang.String onBoardingType, java.lang.Boolean otpEnabled, java.lang.Boolean isGod, java.lang.String profileDocumentId, java.lang.String profileThumbnailString) {
    this.uuid = uuid;
    this.name = name;
    this.email = email;
    this.mobileNumber = mobileNumber;
    this.address = address;
    this.authToken = authToken;
    this.tokens = tokens;
    this.onBoardingType = onBoardingType;
    this.otpEnabled = otpEnabled;
    this.isGod = isGod;
    this.profileDocumentId = profileDocumentId;
    this.profileThumbnailString = profileThumbnailString;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return name;
    case 2: return email;
    case 3: return mobileNumber;
    case 4: return address;
    case 5: return authToken;
    case 6: return tokens;
    case 7: return onBoardingType;
    case 8: return otpEnabled;
    case 9: return isGod;
    case 10: return profileDocumentId;
    case 11: return profileThumbnailString;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: email = (java.lang.String)value$; break;
    case 3: mobileNumber = (java.lang.String)value$; break;
    case 4: address = (java.lang.String)value$; break;
    case 5: authToken = (java.util.List<com.fretron.Model.Token>)value$; break;
    case 6: tokens = (java.util.List<java.lang.String>)value$; break;
    case 7: onBoardingType = (java.lang.String)value$; break;
    case 8: otpEnabled = (java.lang.Boolean)value$; break;
    case 9: isGod = (java.lang.Boolean)value$; break;
    case 10: profileDocumentId = (java.lang.String)value$; break;
    case 11: profileThumbnailString = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'mobileNumber' field.
   * @return The value of the 'mobileNumber' field.
   */
  public java.lang.String getMobileNumber() {
    return mobileNumber;
  }

  /**
   * Sets the value of the 'mobileNumber' field.
   * @param value the value to set.
   */
  public void setMobileNumber(java.lang.String value) {
    this.mobileNumber = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'authToken' field.
   * @return The value of the 'authToken' field.
   */
  public java.util.List<com.fretron.Model.Token> getAuthToken() {
    return authToken;
  }

  /**
   * Sets the value of the 'authToken' field.
   * @param value the value to set.
   */
  public void setAuthToken(java.util.List<com.fretron.Model.Token> value) {
    this.authToken = value;
  }

  /**
   * Gets the value of the 'tokens' field.
   * @return The value of the 'tokens' field.
   */
  public java.util.List<java.lang.String> getTokens() {
    return tokens;
  }

  /**
   * Sets the value of the 'tokens' field.
   * @param value the value to set.
   */
  public void setTokens(java.util.List<java.lang.String> value) {
    this.tokens = value;
  }

  /**
   * Gets the value of the 'onBoardingType' field.
   * @return The value of the 'onBoardingType' field.
   */
  public java.lang.String getOnBoardingType() {
    return onBoardingType;
  }

  /**
   * Sets the value of the 'onBoardingType' field.
   * @param value the value to set.
   */
  public void setOnBoardingType(java.lang.String value) {
    this.onBoardingType = value;
  }

  /**
   * Gets the value of the 'otpEnabled' field.
   * @return The value of the 'otpEnabled' field.
   */
  public java.lang.Boolean getOtpEnabled() {
    return otpEnabled;
  }

  /**
   * Sets the value of the 'otpEnabled' field.
   * @param value the value to set.
   */
  public void setOtpEnabled(java.lang.Boolean value) {
    this.otpEnabled = value;
  }

  /**
   * Gets the value of the 'isGod' field.
   * @return The value of the 'isGod' field.
   */
  public java.lang.Boolean getIsGod() {
    return isGod;
  }

  /**
   * Sets the value of the 'isGod' field.
   * @param value the value to set.
   */
  public void setIsGod(java.lang.Boolean value) {
    this.isGod = value;
  }

  /**
   * Gets the value of the 'profileDocumentId' field.
   * @return The value of the 'profileDocumentId' field.
   */
  public java.lang.String getProfileDocumentId() {
    return profileDocumentId;
  }

  /**
   * Sets the value of the 'profileDocumentId' field.
   * @param value the value to set.
   */
  public void setProfileDocumentId(java.lang.String value) {
    this.profileDocumentId = value;
  }

  /**
   * Gets the value of the 'profileThumbnailString' field.
   * @return The value of the 'profileThumbnailString' field.
   */
  public java.lang.String getProfileThumbnailString() {
    return profileThumbnailString;
  }

  /**
   * Sets the value of the 'profileThumbnailString' field.
   * @param value the value to set.
   */
  public void setProfileThumbnailString(java.lang.String value) {
    this.profileThumbnailString = value;
  }

  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static com.fretron.Model.User.Builder newBuilder() {
    return new com.fretron.Model.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static com.fretron.Model.User.Builder newBuilder(com.fretron.Model.User.Builder other) {
    return new com.fretron.Model.User.Builder(other);
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static com.fretron.Model.User.Builder newBuilder(com.fretron.Model.User other) {
    return new com.fretron.Model.User.Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private java.lang.String uuid;
    private java.lang.String name;
    private java.lang.String email;
    private java.lang.String mobileNumber;
    private java.lang.String address;
    private java.util.List<com.fretron.Model.Token> authToken;
    private java.util.List<java.lang.String> tokens;
    private java.lang.String onBoardingType;
    private java.lang.Boolean otpEnabled;
    private java.lang.Boolean isGod;
    private java.lang.String profileDocumentId;
    private java.lang.String profileThumbnailString;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[3].schema(), other.mobileNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.authToken)) {
        this.authToken = data().deepCopy(fields()[5].schema(), other.authToken);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tokens)) {
        this.tokens = data().deepCopy(fields()[6].schema(), other.tokens);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.onBoardingType)) {
        this.onBoardingType = data().deepCopy(fields()[7].schema(), other.onBoardingType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.otpEnabled)) {
        this.otpEnabled = data().deepCopy(fields()[8].schema(), other.otpEnabled);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isGod)) {
        this.isGod = data().deepCopy(fields()[9].schema(), other.isGod);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.profileDocumentId)) {
        this.profileDocumentId = data().deepCopy(fields()[10].schema(), other.profileDocumentId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.profileThumbnailString)) {
        this.profileThumbnailString = data().deepCopy(fields()[11].schema(), other.profileThumbnailString);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.User other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[3].schema(), other.mobileNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.authToken)) {
        this.authToken = data().deepCopy(fields()[5].schema(), other.authToken);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tokens)) {
        this.tokens = data().deepCopy(fields()[6].schema(), other.tokens);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.onBoardingType)) {
        this.onBoardingType = data().deepCopy(fields()[7].schema(), other.onBoardingType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.otpEnabled)) {
        this.otpEnabled = data().deepCopy(fields()[8].schema(), other.otpEnabled);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isGod)) {
        this.isGod = data().deepCopy(fields()[9].schema(), other.isGod);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.profileDocumentId)) {
        this.profileDocumentId = data().deepCopy(fields()[10].schema(), other.profileDocumentId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.profileThumbnailString)) {
        this.profileThumbnailString = data().deepCopy(fields()[11].schema(), other.profileThumbnailString);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setEmail(java.lang.String value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileNumber' field.
      * @return The value.
      */
    public java.lang.String getMobileNumber() {
      return mobileNumber;
    }

    /**
      * Sets the value of the 'mobileNumber' field.
      * @param value The value of 'mobileNumber'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setMobileNumber(java.lang.String value) {
      validate(fields()[3], value);
      this.mobileNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileNumber' field has been set.
      * @return True if the 'mobileNumber' field has been set, false otherwise.
      */
    public boolean hasMobileNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mobileNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearMobileNumber() {
      mobileNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setAddress(java.lang.String value) {
      validate(fields()[4], value);
      this.address = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearAddress() {
      address = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'authToken' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.Token> getAuthToken() {
      return authToken;
    }

    /**
      * Sets the value of the 'authToken' field.
      * @param value The value of 'authToken'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setAuthToken(java.util.List<com.fretron.Model.Token> value) {
      validate(fields()[5], value);
      this.authToken = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'authToken' field has been set.
      * @return True if the 'authToken' field has been set, false otherwise.
      */
    public boolean hasAuthToken() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'authToken' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearAuthToken() {
      authToken = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokens' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getTokens() {
      return tokens;
    }

    /**
      * Sets the value of the 'tokens' field.
      * @param value The value of 'tokens'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setTokens(java.util.List<java.lang.String> value) {
      validate(fields()[6], value);
      this.tokens = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tokens' field has been set.
      * @return True if the 'tokens' field has been set, false otherwise.
      */
    public boolean hasTokens() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tokens' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearTokens() {
      tokens = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'onBoardingType' field.
      * @return The value.
      */
    public java.lang.String getOnBoardingType() {
      return onBoardingType;
    }

    /**
      * Sets the value of the 'onBoardingType' field.
      * @param value The value of 'onBoardingType'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setOnBoardingType(java.lang.String value) {
      validate(fields()[7], value);
      this.onBoardingType = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'onBoardingType' field has been set.
      * @return True if the 'onBoardingType' field has been set, false otherwise.
      */
    public boolean hasOnBoardingType() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'onBoardingType' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearOnBoardingType() {
      onBoardingType = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'otpEnabled' field.
      * @return The value.
      */
    public java.lang.Boolean getOtpEnabled() {
      return otpEnabled;
    }

    /**
      * Sets the value of the 'otpEnabled' field.
      * @param value The value of 'otpEnabled'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setOtpEnabled(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.otpEnabled = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'otpEnabled' field has been set.
      * @return True if the 'otpEnabled' field has been set, false otherwise.
      */
    public boolean hasOtpEnabled() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'otpEnabled' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearOtpEnabled() {
      otpEnabled = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'isGod' field.
      * @return The value.
      */
    public java.lang.Boolean getIsGod() {
      return isGod;
    }

    /**
      * Sets the value of the 'isGod' field.
      * @param value The value of 'isGod'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setIsGod(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.isGod = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'isGod' field has been set.
      * @return True if the 'isGod' field has been set, false otherwise.
      */
    public boolean hasIsGod() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'isGod' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearIsGod() {
      isGod = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'profileDocumentId' field.
      * @return The value.
      */
    public java.lang.String getProfileDocumentId() {
      return profileDocumentId;
    }

    /**
      * Sets the value of the 'profileDocumentId' field.
      * @param value The value of 'profileDocumentId'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setProfileDocumentId(java.lang.String value) {
      validate(fields()[10], value);
      this.profileDocumentId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'profileDocumentId' field has been set.
      * @return True if the 'profileDocumentId' field has been set, false otherwise.
      */
    public boolean hasProfileDocumentId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'profileDocumentId' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearProfileDocumentId() {
      profileDocumentId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'profileThumbnailString' field.
      * @return The value.
      */
    public java.lang.String getProfileThumbnailString() {
      return profileThumbnailString;
    }

    /**
      * Sets the value of the 'profileThumbnailString' field.
      * @param value The value of 'profileThumbnailString'.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder setProfileThumbnailString(java.lang.String value) {
      validate(fields()[11], value);
      this.profileThumbnailString = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'profileThumbnailString' field has been set.
      * @return True if the 'profileThumbnailString' field has been set, false otherwise.
      */
    public boolean hasProfileThumbnailString() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'profileThumbnailString' field.
      * @return This builder.
      */
    public com.fretron.Model.User.Builder clearProfileThumbnailString() {
      profileThumbnailString = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.String) defaultValue(fields()[2]);
        record.mobileNumber = fieldSetFlags()[3] ? this.mobileNumber : (java.lang.String) defaultValue(fields()[3]);
        record.address = fieldSetFlags()[4] ? this.address : (java.lang.String) defaultValue(fields()[4]);
        record.authToken = fieldSetFlags()[5] ? this.authToken : (java.util.List<com.fretron.Model.Token>) defaultValue(fields()[5]);
        record.tokens = fieldSetFlags()[6] ? this.tokens : (java.util.List<java.lang.String>) defaultValue(fields()[6]);
        record.onBoardingType = fieldSetFlags()[7] ? this.onBoardingType : (java.lang.String) defaultValue(fields()[7]);
        record.otpEnabled = fieldSetFlags()[8] ? this.otpEnabled : (java.lang.Boolean) defaultValue(fields()[8]);
        record.isGod = fieldSetFlags()[9] ? this.isGod : (java.lang.Boolean) defaultValue(fields()[9]);
        record.profileDocumentId = fieldSetFlags()[10] ? this.profileDocumentId : (java.lang.String) defaultValue(fields()[10]);
        record.profileThumbnailString = fieldSetFlags()[11] ? this.profileThumbnailString : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
