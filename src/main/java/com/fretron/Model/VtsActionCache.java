/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VtsActionCache extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1058907813480914478L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VtsActionCache\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"key\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cache\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Actions\",\"fields\":[{\"name\":\"oldState\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"VehicleTripState\",\"fields\":[{\"name\":\"deviceImei\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"VehicleState\",\"symbols\":[\"WaitingForLoad\",\"EnrouteForPickUp\",\"AtPickUpPoint\",\"EnrouteForDestination\",\"AtDestination\"]}],\"default\":null},{\"name\":\"tripId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"startTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"endTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"newState\",\"type\":[\"null\",\"VehicleTripState\"],\"default\":null},{\"name\":\"eventStartTime\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"causedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String key;
  @Deprecated public java.util.List<com.fretron.Model.Actions> cache;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VtsActionCache() {}

  /**
   * All-args constructor.
   * @param key The new value for key
   * @param cache The new value for cache
   */
  public VtsActionCache(java.lang.String key, java.util.List<com.fretron.Model.Actions> cache) {
    this.key = key;
    this.cache = cache;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return cache;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.String)value$; break;
    case 1: cache = (java.util.List<com.fretron.Model.Actions>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'cache' field.
   * @return The value of the 'cache' field.
   */
  public java.util.List<com.fretron.Model.Actions> getCache() {
    return cache;
  }

  /**
   * Sets the value of the 'cache' field.
   * @param value the value to set.
   */
  public void setCache(java.util.List<com.fretron.Model.Actions> value) {
    this.cache = value;
  }

  /**
   * Creates a new VtsActionCache RecordBuilder.
   * @return A new VtsActionCache RecordBuilder
   */
  public static com.fretron.Model.VtsActionCache.Builder newBuilder() {
    return new com.fretron.Model.VtsActionCache.Builder();
  }

  /**
   * Creates a new VtsActionCache RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VtsActionCache RecordBuilder
   */
  public static com.fretron.Model.VtsActionCache.Builder newBuilder(com.fretron.Model.VtsActionCache.Builder other) {
    return new com.fretron.Model.VtsActionCache.Builder(other);
  }

  /**
   * Creates a new VtsActionCache RecordBuilder by copying an existing VtsActionCache instance.
   * @param other The existing instance to copy.
   * @return A new VtsActionCache RecordBuilder
   */
  public static com.fretron.Model.VtsActionCache.Builder newBuilder(com.fretron.Model.VtsActionCache other) {
    return new com.fretron.Model.VtsActionCache.Builder(other);
  }

  /**
   * RecordBuilder for VtsActionCache instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VtsActionCache>
    implements org.apache.avro.data.RecordBuilder<VtsActionCache> {

    private java.lang.String key;
    private java.util.List<com.fretron.Model.Actions> cache;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.VtsActionCache.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cache)) {
        this.cache = data().deepCopy(fields()[1].schema(), other.cache);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VtsActionCache instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.VtsActionCache other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cache)) {
        this.cache = data().deepCopy(fields()[1].schema(), other.cache);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.fretron.Model.VtsActionCache.Builder setKey(java.lang.String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public com.fretron.Model.VtsActionCache.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cache' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.Actions> getCache() {
      return cache;
    }

    /**
      * Sets the value of the 'cache' field.
      * @param value The value of 'cache'.
      * @return This builder.
      */
    public com.fretron.Model.VtsActionCache.Builder setCache(java.util.List<com.fretron.Model.Actions> value) {
      validate(fields()[1], value);
      this.cache = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cache' field has been set.
      * @return True if the 'cache' field has been set, false otherwise.
      */
    public boolean hasCache() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cache' field.
      * @return This builder.
      */
    public com.fretron.Model.VtsActionCache.Builder clearCache() {
      cache = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public VtsActionCache build() {
      try {
        VtsActionCache record = new VtsActionCache();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.String) defaultValue(fields()[0]);
        record.cache = fieldSetFlags()[1] ? this.cache : (java.util.List<com.fretron.Model.Actions>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
