/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LiteVehicleGpsState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6550933023380566731L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LiteVehicleGpsState\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"startTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"endTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"startLocation\",\"type\":{\"type\":\"record\",\"name\":\"LitePosition\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"isFillingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"odometer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Odometer\",\"fields\":[{\"name\":\"softwareMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastUpdateTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isSoftwareMeterManuallyCalibrated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"lastCalibrationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"hardwareReading\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"hardwareDistance\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}},{\"name\":\"endLocation\",\"type\":\"LitePosition\"},{\"name\":\"mean\",\"type\":[\"null\",\"LitePosition\"],\"default\":null},{\"name\":\"totalDistance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"totalTime\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"averageSpeeds\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"numberOfRecord\",\"type\":\"int\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GPSState\",\"symbols\":[\"Stopped\",\"Moving\",\"Overspeeding\",\"Disconnected\",\"Unknown\"]}]},{\"name\":\"isDisconnected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"eventType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long startTime;
  @Deprecated public long endTime;
  @Deprecated public com.fretron.Model.LitePosition startLocation;
  @Deprecated public com.fretron.Model.LitePosition endLocation;
  @Deprecated public com.fretron.Model.LitePosition mean;
  @Deprecated public java.lang.Double totalDistance;
  @Deprecated public java.lang.Long totalTime;
  @Deprecated public java.lang.Double averageSpeeds;
  @Deprecated public int numberOfRecord;
  @Deprecated public java.lang.String imei;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.lang.String uuid;
  @Deprecated public com.fretron.Model.GPSState state;
  @Deprecated public boolean isDisconnected;
  @Deprecated public java.lang.String eventType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LiteVehicleGpsState() {}

  /**
   * All-args constructor.
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   * @param startLocation The new value for startLocation
   * @param endLocation The new value for endLocation
   * @param mean The new value for mean
   * @param totalDistance The new value for totalDistance
   * @param totalTime The new value for totalTime
   * @param averageSpeeds The new value for averageSpeeds
   * @param numberOfRecord The new value for numberOfRecord
   * @param imei The new value for imei
   * @param vehicleId The new value for vehicleId
   * @param uuid The new value for uuid
   * @param state The new value for state
   * @param isDisconnected The new value for isDisconnected
   * @param eventType The new value for eventType
   */
  public LiteVehicleGpsState(java.lang.Long startTime, java.lang.Long endTime, com.fretron.Model.LitePosition startLocation, com.fretron.Model.LitePosition endLocation, com.fretron.Model.LitePosition mean, java.lang.Double totalDistance, java.lang.Long totalTime, java.lang.Double averageSpeeds, java.lang.Integer numberOfRecord, java.lang.String imei, java.lang.String vehicleId, java.lang.String uuid, com.fretron.Model.GPSState state, java.lang.Boolean isDisconnected, java.lang.String eventType) {
    this.startTime = startTime;
    this.endTime = endTime;
    this.startLocation = startLocation;
    this.endLocation = endLocation;
    this.mean = mean;
    this.totalDistance = totalDistance;
    this.totalTime = totalTime;
    this.averageSpeeds = averageSpeeds;
    this.numberOfRecord = numberOfRecord;
    this.imei = imei;
    this.vehicleId = vehicleId;
    this.uuid = uuid;
    this.state = state;
    this.isDisconnected = isDisconnected;
    this.eventType = eventType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return startTime;
    case 1: return endTime;
    case 2: return startLocation;
    case 3: return endLocation;
    case 4: return mean;
    case 5: return totalDistance;
    case 6: return totalTime;
    case 7: return averageSpeeds;
    case 8: return numberOfRecord;
    case 9: return imei;
    case 10: return vehicleId;
    case 11: return uuid;
    case 12: return state;
    case 13: return isDisconnected;
    case 14: return eventType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: startTime = (java.lang.Long)value$; break;
    case 1: endTime = (java.lang.Long)value$; break;
    case 2: startLocation = (com.fretron.Model.LitePosition)value$; break;
    case 3: endLocation = (com.fretron.Model.LitePosition)value$; break;
    case 4: mean = (com.fretron.Model.LitePosition)value$; break;
    case 5: totalDistance = (java.lang.Double)value$; break;
    case 6: totalTime = (java.lang.Long)value$; break;
    case 7: averageSpeeds = (java.lang.Double)value$; break;
    case 8: numberOfRecord = (java.lang.Integer)value$; break;
    case 9: imei = (java.lang.String)value$; break;
    case 10: vehicleId = (java.lang.String)value$; break;
    case 11: uuid = (java.lang.String)value$; break;
    case 12: state = (com.fretron.Model.GPSState)value$; break;
    case 13: isDisconnected = (java.lang.Boolean)value$; break;
    case 14: eventType = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public java.lang.Long getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.Long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public java.lang.Long getEndTime() {
    return endTime;
  }

  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(java.lang.Long value) {
    this.endTime = value;
  }

  /**
   * Gets the value of the 'startLocation' field.
   * @return The value of the 'startLocation' field.
   */
  public com.fretron.Model.LitePosition getStartLocation() {
    return startLocation;
  }

  /**
   * Sets the value of the 'startLocation' field.
   * @param value the value to set.
   */
  public void setStartLocation(com.fretron.Model.LitePosition value) {
    this.startLocation = value;
  }

  /**
   * Gets the value of the 'endLocation' field.
   * @return The value of the 'endLocation' field.
   */
  public com.fretron.Model.LitePosition getEndLocation() {
    return endLocation;
  }

  /**
   * Sets the value of the 'endLocation' field.
   * @param value the value to set.
   */
  public void setEndLocation(com.fretron.Model.LitePosition value) {
    this.endLocation = value;
  }

  /**
   * Gets the value of the 'mean' field.
   * @return The value of the 'mean' field.
   */
  public com.fretron.Model.LitePosition getMean() {
    return mean;
  }

  /**
   * Sets the value of the 'mean' field.
   * @param value the value to set.
   */
  public void setMean(com.fretron.Model.LitePosition value) {
    this.mean = value;
  }

  /**
   * Gets the value of the 'totalDistance' field.
   * @return The value of the 'totalDistance' field.
   */
  public java.lang.Double getTotalDistance() {
    return totalDistance;
  }

  /**
   * Sets the value of the 'totalDistance' field.
   * @param value the value to set.
   */
  public void setTotalDistance(java.lang.Double value) {
    this.totalDistance = value;
  }

  /**
   * Gets the value of the 'totalTime' field.
   * @return The value of the 'totalTime' field.
   */
  public java.lang.Long getTotalTime() {
    return totalTime;
  }

  /**
   * Sets the value of the 'totalTime' field.
   * @param value the value to set.
   */
  public void setTotalTime(java.lang.Long value) {
    this.totalTime = value;
  }

  /**
   * Gets the value of the 'averageSpeeds' field.
   * @return The value of the 'averageSpeeds' field.
   */
  public java.lang.Double getAverageSpeeds() {
    return averageSpeeds;
  }

  /**
   * Sets the value of the 'averageSpeeds' field.
   * @param value the value to set.
   */
  public void setAverageSpeeds(java.lang.Double value) {
    this.averageSpeeds = value;
  }

  /**
   * Gets the value of the 'numberOfRecord' field.
   * @return The value of the 'numberOfRecord' field.
   */
  public java.lang.Integer getNumberOfRecord() {
    return numberOfRecord;
  }

  /**
   * Sets the value of the 'numberOfRecord' field.
   * @param value the value to set.
   */
  public void setNumberOfRecord(java.lang.Integer value) {
    this.numberOfRecord = value;
  }

  /**
   * Gets the value of the 'imei' field.
   * @return The value of the 'imei' field.
   */
  public java.lang.String getImei() {
    return imei;
  }

  /**
   * Sets the value of the 'imei' field.
   * @param value the value to set.
   */
  public void setImei(java.lang.String value) {
    this.imei = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public com.fretron.Model.GPSState getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(com.fretron.Model.GPSState value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'isDisconnected' field.
   * @return The value of the 'isDisconnected' field.
   */
  public java.lang.Boolean getIsDisconnected() {
    return isDisconnected;
  }

  /**
   * Sets the value of the 'isDisconnected' field.
   * @param value the value to set.
   */
  public void setIsDisconnected(java.lang.Boolean value) {
    this.isDisconnected = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.String getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Creates a new LiteVehicleGpsState RecordBuilder.
   * @return A new LiteVehicleGpsState RecordBuilder
   */
  public static com.fretron.Model.LiteVehicleGpsState.Builder newBuilder() {
    return new com.fretron.Model.LiteVehicleGpsState.Builder();
  }

  /**
   * Creates a new LiteVehicleGpsState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LiteVehicleGpsState RecordBuilder
   */
  public static com.fretron.Model.LiteVehicleGpsState.Builder newBuilder(com.fretron.Model.LiteVehicleGpsState.Builder other) {
    return new com.fretron.Model.LiteVehicleGpsState.Builder(other);
  }

  /**
   * Creates a new LiteVehicleGpsState RecordBuilder by copying an existing LiteVehicleGpsState instance.
   * @param other The existing instance to copy.
   * @return A new LiteVehicleGpsState RecordBuilder
   */
  public static com.fretron.Model.LiteVehicleGpsState.Builder newBuilder(com.fretron.Model.LiteVehicleGpsState other) {
    return new com.fretron.Model.LiteVehicleGpsState.Builder(other);
  }

  /**
   * RecordBuilder for LiteVehicleGpsState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LiteVehicleGpsState>
    implements org.apache.avro.data.RecordBuilder<LiteVehicleGpsState> {

    private long startTime;
    private long endTime;
    private com.fretron.Model.LitePosition startLocation;
    private com.fretron.Model.LitePosition.Builder startLocationBuilder;
    private com.fretron.Model.LitePosition endLocation;
    private com.fretron.Model.LitePosition.Builder endLocationBuilder;
    private com.fretron.Model.LitePosition mean;
    private com.fretron.Model.LitePosition.Builder meanBuilder;
    private java.lang.Double totalDistance;
    private java.lang.Long totalTime;
    private java.lang.Double averageSpeeds;
    private int numberOfRecord;
    private java.lang.String imei;
    private java.lang.String vehicleId;
    private java.lang.String uuid;
    private com.fretron.Model.GPSState state;
    private boolean isDisconnected;
    private java.lang.String eventType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.LiteVehicleGpsState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.startTime)) {
        this.startTime = data().deepCopy(fields()[0].schema(), other.startTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.endTime)) {
        this.endTime = data().deepCopy(fields()[1].schema(), other.endTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startLocation)) {
        this.startLocation = data().deepCopy(fields()[2].schema(), other.startLocation);
        fieldSetFlags()[2] = true;
      }
      if (other.hasStartLocationBuilder()) {
        this.startLocationBuilder = com.fretron.Model.LitePosition.newBuilder(other.getStartLocationBuilder());
      }
      if (isValidValue(fields()[3], other.endLocation)) {
        this.endLocation = data().deepCopy(fields()[3].schema(), other.endLocation);
        fieldSetFlags()[3] = true;
      }
      if (other.hasEndLocationBuilder()) {
        this.endLocationBuilder = com.fretron.Model.LitePosition.newBuilder(other.getEndLocationBuilder());
      }
      if (isValidValue(fields()[4], other.mean)) {
        this.mean = data().deepCopy(fields()[4].schema(), other.mean);
        fieldSetFlags()[4] = true;
      }
      if (other.hasMeanBuilder()) {
        this.meanBuilder = com.fretron.Model.LitePosition.newBuilder(other.getMeanBuilder());
      }
      if (isValidValue(fields()[5], other.totalDistance)) {
        this.totalDistance = data().deepCopy(fields()[5].schema(), other.totalDistance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.totalTime)) {
        this.totalTime = data().deepCopy(fields()[6].schema(), other.totalTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.averageSpeeds)) {
        this.averageSpeeds = data().deepCopy(fields()[7].schema(), other.averageSpeeds);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.numberOfRecord)) {
        this.numberOfRecord = data().deepCopy(fields()[8].schema(), other.numberOfRecord);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.imei)) {
        this.imei = data().deepCopy(fields()[9].schema(), other.imei);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[10].schema(), other.vehicleId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.uuid)) {
        this.uuid = data().deepCopy(fields()[11].schema(), other.uuid);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.state)) {
        this.state = data().deepCopy(fields()[12].schema(), other.state);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.isDisconnected)) {
        this.isDisconnected = data().deepCopy(fields()[13].schema(), other.isDisconnected);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.eventType)) {
        this.eventType = data().deepCopy(fields()[14].schema(), other.eventType);
        fieldSetFlags()[14] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LiteVehicleGpsState instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.LiteVehicleGpsState other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.startTime)) {
        this.startTime = data().deepCopy(fields()[0].schema(), other.startTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.endTime)) {
        this.endTime = data().deepCopy(fields()[1].schema(), other.endTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startLocation)) {
        this.startLocation = data().deepCopy(fields()[2].schema(), other.startLocation);
        fieldSetFlags()[2] = true;
      }
      this.startLocationBuilder = null;
      if (isValidValue(fields()[3], other.endLocation)) {
        this.endLocation = data().deepCopy(fields()[3].schema(), other.endLocation);
        fieldSetFlags()[3] = true;
      }
      this.endLocationBuilder = null;
      if (isValidValue(fields()[4], other.mean)) {
        this.mean = data().deepCopy(fields()[4].schema(), other.mean);
        fieldSetFlags()[4] = true;
      }
      this.meanBuilder = null;
      if (isValidValue(fields()[5], other.totalDistance)) {
        this.totalDistance = data().deepCopy(fields()[5].schema(), other.totalDistance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.totalTime)) {
        this.totalTime = data().deepCopy(fields()[6].schema(), other.totalTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.averageSpeeds)) {
        this.averageSpeeds = data().deepCopy(fields()[7].schema(), other.averageSpeeds);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.numberOfRecord)) {
        this.numberOfRecord = data().deepCopy(fields()[8].schema(), other.numberOfRecord);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.imei)) {
        this.imei = data().deepCopy(fields()[9].schema(), other.imei);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[10].schema(), other.vehicleId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.uuid)) {
        this.uuid = data().deepCopy(fields()[11].schema(), other.uuid);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.state)) {
        this.state = data().deepCopy(fields()[12].schema(), other.state);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.isDisconnected)) {
        this.isDisconnected = data().deepCopy(fields()[13].schema(), other.isDisconnected);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.eventType)) {
        this.eventType = data().deepCopy(fields()[14].schema(), other.eventType);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public java.lang.Long getStartTime() {
      return startTime;
    }

    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setStartTime(long value) {
      validate(fields()[0], value);
      this.startTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearStartTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public java.lang.Long getEndTime() {
      return endTime;
    }

    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setEndTime(long value) {
      validate(fields()[1], value);
      this.endTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearEndTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'startLocation' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getStartLocation() {
      return startLocation;
    }

    /**
      * Sets the value of the 'startLocation' field.
      * @param value The value of 'startLocation'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setStartLocation(com.fretron.Model.LitePosition value) {
      validate(fields()[2], value);
      this.startLocationBuilder = null;
      this.startLocation = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'startLocation' field has been set.
      * @return True if the 'startLocation' field has been set, false otherwise.
      */
    public boolean hasStartLocation() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'startLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getStartLocationBuilder() {
      if (startLocationBuilder == null) {
        if (hasStartLocation()) {
          setStartLocationBuilder(com.fretron.Model.LitePosition.newBuilder(startLocation));
        } else {
          setStartLocationBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return startLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'startLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.LiteVehicleGpsState.Builder setStartLocationBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearStartLocation();
      startLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'startLocation' field has an active Builder instance
     * @return True if the 'startLocation' field has an active Builder instance
     */
    public boolean hasStartLocationBuilder() {
      return startLocationBuilder != null;
    }

    /**
      * Clears the value of the 'startLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearStartLocation() {
      startLocation = null;
      startLocationBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'endLocation' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getEndLocation() {
      return endLocation;
    }

    /**
      * Sets the value of the 'endLocation' field.
      * @param value The value of 'endLocation'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setEndLocation(com.fretron.Model.LitePosition value) {
      validate(fields()[3], value);
      this.endLocationBuilder = null;
      this.endLocation = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'endLocation' field has been set.
      * @return True if the 'endLocation' field has been set, false otherwise.
      */
    public boolean hasEndLocation() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'endLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getEndLocationBuilder() {
      if (endLocationBuilder == null) {
        if (hasEndLocation()) {
          setEndLocationBuilder(com.fretron.Model.LitePosition.newBuilder(endLocation));
        } else {
          setEndLocationBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return endLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'endLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.LiteVehicleGpsState.Builder setEndLocationBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearEndLocation();
      endLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'endLocation' field has an active Builder instance
     * @return True if the 'endLocation' field has an active Builder instance
     */
    public boolean hasEndLocationBuilder() {
      return endLocationBuilder != null;
    }

    /**
      * Clears the value of the 'endLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearEndLocation() {
      endLocation = null;
      endLocationBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mean' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getMean() {
      return mean;
    }

    /**
      * Sets the value of the 'mean' field.
      * @param value The value of 'mean'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setMean(com.fretron.Model.LitePosition value) {
      validate(fields()[4], value);
      this.meanBuilder = null;
      this.mean = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mean' field has been set.
      * @return True if the 'mean' field has been set, false otherwise.
      */
    public boolean hasMean() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'mean' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getMeanBuilder() {
      if (meanBuilder == null) {
        if (hasMean()) {
          setMeanBuilder(com.fretron.Model.LitePosition.newBuilder(mean));
        } else {
          setMeanBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return meanBuilder;
    }

    /**
     * Sets the Builder instance for the 'mean' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.LiteVehicleGpsState.Builder setMeanBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearMean();
      meanBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mean' field has an active Builder instance
     * @return True if the 'mean' field has an active Builder instance
     */
    public boolean hasMeanBuilder() {
      return meanBuilder != null;
    }

    /**
      * Clears the value of the 'mean' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearMean() {
      mean = null;
      meanBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDistance' field.
      * @return The value.
      */
    public java.lang.Double getTotalDistance() {
      return totalDistance;
    }

    /**
      * Sets the value of the 'totalDistance' field.
      * @param value The value of 'totalDistance'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setTotalDistance(java.lang.Double value) {
      validate(fields()[5], value);
      this.totalDistance = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDistance' field has been set.
      * @return True if the 'totalDistance' field has been set, false otherwise.
      */
    public boolean hasTotalDistance() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'totalDistance' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearTotalDistance() {
      totalDistance = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTime' field.
      * @return The value.
      */
    public java.lang.Long getTotalTime() {
      return totalTime;
    }

    /**
      * Sets the value of the 'totalTime' field.
      * @param value The value of 'totalTime'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setTotalTime(java.lang.Long value) {
      validate(fields()[6], value);
      this.totalTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTime' field has been set.
      * @return True if the 'totalTime' field has been set, false otherwise.
      */
    public boolean hasTotalTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'totalTime' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearTotalTime() {
      totalTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageSpeeds' field.
      * @return The value.
      */
    public java.lang.Double getAverageSpeeds() {
      return averageSpeeds;
    }

    /**
      * Sets the value of the 'averageSpeeds' field.
      * @param value The value of 'averageSpeeds'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setAverageSpeeds(java.lang.Double value) {
      validate(fields()[7], value);
      this.averageSpeeds = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'averageSpeeds' field has been set.
      * @return True if the 'averageSpeeds' field has been set, false otherwise.
      */
    public boolean hasAverageSpeeds() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'averageSpeeds' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearAverageSpeeds() {
      averageSpeeds = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfRecord' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOfRecord() {
      return numberOfRecord;
    }

    /**
      * Sets the value of the 'numberOfRecord' field.
      * @param value The value of 'numberOfRecord'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setNumberOfRecord(int value) {
      validate(fields()[8], value);
      this.numberOfRecord = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfRecord' field has been set.
      * @return True if the 'numberOfRecord' field has been set, false otherwise.
      */
    public boolean hasNumberOfRecord() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'numberOfRecord' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearNumberOfRecord() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'imei' field.
      * @return The value.
      */
    public java.lang.String getImei() {
      return imei;
    }

    /**
      * Sets the value of the 'imei' field.
      * @param value The value of 'imei'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setImei(java.lang.String value) {
      validate(fields()[9], value);
      this.imei = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'imei' field has been set.
      * @return True if the 'imei' field has been set, false otherwise.
      */
    public boolean hasImei() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'imei' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearImei() {
      imei = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setVehicleId(java.lang.String value) {
      validate(fields()[10], value);
      this.vehicleId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setUuid(java.lang.String value) {
      validate(fields()[11], value);
      this.uuid = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public com.fretron.Model.GPSState getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setState(com.fretron.Model.GPSState value) {
      validate(fields()[12], value);
      this.state = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearState() {
      state = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'isDisconnected' field.
      * @return The value.
      */
    public java.lang.Boolean getIsDisconnected() {
      return isDisconnected;
    }

    /**
      * Sets the value of the 'isDisconnected' field.
      * @param value The value of 'isDisconnected'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setIsDisconnected(boolean value) {
      validate(fields()[13], value);
      this.isDisconnected = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'isDisconnected' field has been set.
      * @return True if the 'isDisconnected' field has been set, false otherwise.
      */
    public boolean hasIsDisconnected() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'isDisconnected' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearIsDisconnected() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder setEventType(java.lang.String value) {
      validate(fields()[14], value);
      this.eventType = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteVehicleGpsState.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    public LiteVehicleGpsState build() {
      try {
        LiteVehicleGpsState record = new LiteVehicleGpsState();
        record.startTime = fieldSetFlags()[0] ? this.startTime : (java.lang.Long) defaultValue(fields()[0]);
        record.endTime = fieldSetFlags()[1] ? this.endTime : (java.lang.Long) defaultValue(fields()[1]);
        if (startLocationBuilder != null) {
          record.startLocation = this.startLocationBuilder.build();
        } else {
          record.startLocation = fieldSetFlags()[2] ? this.startLocation : (com.fretron.Model.LitePosition) defaultValue(fields()[2]);
        }
        if (endLocationBuilder != null) {
          record.endLocation = this.endLocationBuilder.build();
        } else {
          record.endLocation = fieldSetFlags()[3] ? this.endLocation : (com.fretron.Model.LitePosition) defaultValue(fields()[3]);
        }
        if (meanBuilder != null) {
          record.mean = this.meanBuilder.build();
        } else {
          record.mean = fieldSetFlags()[4] ? this.mean : (com.fretron.Model.LitePosition) defaultValue(fields()[4]);
        }
        record.totalDistance = fieldSetFlags()[5] ? this.totalDistance : (java.lang.Double) defaultValue(fields()[5]);
        record.totalTime = fieldSetFlags()[6] ? this.totalTime : (java.lang.Long) defaultValue(fields()[6]);
        record.averageSpeeds = fieldSetFlags()[7] ? this.averageSpeeds : (java.lang.Double) defaultValue(fields()[7]);
        record.numberOfRecord = fieldSetFlags()[8] ? this.numberOfRecord : (java.lang.Integer) defaultValue(fields()[8]);
        record.imei = fieldSetFlags()[9] ? this.imei : (java.lang.String) defaultValue(fields()[9]);
        record.vehicleId = fieldSetFlags()[10] ? this.vehicleId : (java.lang.String) defaultValue(fields()[10]);
        record.uuid = fieldSetFlags()[11] ? this.uuid : (java.lang.String) defaultValue(fields()[11]);
        record.state = fieldSetFlags()[12] ? this.state : (com.fretron.Model.GPSState) defaultValue(fields()[12]);
        record.isDisconnected = fieldSetFlags()[13] ? this.isDisconnected : (java.lang.Boolean) defaultValue(fields()[13]);
        record.eventType = fieldSetFlags()[14] ? this.eventType : (java.lang.String) defaultValue(fields()[14]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
