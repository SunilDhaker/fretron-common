/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DeviceConnectionState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -664370792252807475L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeviceConnectionState\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastBatteryValue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lastLowBattery\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"lastPowerCut\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"time\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"attributes\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Attributes\",\"fields\":[{\"name\":\"battery\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alarm\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ip\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"distance\",\"type\":[\"null\",\"double\"]},{\"name\":\"totalDistance\",\"type\":[\"null\",\"double\"]},{\"name\":\"isCharge\",\"type\":\"boolean\",\"default\":false},{\"name\":\"chargingValue\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"ignition\",\"type\":\"boolean\",\"default\":false},{\"name\":\"ignitionValue\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"isOilElectricityConnected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"oilElectricityValue\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"isGpsTrackingOn\",\"type\":\"boolean\",\"default\":false},{\"name\":\"acc\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"satellitesGpsQualityInfo\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"uploadReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uploadMode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"signalStrength\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"commandResult\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"serialNumber\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"sleepMode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"gpsStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"duration\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"sessionStartTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"speedBand\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"activeAlarms\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"speed\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"forwardReasons\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"protocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"currentSpeed\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"currentLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LitePosition\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"isFillingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"odometer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Odometer\",\"fields\":[{\"name\":\"softwareMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastUpdateTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isSoftwareMeterManuallyCalibrated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"lastCalibrationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"hardwareReading\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"hardwareDistance\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}],\"default\":null},{\"name\":\"odometer\",\"type\":[\"null\",\"Odometer\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String imei;
  @Deprecated public java.lang.String lastBatteryValue;
  @Deprecated public long lastLowBattery;
  @Deprecated public long lastPowerCut;
  @Deprecated public long time;
  @Deprecated public com.fretron.Model.Attributes attributes;
  @Deprecated public java.lang.Long duration;
  @Deprecated public java.lang.Long sessionStartTime;
  @Deprecated public java.lang.String speedBand;
  @Deprecated public java.util.List<java.lang.String> activeAlarms;
  @Deprecated public java.lang.Double speed;
  @Deprecated public java.util.List<java.lang.String> forwardReasons;
  @Deprecated public java.lang.String protocol;
  @Deprecated public java.lang.Double currentSpeed;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public com.fretron.Model.LitePosition currentLocation;
  @Deprecated public com.fretron.Model.Odometer odometer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeviceConnectionState() {}

  /**
   * All-args constructor.
   * @param imei The new value for imei
   * @param lastBatteryValue The new value for lastBatteryValue
   * @param lastLowBattery The new value for lastLowBattery
   * @param lastPowerCut The new value for lastPowerCut
   * @param time The new value for time
   * @param attributes The new value for attributes
   * @param duration The new value for duration
   * @param sessionStartTime The new value for sessionStartTime
   * @param speedBand The new value for speedBand
   * @param activeAlarms The new value for activeAlarms
   * @param speed The new value for speed
   * @param forwardReasons The new value for forwardReasons
   * @param protocol The new value for protocol
   * @param currentSpeed The new value for currentSpeed
   * @param vehicleId The new value for vehicleId
   * @param currentLocation The new value for currentLocation
   * @param odometer The new value for odometer
   */
  public DeviceConnectionState(java.lang.String imei, java.lang.String lastBatteryValue, java.lang.Long lastLowBattery, java.lang.Long lastPowerCut, java.lang.Long time, com.fretron.Model.Attributes attributes, java.lang.Long duration, java.lang.Long sessionStartTime, java.lang.String speedBand, java.util.List<java.lang.String> activeAlarms, java.lang.Double speed, java.util.List<java.lang.String> forwardReasons, java.lang.String protocol, java.lang.Double currentSpeed, java.lang.String vehicleId, com.fretron.Model.LitePosition currentLocation, com.fretron.Model.Odometer odometer) {
    this.imei = imei;
    this.lastBatteryValue = lastBatteryValue;
    this.lastLowBattery = lastLowBattery;
    this.lastPowerCut = lastPowerCut;
    this.time = time;
    this.attributes = attributes;
    this.duration = duration;
    this.sessionStartTime = sessionStartTime;
    this.speedBand = speedBand;
    this.activeAlarms = activeAlarms;
    this.speed = speed;
    this.forwardReasons = forwardReasons;
    this.protocol = protocol;
    this.currentSpeed = currentSpeed;
    this.vehicleId = vehicleId;
    this.currentLocation = currentLocation;
    this.odometer = odometer;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return imei;
    case 1: return lastBatteryValue;
    case 2: return lastLowBattery;
    case 3: return lastPowerCut;
    case 4: return time;
    case 5: return attributes;
    case 6: return duration;
    case 7: return sessionStartTime;
    case 8: return speedBand;
    case 9: return activeAlarms;
    case 10: return speed;
    case 11: return forwardReasons;
    case 12: return protocol;
    case 13: return currentSpeed;
    case 14: return vehicleId;
    case 15: return currentLocation;
    case 16: return odometer;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: imei = (java.lang.String)value$; break;
    case 1: lastBatteryValue = (java.lang.String)value$; break;
    case 2: lastLowBattery = (java.lang.Long)value$; break;
    case 3: lastPowerCut = (java.lang.Long)value$; break;
    case 4: time = (java.lang.Long)value$; break;
    case 5: attributes = (com.fretron.Model.Attributes)value$; break;
    case 6: duration = (java.lang.Long)value$; break;
    case 7: sessionStartTime = (java.lang.Long)value$; break;
    case 8: speedBand = (java.lang.String)value$; break;
    case 9: activeAlarms = (java.util.List<java.lang.String>)value$; break;
    case 10: speed = (java.lang.Double)value$; break;
    case 11: forwardReasons = (java.util.List<java.lang.String>)value$; break;
    case 12: protocol = (java.lang.String)value$; break;
    case 13: currentSpeed = (java.lang.Double)value$; break;
    case 14: vehicleId = (java.lang.String)value$; break;
    case 15: currentLocation = (com.fretron.Model.LitePosition)value$; break;
    case 16: odometer = (com.fretron.Model.Odometer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'imei' field.
   * @return The value of the 'imei' field.
   */
  public java.lang.String getImei() {
    return imei;
  }

  /**
   * Sets the value of the 'imei' field.
   * @param value the value to set.
   */
  public void setImei(java.lang.String value) {
    this.imei = value;
  }

  /**
   * Gets the value of the 'lastBatteryValue' field.
   * @return The value of the 'lastBatteryValue' field.
   */
  public java.lang.String getLastBatteryValue() {
    return lastBatteryValue;
  }

  /**
   * Sets the value of the 'lastBatteryValue' field.
   * @param value the value to set.
   */
  public void setLastBatteryValue(java.lang.String value) {
    this.lastBatteryValue = value;
  }

  /**
   * Gets the value of the 'lastLowBattery' field.
   * @return The value of the 'lastLowBattery' field.
   */
  public java.lang.Long getLastLowBattery() {
    return lastLowBattery;
  }

  /**
   * Sets the value of the 'lastLowBattery' field.
   * @param value the value to set.
   */
  public void setLastLowBattery(java.lang.Long value) {
    this.lastLowBattery = value;
  }

  /**
   * Gets the value of the 'lastPowerCut' field.
   * @return The value of the 'lastPowerCut' field.
   */
  public java.lang.Long getLastPowerCut() {
    return lastPowerCut;
  }

  /**
   * Sets the value of the 'lastPowerCut' field.
   * @param value the value to set.
   */
  public void setLastPowerCut(java.lang.Long value) {
    this.lastPowerCut = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * @return The value of the 'attributes' field.
   */
  public com.fretron.Model.Attributes getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(com.fretron.Model.Attributes value) {
    this.attributes = value;
  }

  /**
   * Gets the value of the 'duration' field.
   * @return The value of the 'duration' field.
   */
  public java.lang.Long getDuration() {
    return duration;
  }

  /**
   * Sets the value of the 'duration' field.
   * @param value the value to set.
   */
  public void setDuration(java.lang.Long value) {
    this.duration = value;
  }

  /**
   * Gets the value of the 'sessionStartTime' field.
   * @return The value of the 'sessionStartTime' field.
   */
  public java.lang.Long getSessionStartTime() {
    return sessionStartTime;
  }

  /**
   * Sets the value of the 'sessionStartTime' field.
   * @param value the value to set.
   */
  public void setSessionStartTime(java.lang.Long value) {
    this.sessionStartTime = value;
  }

  /**
   * Gets the value of the 'speedBand' field.
   * @return The value of the 'speedBand' field.
   */
  public java.lang.String getSpeedBand() {
    return speedBand;
  }

  /**
   * Sets the value of the 'speedBand' field.
   * @param value the value to set.
   */
  public void setSpeedBand(java.lang.String value) {
    this.speedBand = value;
  }

  /**
   * Gets the value of the 'activeAlarms' field.
   * @return The value of the 'activeAlarms' field.
   */
  public java.util.List<java.lang.String> getActiveAlarms() {
    return activeAlarms;
  }

  /**
   * Sets the value of the 'activeAlarms' field.
   * @param value the value to set.
   */
  public void setActiveAlarms(java.util.List<java.lang.String> value) {
    this.activeAlarms = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'forwardReasons' field.
   * @return The value of the 'forwardReasons' field.
   */
  public java.util.List<java.lang.String> getForwardReasons() {
    return forwardReasons;
  }

  /**
   * Sets the value of the 'forwardReasons' field.
   * @param value the value to set.
   */
  public void setForwardReasons(java.util.List<java.lang.String> value) {
    this.forwardReasons = value;
  }

  /**
   * Gets the value of the 'protocol' field.
   * @return The value of the 'protocol' field.
   */
  public java.lang.String getProtocol() {
    return protocol;
  }

  /**
   * Sets the value of the 'protocol' field.
   * @param value the value to set.
   */
  public void setProtocol(java.lang.String value) {
    this.protocol = value;
  }

  /**
   * Gets the value of the 'currentSpeed' field.
   * @return The value of the 'currentSpeed' field.
   */
  public java.lang.Double getCurrentSpeed() {
    return currentSpeed;
  }

  /**
   * Sets the value of the 'currentSpeed' field.
   * @param value the value to set.
   */
  public void setCurrentSpeed(java.lang.Double value) {
    this.currentSpeed = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'currentLocation' field.
   * @return The value of the 'currentLocation' field.
   */
  public com.fretron.Model.LitePosition getCurrentLocation() {
    return currentLocation;
  }

  /**
   * Sets the value of the 'currentLocation' field.
   * @param value the value to set.
   */
  public void setCurrentLocation(com.fretron.Model.LitePosition value) {
    this.currentLocation = value;
  }

  /**
   * Gets the value of the 'odometer' field.
   * @return The value of the 'odometer' field.
   */
  public com.fretron.Model.Odometer getOdometer() {
    return odometer;
  }

  /**
   * Sets the value of the 'odometer' field.
   * @param value the value to set.
   */
  public void setOdometer(com.fretron.Model.Odometer value) {
    this.odometer = value;
  }

  /**
   * Creates a new DeviceConnectionState RecordBuilder.
   * @return A new DeviceConnectionState RecordBuilder
   */
  public static com.fretron.Model.DeviceConnectionState.Builder newBuilder() {
    return new com.fretron.Model.DeviceConnectionState.Builder();
  }

  /**
   * Creates a new DeviceConnectionState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeviceConnectionState RecordBuilder
   */
  public static com.fretron.Model.DeviceConnectionState.Builder newBuilder(com.fretron.Model.DeviceConnectionState.Builder other) {
    return new com.fretron.Model.DeviceConnectionState.Builder(other);
  }

  /**
   * Creates a new DeviceConnectionState RecordBuilder by copying an existing DeviceConnectionState instance.
   * @param other The existing instance to copy.
   * @return A new DeviceConnectionState RecordBuilder
   */
  public static com.fretron.Model.DeviceConnectionState.Builder newBuilder(com.fretron.Model.DeviceConnectionState other) {
    return new com.fretron.Model.DeviceConnectionState.Builder(other);
  }

  /**
   * RecordBuilder for DeviceConnectionState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeviceConnectionState>
    implements org.apache.avro.data.RecordBuilder<DeviceConnectionState> {

    private java.lang.String imei;
    private java.lang.String lastBatteryValue;
    private long lastLowBattery;
    private long lastPowerCut;
    private long time;
    private com.fretron.Model.Attributes attributes;
    private com.fretron.Model.Attributes.Builder attributesBuilder;
    private java.lang.Long duration;
    private java.lang.Long sessionStartTime;
    private java.lang.String speedBand;
    private java.util.List<java.lang.String> activeAlarms;
    private java.lang.Double speed;
    private java.util.List<java.lang.String> forwardReasons;
    private java.lang.String protocol;
    private java.lang.Double currentSpeed;
    private java.lang.String vehicleId;
    private com.fretron.Model.LitePosition currentLocation;
    private com.fretron.Model.LitePosition.Builder currentLocationBuilder;
    private com.fretron.Model.Odometer odometer;
    private com.fretron.Model.Odometer.Builder odometerBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.DeviceConnectionState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.imei)) {
        this.imei = data().deepCopy(fields()[0].schema(), other.imei);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastBatteryValue)) {
        this.lastBatteryValue = data().deepCopy(fields()[1].schema(), other.lastBatteryValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastLowBattery)) {
        this.lastLowBattery = data().deepCopy(fields()[2].schema(), other.lastLowBattery);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastPowerCut)) {
        this.lastPowerCut = data().deepCopy(fields()[3].schema(), other.lastPowerCut);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time)) {
        this.time = data().deepCopy(fields()[4].schema(), other.time);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.attributes)) {
        this.attributes = data().deepCopy(fields()[5].schema(), other.attributes);
        fieldSetFlags()[5] = true;
      }
      if (other.hasAttributesBuilder()) {
        this.attributesBuilder = com.fretron.Model.Attributes.newBuilder(other.getAttributesBuilder());
      }
      if (isValidValue(fields()[6], other.duration)) {
        this.duration = data().deepCopy(fields()[6].schema(), other.duration);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sessionStartTime)) {
        this.sessionStartTime = data().deepCopy(fields()[7].schema(), other.sessionStartTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.speedBand)) {
        this.speedBand = data().deepCopy(fields()[8].schema(), other.speedBand);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.activeAlarms)) {
        this.activeAlarms = data().deepCopy(fields()[9].schema(), other.activeAlarms);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.speed)) {
        this.speed = data().deepCopy(fields()[10].schema(), other.speed);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.forwardReasons)) {
        this.forwardReasons = data().deepCopy(fields()[11].schema(), other.forwardReasons);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.protocol)) {
        this.protocol = data().deepCopy(fields()[12].schema(), other.protocol);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.currentSpeed)) {
        this.currentSpeed = data().deepCopy(fields()[13].schema(), other.currentSpeed);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[14].schema(), other.vehicleId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.currentLocation)) {
        this.currentLocation = data().deepCopy(fields()[15].schema(), other.currentLocation);
        fieldSetFlags()[15] = true;
      }
      if (other.hasCurrentLocationBuilder()) {
        this.currentLocationBuilder = com.fretron.Model.LitePosition.newBuilder(other.getCurrentLocationBuilder());
      }
      if (isValidValue(fields()[16], other.odometer)) {
        this.odometer = data().deepCopy(fields()[16].schema(), other.odometer);
        fieldSetFlags()[16] = true;
      }
      if (other.hasOdometerBuilder()) {
        this.odometerBuilder = com.fretron.Model.Odometer.newBuilder(other.getOdometerBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DeviceConnectionState instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.DeviceConnectionState other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.imei)) {
        this.imei = data().deepCopy(fields()[0].schema(), other.imei);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastBatteryValue)) {
        this.lastBatteryValue = data().deepCopy(fields()[1].schema(), other.lastBatteryValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastLowBattery)) {
        this.lastLowBattery = data().deepCopy(fields()[2].schema(), other.lastLowBattery);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastPowerCut)) {
        this.lastPowerCut = data().deepCopy(fields()[3].schema(), other.lastPowerCut);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time)) {
        this.time = data().deepCopy(fields()[4].schema(), other.time);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.attributes)) {
        this.attributes = data().deepCopy(fields()[5].schema(), other.attributes);
        fieldSetFlags()[5] = true;
      }
      this.attributesBuilder = null;
      if (isValidValue(fields()[6], other.duration)) {
        this.duration = data().deepCopy(fields()[6].schema(), other.duration);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sessionStartTime)) {
        this.sessionStartTime = data().deepCopy(fields()[7].schema(), other.sessionStartTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.speedBand)) {
        this.speedBand = data().deepCopy(fields()[8].schema(), other.speedBand);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.activeAlarms)) {
        this.activeAlarms = data().deepCopy(fields()[9].schema(), other.activeAlarms);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.speed)) {
        this.speed = data().deepCopy(fields()[10].schema(), other.speed);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.forwardReasons)) {
        this.forwardReasons = data().deepCopy(fields()[11].schema(), other.forwardReasons);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.protocol)) {
        this.protocol = data().deepCopy(fields()[12].schema(), other.protocol);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.currentSpeed)) {
        this.currentSpeed = data().deepCopy(fields()[13].schema(), other.currentSpeed);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[14].schema(), other.vehicleId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.currentLocation)) {
        this.currentLocation = data().deepCopy(fields()[15].schema(), other.currentLocation);
        fieldSetFlags()[15] = true;
      }
      this.currentLocationBuilder = null;
      if (isValidValue(fields()[16], other.odometer)) {
        this.odometer = data().deepCopy(fields()[16].schema(), other.odometer);
        fieldSetFlags()[16] = true;
      }
      this.odometerBuilder = null;
    }

    /**
      * Gets the value of the 'imei' field.
      * @return The value.
      */
    public java.lang.String getImei() {
      return imei;
    }

    /**
      * Sets the value of the 'imei' field.
      * @param value The value of 'imei'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setImei(java.lang.String value) {
      validate(fields()[0], value);
      this.imei = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'imei' field has been set.
      * @return True if the 'imei' field has been set, false otherwise.
      */
    public boolean hasImei() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'imei' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearImei() {
      imei = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastBatteryValue' field.
      * @return The value.
      */
    public java.lang.String getLastBatteryValue() {
      return lastBatteryValue;
    }

    /**
      * Sets the value of the 'lastBatteryValue' field.
      * @param value The value of 'lastBatteryValue'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setLastBatteryValue(java.lang.String value) {
      validate(fields()[1], value);
      this.lastBatteryValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastBatteryValue' field has been set.
      * @return True if the 'lastBatteryValue' field has been set, false otherwise.
      */
    public boolean hasLastBatteryValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastBatteryValue' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearLastBatteryValue() {
      lastBatteryValue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastLowBattery' field.
      * @return The value.
      */
    public java.lang.Long getLastLowBattery() {
      return lastLowBattery;
    }

    /**
      * Sets the value of the 'lastLowBattery' field.
      * @param value The value of 'lastLowBattery'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setLastLowBattery(long value) {
      validate(fields()[2], value);
      this.lastLowBattery = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastLowBattery' field has been set.
      * @return True if the 'lastLowBattery' field has been set, false otherwise.
      */
    public boolean hasLastLowBattery() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastLowBattery' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearLastLowBattery() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPowerCut' field.
      * @return The value.
      */
    public java.lang.Long getLastPowerCut() {
      return lastPowerCut;
    }

    /**
      * Sets the value of the 'lastPowerCut' field.
      * @param value The value of 'lastPowerCut'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setLastPowerCut(long value) {
      validate(fields()[3], value);
      this.lastPowerCut = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPowerCut' field has been set.
      * @return True if the 'lastPowerCut' field has been set, false otherwise.
      */
    public boolean hasLastPowerCut() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastPowerCut' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearLastPowerCut() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setTime(long value) {
      validate(fields()[4], value);
      this.time = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearTime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributes' field.
      * @return The value.
      */
    public com.fretron.Model.Attributes getAttributes() {
      return attributes;
    }

    /**
      * Sets the value of the 'attributes' field.
      * @param value The value of 'attributes'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setAttributes(com.fretron.Model.Attributes value) {
      validate(fields()[5], value);
      this.attributesBuilder = null;
      this.attributes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'attributes' field has been set.
      * @return True if the 'attributes' field has been set, false otherwise.
      */
    public boolean hasAttributes() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'attributes' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Attributes.Builder getAttributesBuilder() {
      if (attributesBuilder == null) {
        if (hasAttributes()) {
          setAttributesBuilder(com.fretron.Model.Attributes.newBuilder(attributes));
        } else {
          setAttributesBuilder(com.fretron.Model.Attributes.newBuilder());
        }
      }
      return attributesBuilder;
    }

    /**
     * Sets the Builder instance for the 'attributes' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.DeviceConnectionState.Builder setAttributesBuilder(com.fretron.Model.Attributes.Builder value) {
      clearAttributes();
      attributesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'attributes' field has an active Builder instance
     * @return True if the 'attributes' field has an active Builder instance
     */
    public boolean hasAttributesBuilder() {
      return attributesBuilder != null;
    }

    /**
      * Clears the value of the 'attributes' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearAttributes() {
      attributes = null;
      attributesBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration' field.
      * @return The value.
      */
    public java.lang.Long getDuration() {
      return duration;
    }

    /**
      * Sets the value of the 'duration' field.
      * @param value The value of 'duration'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setDuration(java.lang.Long value) {
      validate(fields()[6], value);
      this.duration = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'duration' field has been set.
      * @return True if the 'duration' field has been set, false otherwise.
      */
    public boolean hasDuration() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'duration' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearDuration() {
      duration = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionStartTime' field.
      * @return The value.
      */
    public java.lang.Long getSessionStartTime() {
      return sessionStartTime;
    }

    /**
      * Sets the value of the 'sessionStartTime' field.
      * @param value The value of 'sessionStartTime'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setSessionStartTime(java.lang.Long value) {
      validate(fields()[7], value);
      this.sessionStartTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionStartTime' field has been set.
      * @return True if the 'sessionStartTime' field has been set, false otherwise.
      */
    public boolean hasSessionStartTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sessionStartTime' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearSessionStartTime() {
      sessionStartTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'speedBand' field.
      * @return The value.
      */
    public java.lang.String getSpeedBand() {
      return speedBand;
    }

    /**
      * Sets the value of the 'speedBand' field.
      * @param value The value of 'speedBand'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setSpeedBand(java.lang.String value) {
      validate(fields()[8], value);
      this.speedBand = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'speedBand' field has been set.
      * @return True if the 'speedBand' field has been set, false otherwise.
      */
    public boolean hasSpeedBand() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'speedBand' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearSpeedBand() {
      speedBand = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'activeAlarms' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getActiveAlarms() {
      return activeAlarms;
    }

    /**
      * Sets the value of the 'activeAlarms' field.
      * @param value The value of 'activeAlarms'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setActiveAlarms(java.util.List<java.lang.String> value) {
      validate(fields()[9], value);
      this.activeAlarms = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'activeAlarms' field has been set.
      * @return True if the 'activeAlarms' field has been set, false otherwise.
      */
    public boolean hasActiveAlarms() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'activeAlarms' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearActiveAlarms() {
      activeAlarms = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setSpeed(java.lang.Double value) {
      validate(fields()[10], value);
      this.speed = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearSpeed() {
      speed = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'forwardReasons' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getForwardReasons() {
      return forwardReasons;
    }

    /**
      * Sets the value of the 'forwardReasons' field.
      * @param value The value of 'forwardReasons'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setForwardReasons(java.util.List<java.lang.String> value) {
      validate(fields()[11], value);
      this.forwardReasons = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'forwardReasons' field has been set.
      * @return True if the 'forwardReasons' field has been set, false otherwise.
      */
    public boolean hasForwardReasons() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'forwardReasons' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearForwardReasons() {
      forwardReasons = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'protocol' field.
      * @return The value.
      */
    public java.lang.String getProtocol() {
      return protocol;
    }

    /**
      * Sets the value of the 'protocol' field.
      * @param value The value of 'protocol'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setProtocol(java.lang.String value) {
      validate(fields()[12], value);
      this.protocol = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'protocol' field has been set.
      * @return True if the 'protocol' field has been set, false otherwise.
      */
    public boolean hasProtocol() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'protocol' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentSpeed' field.
      * @return The value.
      */
    public java.lang.Double getCurrentSpeed() {
      return currentSpeed;
    }

    /**
      * Sets the value of the 'currentSpeed' field.
      * @param value The value of 'currentSpeed'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setCurrentSpeed(java.lang.Double value) {
      validate(fields()[13], value);
      this.currentSpeed = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'currentSpeed' field has been set.
      * @return True if the 'currentSpeed' field has been set, false otherwise.
      */
    public boolean hasCurrentSpeed() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'currentSpeed' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearCurrentSpeed() {
      currentSpeed = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setVehicleId(java.lang.String value) {
      validate(fields()[14], value);
      this.vehicleId = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentLocation' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getCurrentLocation() {
      return currentLocation;
    }

    /**
      * Sets the value of the 'currentLocation' field.
      * @param value The value of 'currentLocation'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setCurrentLocation(com.fretron.Model.LitePosition value) {
      validate(fields()[15], value);
      this.currentLocationBuilder = null;
      this.currentLocation = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'currentLocation' field has been set.
      * @return True if the 'currentLocation' field has been set, false otherwise.
      */
    public boolean hasCurrentLocation() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'currentLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getCurrentLocationBuilder() {
      if (currentLocationBuilder == null) {
        if (hasCurrentLocation()) {
          setCurrentLocationBuilder(com.fretron.Model.LitePosition.newBuilder(currentLocation));
        } else {
          setCurrentLocationBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return currentLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'currentLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.DeviceConnectionState.Builder setCurrentLocationBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearCurrentLocation();
      currentLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currentLocation' field has an active Builder instance
     * @return True if the 'currentLocation' field has an active Builder instance
     */
    public boolean hasCurrentLocationBuilder() {
      return currentLocationBuilder != null;
    }

    /**
      * Clears the value of the 'currentLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearCurrentLocation() {
      currentLocation = null;
      currentLocationBuilder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'odometer' field.
      * @return The value.
      */
    public com.fretron.Model.Odometer getOdometer() {
      return odometer;
    }

    /**
      * Sets the value of the 'odometer' field.
      * @param value The value of 'odometer'.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder setOdometer(com.fretron.Model.Odometer value) {
      validate(fields()[16], value);
      this.odometerBuilder = null;
      this.odometer = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'odometer' field has been set.
      * @return True if the 'odometer' field has been set, false otherwise.
      */
    public boolean hasOdometer() {
      return fieldSetFlags()[16];
    }

    /**
     * Gets the Builder instance for the 'odometer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Odometer.Builder getOdometerBuilder() {
      if (odometerBuilder == null) {
        if (hasOdometer()) {
          setOdometerBuilder(com.fretron.Model.Odometer.newBuilder(odometer));
        } else {
          setOdometerBuilder(com.fretron.Model.Odometer.newBuilder());
        }
      }
      return odometerBuilder;
    }

    /**
     * Sets the Builder instance for the 'odometer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.DeviceConnectionState.Builder setOdometerBuilder(com.fretron.Model.Odometer.Builder value) {
      clearOdometer();
      odometerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'odometer' field has an active Builder instance
     * @return True if the 'odometer' field has an active Builder instance
     */
    public boolean hasOdometerBuilder() {
      return odometerBuilder != null;
    }

    /**
      * Clears the value of the 'odometer' field.
      * @return This builder.
      */
    public com.fretron.Model.DeviceConnectionState.Builder clearOdometer() {
      odometer = null;
      odometerBuilder = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    public DeviceConnectionState build() {
      try {
        DeviceConnectionState record = new DeviceConnectionState();
        record.imei = fieldSetFlags()[0] ? this.imei : (java.lang.String) defaultValue(fields()[0]);
        record.lastBatteryValue = fieldSetFlags()[1] ? this.lastBatteryValue : (java.lang.String) defaultValue(fields()[1]);
        record.lastLowBattery = fieldSetFlags()[2] ? this.lastLowBattery : (java.lang.Long) defaultValue(fields()[2]);
        record.lastPowerCut = fieldSetFlags()[3] ? this.lastPowerCut : (java.lang.Long) defaultValue(fields()[3]);
        record.time = fieldSetFlags()[4] ? this.time : (java.lang.Long) defaultValue(fields()[4]);
        if (attributesBuilder != null) {
          record.attributes = this.attributesBuilder.build();
        } else {
          record.attributes = fieldSetFlags()[5] ? this.attributes : (com.fretron.Model.Attributes) defaultValue(fields()[5]);
        }
        record.duration = fieldSetFlags()[6] ? this.duration : (java.lang.Long) defaultValue(fields()[6]);
        record.sessionStartTime = fieldSetFlags()[7] ? this.sessionStartTime : (java.lang.Long) defaultValue(fields()[7]);
        record.speedBand = fieldSetFlags()[8] ? this.speedBand : (java.lang.String) defaultValue(fields()[8]);
        record.activeAlarms = fieldSetFlags()[9] ? this.activeAlarms : (java.util.List<java.lang.String>) defaultValue(fields()[9]);
        record.speed = fieldSetFlags()[10] ? this.speed : (java.lang.Double) defaultValue(fields()[10]);
        record.forwardReasons = fieldSetFlags()[11] ? this.forwardReasons : (java.util.List<java.lang.String>) defaultValue(fields()[11]);
        record.protocol = fieldSetFlags()[12] ? this.protocol : (java.lang.String) defaultValue(fields()[12]);
        record.currentSpeed = fieldSetFlags()[13] ? this.currentSpeed : (java.lang.Double) defaultValue(fields()[13]);
        record.vehicleId = fieldSetFlags()[14] ? this.vehicleId : (java.lang.String) defaultValue(fields()[14]);
        if (currentLocationBuilder != null) {
          record.currentLocation = this.currentLocationBuilder.build();
        } else {
          record.currentLocation = fieldSetFlags()[15] ? this.currentLocation : (com.fretron.Model.LitePosition) defaultValue(fields()[15]);
        }
        if (odometerBuilder != null) {
          record.odometer = this.odometerBuilder.build();
        } else {
          record.odometer = fieldSetFlags()[16] ? this.odometer : (com.fretron.Model.Odometer) defaultValue(fields()[16]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
