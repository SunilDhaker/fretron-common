/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VehicleGpsState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2800774756172121845L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VehicleGpsState\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"isManuallyAdded\",\"type\":\"boolean\",\"default\":false},{\"name\":\"isIgnore\",\"type\":\"boolean\",\"default\":false},{\"name\":\"startTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"endTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"startLocation\",\"type\":{\"type\":\"record\",\"name\":\"LitePosition\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"isFillingEnabled\",\"type\":\"boolean\",\"default\":false}]}},{\"name\":\"endLocation\",\"type\":\"LitePosition\"},{\"name\":\"sigmasq\",\"type\":\"double\"},{\"name\":\"mean\",\"type\":\"LitePosition\"},{\"name\":\"totalDistance\",\"type\":\"double\"},{\"name\":\"totalTime\",\"type\":\"long\"},{\"name\":\"averageOfSpeed\",\"type\":\"double\"},{\"name\":\"averageSpeeds\",\"type\":\"double\"},{\"name\":\"numberOfRecord\",\"type\":\"int\"},{\"name\":\"lateArrivedRecordsCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GPSState\",\"symbols\":[\"Stopped\",\"Moving\",\"Overspeeding\",\"Disconnected\",\"Unknown\"]}]},{\"name\":\"encodedPolyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timeAwarePolyline\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TimeAwarePolyline\",\"fields\":[{\"name\":\"polyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"compressedPolyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastPoint\",\"type\":{\"type\":\"record\",\"name\":\"PointAtTime\",\"fields\":[{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"isAssumed\",\"type\":\"boolean\",\"default\":false},{\"name\":\"totalPoints\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"polylineSegments\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TimeAwarePolyline\"}],\"default\":null},{\"name\":\"recalculatedDistance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"odoMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastOdoMeterReading\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"isDisconnected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"eventType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"batteryStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public boolean isManuallyAdded;
  @Deprecated public boolean isIgnore;
  @Deprecated public long startTime;
  @Deprecated public long endTime;
  @Deprecated public com.fretron.Model.LitePosition startLocation;
  @Deprecated public com.fretron.Model.LitePosition endLocation;
  @Deprecated public double sigmasq;
  @Deprecated public com.fretron.Model.LitePosition mean;
  @Deprecated public double totalDistance;
  @Deprecated public long totalTime;
  @Deprecated public double averageOfSpeed;
  @Deprecated public double averageSpeeds;
  @Deprecated public int numberOfRecord;
  @Deprecated public java.lang.Integer lateArrivedRecordsCount;
  @Deprecated public java.lang.String imei;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.lang.String uuid;
  @Deprecated public com.fretron.Model.GPSState state;
  @Deprecated public java.lang.String encodedPolyline;
  @Deprecated public com.fretron.Model.TimeAwarePolyline timeAwarePolyline;
  @Deprecated public java.util.List<com.fretron.Model.TimeAwarePolyline> polylineSegments;
  @Deprecated public java.lang.Double recalculatedDistance;
  @Deprecated public java.lang.Double odoMeter;
  @Deprecated public java.lang.Double lastOdoMeterReading;
  @Deprecated public boolean isDisconnected;
  @Deprecated public java.lang.String eventType;
  @Deprecated public java.lang.String batteryStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VehicleGpsState() {}

  /**
   * All-args constructor.
   * @param isManuallyAdded The new value for isManuallyAdded
   * @param isIgnore The new value for isIgnore
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   * @param startLocation The new value for startLocation
   * @param endLocation The new value for endLocation
   * @param sigmasq The new value for sigmasq
   * @param mean The new value for mean
   * @param totalDistance The new value for totalDistance
   * @param totalTime The new value for totalTime
   * @param averageOfSpeed The new value for averageOfSpeed
   * @param averageSpeeds The new value for averageSpeeds
   * @param numberOfRecord The new value for numberOfRecord
   * @param lateArrivedRecordsCount The new value for lateArrivedRecordsCount
   * @param imei The new value for imei
   * @param vehicleId The new value for vehicleId
   * @param uuid The new value for uuid
   * @param state The new value for state
   * @param encodedPolyline The new value for encodedPolyline
   * @param timeAwarePolyline The new value for timeAwarePolyline
   * @param polylineSegments The new value for polylineSegments
   * @param recalculatedDistance The new value for recalculatedDistance
   * @param odoMeter The new value for odoMeter
   * @param lastOdoMeterReading The new value for lastOdoMeterReading
   * @param isDisconnected The new value for isDisconnected
   * @param eventType The new value for eventType
   * @param batteryStatus The new value for batteryStatus
   */
  public VehicleGpsState(java.lang.Boolean isManuallyAdded, java.lang.Boolean isIgnore, java.lang.Long startTime, java.lang.Long endTime, com.fretron.Model.LitePosition startLocation, com.fretron.Model.LitePosition endLocation, java.lang.Double sigmasq, com.fretron.Model.LitePosition mean, java.lang.Double totalDistance, java.lang.Long totalTime, java.lang.Double averageOfSpeed, java.lang.Double averageSpeeds, java.lang.Integer numberOfRecord, java.lang.Integer lateArrivedRecordsCount, java.lang.String imei, java.lang.String vehicleId, java.lang.String uuid, com.fretron.Model.GPSState state, java.lang.String encodedPolyline, com.fretron.Model.TimeAwarePolyline timeAwarePolyline, java.util.List<com.fretron.Model.TimeAwarePolyline> polylineSegments, java.lang.Double recalculatedDistance, java.lang.Double odoMeter, java.lang.Double lastOdoMeterReading, java.lang.Boolean isDisconnected, java.lang.String eventType, java.lang.String batteryStatus) {
    this.isManuallyAdded = isManuallyAdded;
    this.isIgnore = isIgnore;
    this.startTime = startTime;
    this.endTime = endTime;
    this.startLocation = startLocation;
    this.endLocation = endLocation;
    this.sigmasq = sigmasq;
    this.mean = mean;
    this.totalDistance = totalDistance;
    this.totalTime = totalTime;
    this.averageOfSpeed = averageOfSpeed;
    this.averageSpeeds = averageSpeeds;
    this.numberOfRecord = numberOfRecord;
    this.lateArrivedRecordsCount = lateArrivedRecordsCount;
    this.imei = imei;
    this.vehicleId = vehicleId;
    this.uuid = uuid;
    this.state = state;
    this.encodedPolyline = encodedPolyline;
    this.timeAwarePolyline = timeAwarePolyline;
    this.polylineSegments = polylineSegments;
    this.recalculatedDistance = recalculatedDistance;
    this.odoMeter = odoMeter;
    this.lastOdoMeterReading = lastOdoMeterReading;
    this.isDisconnected = isDisconnected;
    this.eventType = eventType;
    this.batteryStatus = batteryStatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return isManuallyAdded;
    case 1: return isIgnore;
    case 2: return startTime;
    case 3: return endTime;
    case 4: return startLocation;
    case 5: return endLocation;
    case 6: return sigmasq;
    case 7: return mean;
    case 8: return totalDistance;
    case 9: return totalTime;
    case 10: return averageOfSpeed;
    case 11: return averageSpeeds;
    case 12: return numberOfRecord;
    case 13: return lateArrivedRecordsCount;
    case 14: return imei;
    case 15: return vehicleId;
    case 16: return uuid;
    case 17: return state;
    case 18: return encodedPolyline;
    case 19: return timeAwarePolyline;
    case 20: return polylineSegments;
    case 21: return recalculatedDistance;
    case 22: return odoMeter;
    case 23: return lastOdoMeterReading;
    case 24: return isDisconnected;
    case 25: return eventType;
    case 26: return batteryStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: isManuallyAdded = (java.lang.Boolean)value$; break;
    case 1: isIgnore = (java.lang.Boolean)value$; break;
    case 2: startTime = (java.lang.Long)value$; break;
    case 3: endTime = (java.lang.Long)value$; break;
    case 4: startLocation = (com.fretron.Model.LitePosition)value$; break;
    case 5: endLocation = (com.fretron.Model.LitePosition)value$; break;
    case 6: sigmasq = (java.lang.Double)value$; break;
    case 7: mean = (com.fretron.Model.LitePosition)value$; break;
    case 8: totalDistance = (java.lang.Double)value$; break;
    case 9: totalTime = (java.lang.Long)value$; break;
    case 10: averageOfSpeed = (java.lang.Double)value$; break;
    case 11: averageSpeeds = (java.lang.Double)value$; break;
    case 12: numberOfRecord = (java.lang.Integer)value$; break;
    case 13: lateArrivedRecordsCount = (java.lang.Integer)value$; break;
    case 14: imei = (java.lang.String)value$; break;
    case 15: vehicleId = (java.lang.String)value$; break;
    case 16: uuid = (java.lang.String)value$; break;
    case 17: state = (com.fretron.Model.GPSState)value$; break;
    case 18: encodedPolyline = (java.lang.String)value$; break;
    case 19: timeAwarePolyline = (com.fretron.Model.TimeAwarePolyline)value$; break;
    case 20: polylineSegments = (java.util.List<com.fretron.Model.TimeAwarePolyline>)value$; break;
    case 21: recalculatedDistance = (java.lang.Double)value$; break;
    case 22: odoMeter = (java.lang.Double)value$; break;
    case 23: lastOdoMeterReading = (java.lang.Double)value$; break;
    case 24: isDisconnected = (java.lang.Boolean)value$; break;
    case 25: eventType = (java.lang.String)value$; break;
    case 26: batteryStatus = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'isManuallyAdded' field.
   * @return The value of the 'isManuallyAdded' field.
   */
  public java.lang.Boolean getIsManuallyAdded() {
    return isManuallyAdded;
  }

  /**
   * Sets the value of the 'isManuallyAdded' field.
   * @param value the value to set.
   */
  public void setIsManuallyAdded(java.lang.Boolean value) {
    this.isManuallyAdded = value;
  }

  /**
   * Gets the value of the 'isIgnore' field.
   * @return The value of the 'isIgnore' field.
   */
  public java.lang.Boolean getIsIgnore() {
    return isIgnore;
  }

  /**
   * Sets the value of the 'isIgnore' field.
   * @param value the value to set.
   */
  public void setIsIgnore(java.lang.Boolean value) {
    this.isIgnore = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public java.lang.Long getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.Long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public java.lang.Long getEndTime() {
    return endTime;
  }

  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(java.lang.Long value) {
    this.endTime = value;
  }

  /**
   * Gets the value of the 'startLocation' field.
   * @return The value of the 'startLocation' field.
   */
  public com.fretron.Model.LitePosition getStartLocation() {
    return startLocation;
  }

  /**
   * Sets the value of the 'startLocation' field.
   * @param value the value to set.
   */
  public void setStartLocation(com.fretron.Model.LitePosition value) {
    this.startLocation = value;
  }

  /**
   * Gets the value of the 'endLocation' field.
   * @return The value of the 'endLocation' field.
   */
  public com.fretron.Model.LitePosition getEndLocation() {
    return endLocation;
  }

  /**
   * Sets the value of the 'endLocation' field.
   * @param value the value to set.
   */
  public void setEndLocation(com.fretron.Model.LitePosition value) {
    this.endLocation = value;
  }

  /**
   * Gets the value of the 'sigmasq' field.
   * @return The value of the 'sigmasq' field.
   */
  public java.lang.Double getSigmasq() {
    return sigmasq;
  }

  /**
   * Sets the value of the 'sigmasq' field.
   * @param value the value to set.
   */
  public void setSigmasq(java.lang.Double value) {
    this.sigmasq = value;
  }

  /**
   * Gets the value of the 'mean' field.
   * @return The value of the 'mean' field.
   */
  public com.fretron.Model.LitePosition getMean() {
    return mean;
  }

  /**
   * Sets the value of the 'mean' field.
   * @param value the value to set.
   */
  public void setMean(com.fretron.Model.LitePosition value) {
    this.mean = value;
  }

  /**
   * Gets the value of the 'totalDistance' field.
   * @return The value of the 'totalDistance' field.
   */
  public java.lang.Double getTotalDistance() {
    return totalDistance;
  }

  /**
   * Sets the value of the 'totalDistance' field.
   * @param value the value to set.
   */
  public void setTotalDistance(java.lang.Double value) {
    this.totalDistance = value;
  }

  /**
   * Gets the value of the 'totalTime' field.
   * @return The value of the 'totalTime' field.
   */
  public java.lang.Long getTotalTime() {
    return totalTime;
  }

  /**
   * Sets the value of the 'totalTime' field.
   * @param value the value to set.
   */
  public void setTotalTime(java.lang.Long value) {
    this.totalTime = value;
  }

  /**
   * Gets the value of the 'averageOfSpeed' field.
   * @return The value of the 'averageOfSpeed' field.
   */
  public java.lang.Double getAverageOfSpeed() {
    return averageOfSpeed;
  }

  /**
   * Sets the value of the 'averageOfSpeed' field.
   * @param value the value to set.
   */
  public void setAverageOfSpeed(java.lang.Double value) {
    this.averageOfSpeed = value;
  }

  /**
   * Gets the value of the 'averageSpeeds' field.
   * @return The value of the 'averageSpeeds' field.
   */
  public java.lang.Double getAverageSpeeds() {
    return averageSpeeds;
  }

  /**
   * Sets the value of the 'averageSpeeds' field.
   * @param value the value to set.
   */
  public void setAverageSpeeds(java.lang.Double value) {
    this.averageSpeeds = value;
  }

  /**
   * Gets the value of the 'numberOfRecord' field.
   * @return The value of the 'numberOfRecord' field.
   */
  public java.lang.Integer getNumberOfRecord() {
    return numberOfRecord;
  }

  /**
   * Sets the value of the 'numberOfRecord' field.
   * @param value the value to set.
   */
  public void setNumberOfRecord(java.lang.Integer value) {
    this.numberOfRecord = value;
  }

  /**
   * Gets the value of the 'lateArrivedRecordsCount' field.
   * @return The value of the 'lateArrivedRecordsCount' field.
   */
  public java.lang.Integer getLateArrivedRecordsCount() {
    return lateArrivedRecordsCount;
  }

  /**
   * Sets the value of the 'lateArrivedRecordsCount' field.
   * @param value the value to set.
   */
  public void setLateArrivedRecordsCount(java.lang.Integer value) {
    this.lateArrivedRecordsCount = value;
  }

  /**
   * Gets the value of the 'imei' field.
   * @return The value of the 'imei' field.
   */
  public java.lang.String getImei() {
    return imei;
  }

  /**
   * Sets the value of the 'imei' field.
   * @param value the value to set.
   */
  public void setImei(java.lang.String value) {
    this.imei = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public com.fretron.Model.GPSState getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(com.fretron.Model.GPSState value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'encodedPolyline' field.
   * @return The value of the 'encodedPolyline' field.
   */
  public java.lang.String getEncodedPolyline() {
    return encodedPolyline;
  }

  /**
   * Sets the value of the 'encodedPolyline' field.
   * @param value the value to set.
   */
  public void setEncodedPolyline(java.lang.String value) {
    this.encodedPolyline = value;
  }

  /**
   * Gets the value of the 'timeAwarePolyline' field.
   * @return The value of the 'timeAwarePolyline' field.
   */
  public com.fretron.Model.TimeAwarePolyline getTimeAwarePolyline() {
    return timeAwarePolyline;
  }

  /**
   * Sets the value of the 'timeAwarePolyline' field.
   * @param value the value to set.
   */
  public void setTimeAwarePolyline(com.fretron.Model.TimeAwarePolyline value) {
    this.timeAwarePolyline = value;
  }

  /**
   * Gets the value of the 'polylineSegments' field.
   * @return The value of the 'polylineSegments' field.
   */
  public java.util.List<com.fretron.Model.TimeAwarePolyline> getPolylineSegments() {
    return polylineSegments;
  }

  /**
   * Sets the value of the 'polylineSegments' field.
   * @param value the value to set.
   */
  public void setPolylineSegments(java.util.List<com.fretron.Model.TimeAwarePolyline> value) {
    this.polylineSegments = value;
  }

  /**
   * Gets the value of the 'recalculatedDistance' field.
   * @return The value of the 'recalculatedDistance' field.
   */
  public java.lang.Double getRecalculatedDistance() {
    return recalculatedDistance;
  }

  /**
   * Sets the value of the 'recalculatedDistance' field.
   * @param value the value to set.
   */
  public void setRecalculatedDistance(java.lang.Double value) {
    this.recalculatedDistance = value;
  }

  /**
   * Gets the value of the 'odoMeter' field.
   * @return The value of the 'odoMeter' field.
   */
  public java.lang.Double getOdoMeter() {
    return odoMeter;
  }

  /**
   * Sets the value of the 'odoMeter' field.
   * @param value the value to set.
   */
  public void setOdoMeter(java.lang.Double value) {
    this.odoMeter = value;
  }

  /**
   * Gets the value of the 'lastOdoMeterReading' field.
   * @return The value of the 'lastOdoMeterReading' field.
   */
  public java.lang.Double getLastOdoMeterReading() {
    return lastOdoMeterReading;
  }

  /**
   * Sets the value of the 'lastOdoMeterReading' field.
   * @param value the value to set.
   */
  public void setLastOdoMeterReading(java.lang.Double value) {
    this.lastOdoMeterReading = value;
  }

  /**
   * Gets the value of the 'isDisconnected' field.
   * @return The value of the 'isDisconnected' field.
   */
  public java.lang.Boolean getIsDisconnected() {
    return isDisconnected;
  }

  /**
   * Sets the value of the 'isDisconnected' field.
   * @param value the value to set.
   */
  public void setIsDisconnected(java.lang.Boolean value) {
    this.isDisconnected = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.String getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'batteryStatus' field.
   * @return The value of the 'batteryStatus' field.
   */
  public java.lang.String getBatteryStatus() {
    return batteryStatus;
  }

  /**
   * Sets the value of the 'batteryStatus' field.
   * @param value the value to set.
   */
  public void setBatteryStatus(java.lang.String value) {
    this.batteryStatus = value;
  }

  /**
   * Creates a new VehicleGpsState RecordBuilder.
   * @return A new VehicleGpsState RecordBuilder
   */
  public static com.fretron.Model.VehicleGpsState.Builder newBuilder() {
    return new com.fretron.Model.VehicleGpsState.Builder();
  }

  /**
   * Creates a new VehicleGpsState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VehicleGpsState RecordBuilder
   */
  public static com.fretron.Model.VehicleGpsState.Builder newBuilder(com.fretron.Model.VehicleGpsState.Builder other) {
    return new com.fretron.Model.VehicleGpsState.Builder(other);
  }

  /**
   * Creates a new VehicleGpsState RecordBuilder by copying an existing VehicleGpsState instance.
   * @param other The existing instance to copy.
   * @return A new VehicleGpsState RecordBuilder
   */
  public static com.fretron.Model.VehicleGpsState.Builder newBuilder(com.fretron.Model.VehicleGpsState other) {
    return new com.fretron.Model.VehicleGpsState.Builder(other);
  }

  /**
   * RecordBuilder for VehicleGpsState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VehicleGpsState>
    implements org.apache.avro.data.RecordBuilder<VehicleGpsState> {

    private boolean isManuallyAdded;
    private boolean isIgnore;
    private long startTime;
    private long endTime;
    private com.fretron.Model.LitePosition startLocation;
    private com.fretron.Model.LitePosition.Builder startLocationBuilder;
    private com.fretron.Model.LitePosition endLocation;
    private com.fretron.Model.LitePosition.Builder endLocationBuilder;
    private double sigmasq;
    private com.fretron.Model.LitePosition mean;
    private com.fretron.Model.LitePosition.Builder meanBuilder;
    private double totalDistance;
    private long totalTime;
    private double averageOfSpeed;
    private double averageSpeeds;
    private int numberOfRecord;
    private java.lang.Integer lateArrivedRecordsCount;
    private java.lang.String imei;
    private java.lang.String vehicleId;
    private java.lang.String uuid;
    private com.fretron.Model.GPSState state;
    private java.lang.String encodedPolyline;
    private com.fretron.Model.TimeAwarePolyline timeAwarePolyline;
    private com.fretron.Model.TimeAwarePolyline.Builder timeAwarePolylineBuilder;
    private java.util.List<com.fretron.Model.TimeAwarePolyline> polylineSegments;
    private java.lang.Double recalculatedDistance;
    private java.lang.Double odoMeter;
    private java.lang.Double lastOdoMeterReading;
    private boolean isDisconnected;
    private java.lang.String eventType;
    private java.lang.String batteryStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.VehicleGpsState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.isManuallyAdded)) {
        this.isManuallyAdded = data().deepCopy(fields()[0].schema(), other.isManuallyAdded);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.isIgnore)) {
        this.isIgnore = data().deepCopy(fields()[1].schema(), other.isIgnore);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startTime)) {
        this.startTime = data().deepCopy(fields()[2].schema(), other.startTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.endTime)) {
        this.endTime = data().deepCopy(fields()[3].schema(), other.endTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.startLocation)) {
        this.startLocation = data().deepCopy(fields()[4].schema(), other.startLocation);
        fieldSetFlags()[4] = true;
      }
      if (other.hasStartLocationBuilder()) {
        this.startLocationBuilder = com.fretron.Model.LitePosition.newBuilder(other.getStartLocationBuilder());
      }
      if (isValidValue(fields()[5], other.endLocation)) {
        this.endLocation = data().deepCopy(fields()[5].schema(), other.endLocation);
        fieldSetFlags()[5] = true;
      }
      if (other.hasEndLocationBuilder()) {
        this.endLocationBuilder = com.fretron.Model.LitePosition.newBuilder(other.getEndLocationBuilder());
      }
      if (isValidValue(fields()[6], other.sigmasq)) {
        this.sigmasq = data().deepCopy(fields()[6].schema(), other.sigmasq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mean)) {
        this.mean = data().deepCopy(fields()[7].schema(), other.mean);
        fieldSetFlags()[7] = true;
      }
      if (other.hasMeanBuilder()) {
        this.meanBuilder = com.fretron.Model.LitePosition.newBuilder(other.getMeanBuilder());
      }
      if (isValidValue(fields()[8], other.totalDistance)) {
        this.totalDistance = data().deepCopy(fields()[8].schema(), other.totalDistance);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.totalTime)) {
        this.totalTime = data().deepCopy(fields()[9].schema(), other.totalTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.averageOfSpeed)) {
        this.averageOfSpeed = data().deepCopy(fields()[10].schema(), other.averageOfSpeed);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.averageSpeeds)) {
        this.averageSpeeds = data().deepCopy(fields()[11].schema(), other.averageSpeeds);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.numberOfRecord)) {
        this.numberOfRecord = data().deepCopy(fields()[12].schema(), other.numberOfRecord);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.lateArrivedRecordsCount)) {
        this.lateArrivedRecordsCount = data().deepCopy(fields()[13].schema(), other.lateArrivedRecordsCount);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.imei)) {
        this.imei = data().deepCopy(fields()[14].schema(), other.imei);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[15].schema(), other.vehicleId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.uuid)) {
        this.uuid = data().deepCopy(fields()[16].schema(), other.uuid);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.state)) {
        this.state = data().deepCopy(fields()[17].schema(), other.state);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.encodedPolyline)) {
        this.encodedPolyline = data().deepCopy(fields()[18].schema(), other.encodedPolyline);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.timeAwarePolyline)) {
        this.timeAwarePolyline = data().deepCopy(fields()[19].schema(), other.timeAwarePolyline);
        fieldSetFlags()[19] = true;
      }
      if (other.hasTimeAwarePolylineBuilder()) {
        this.timeAwarePolylineBuilder = com.fretron.Model.TimeAwarePolyline.newBuilder(other.getTimeAwarePolylineBuilder());
      }
      if (isValidValue(fields()[20], other.polylineSegments)) {
        this.polylineSegments = data().deepCopy(fields()[20].schema(), other.polylineSegments);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.recalculatedDistance)) {
        this.recalculatedDistance = data().deepCopy(fields()[21].schema(), other.recalculatedDistance);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.odoMeter)) {
        this.odoMeter = data().deepCopy(fields()[22].schema(), other.odoMeter);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.lastOdoMeterReading)) {
        this.lastOdoMeterReading = data().deepCopy(fields()[23].schema(), other.lastOdoMeterReading);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.isDisconnected)) {
        this.isDisconnected = data().deepCopy(fields()[24].schema(), other.isDisconnected);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.eventType)) {
        this.eventType = data().deepCopy(fields()[25].schema(), other.eventType);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.batteryStatus)) {
        this.batteryStatus = data().deepCopy(fields()[26].schema(), other.batteryStatus);
        fieldSetFlags()[26] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VehicleGpsState instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.VehicleGpsState other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.isManuallyAdded)) {
        this.isManuallyAdded = data().deepCopy(fields()[0].schema(), other.isManuallyAdded);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.isIgnore)) {
        this.isIgnore = data().deepCopy(fields()[1].schema(), other.isIgnore);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startTime)) {
        this.startTime = data().deepCopy(fields()[2].schema(), other.startTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.endTime)) {
        this.endTime = data().deepCopy(fields()[3].schema(), other.endTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.startLocation)) {
        this.startLocation = data().deepCopy(fields()[4].schema(), other.startLocation);
        fieldSetFlags()[4] = true;
      }
      this.startLocationBuilder = null;
      if (isValidValue(fields()[5], other.endLocation)) {
        this.endLocation = data().deepCopy(fields()[5].schema(), other.endLocation);
        fieldSetFlags()[5] = true;
      }
      this.endLocationBuilder = null;
      if (isValidValue(fields()[6], other.sigmasq)) {
        this.sigmasq = data().deepCopy(fields()[6].schema(), other.sigmasq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mean)) {
        this.mean = data().deepCopy(fields()[7].schema(), other.mean);
        fieldSetFlags()[7] = true;
      }
      this.meanBuilder = null;
      if (isValidValue(fields()[8], other.totalDistance)) {
        this.totalDistance = data().deepCopy(fields()[8].schema(), other.totalDistance);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.totalTime)) {
        this.totalTime = data().deepCopy(fields()[9].schema(), other.totalTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.averageOfSpeed)) {
        this.averageOfSpeed = data().deepCopy(fields()[10].schema(), other.averageOfSpeed);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.averageSpeeds)) {
        this.averageSpeeds = data().deepCopy(fields()[11].schema(), other.averageSpeeds);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.numberOfRecord)) {
        this.numberOfRecord = data().deepCopy(fields()[12].schema(), other.numberOfRecord);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.lateArrivedRecordsCount)) {
        this.lateArrivedRecordsCount = data().deepCopy(fields()[13].schema(), other.lateArrivedRecordsCount);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.imei)) {
        this.imei = data().deepCopy(fields()[14].schema(), other.imei);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[15].schema(), other.vehicleId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.uuid)) {
        this.uuid = data().deepCopy(fields()[16].schema(), other.uuid);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.state)) {
        this.state = data().deepCopy(fields()[17].schema(), other.state);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.encodedPolyline)) {
        this.encodedPolyline = data().deepCopy(fields()[18].schema(), other.encodedPolyline);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.timeAwarePolyline)) {
        this.timeAwarePolyline = data().deepCopy(fields()[19].schema(), other.timeAwarePolyline);
        fieldSetFlags()[19] = true;
      }
      this.timeAwarePolylineBuilder = null;
      if (isValidValue(fields()[20], other.polylineSegments)) {
        this.polylineSegments = data().deepCopy(fields()[20].schema(), other.polylineSegments);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.recalculatedDistance)) {
        this.recalculatedDistance = data().deepCopy(fields()[21].schema(), other.recalculatedDistance);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.odoMeter)) {
        this.odoMeter = data().deepCopy(fields()[22].schema(), other.odoMeter);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.lastOdoMeterReading)) {
        this.lastOdoMeterReading = data().deepCopy(fields()[23].schema(), other.lastOdoMeterReading);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.isDisconnected)) {
        this.isDisconnected = data().deepCopy(fields()[24].schema(), other.isDisconnected);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.eventType)) {
        this.eventType = data().deepCopy(fields()[25].schema(), other.eventType);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.batteryStatus)) {
        this.batteryStatus = data().deepCopy(fields()[26].schema(), other.batteryStatus);
        fieldSetFlags()[26] = true;
      }
    }

    /**
      * Gets the value of the 'isManuallyAdded' field.
      * @return The value.
      */
    public java.lang.Boolean getIsManuallyAdded() {
      return isManuallyAdded;
    }

    /**
      * Sets the value of the 'isManuallyAdded' field.
      * @param value The value of 'isManuallyAdded'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setIsManuallyAdded(boolean value) {
      validate(fields()[0], value);
      this.isManuallyAdded = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'isManuallyAdded' field has been set.
      * @return True if the 'isManuallyAdded' field has been set, false otherwise.
      */
    public boolean hasIsManuallyAdded() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'isManuallyAdded' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearIsManuallyAdded() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'isIgnore' field.
      * @return The value.
      */
    public java.lang.Boolean getIsIgnore() {
      return isIgnore;
    }

    /**
      * Sets the value of the 'isIgnore' field.
      * @param value The value of 'isIgnore'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setIsIgnore(boolean value) {
      validate(fields()[1], value);
      this.isIgnore = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'isIgnore' field has been set.
      * @return True if the 'isIgnore' field has been set, false otherwise.
      */
    public boolean hasIsIgnore() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'isIgnore' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearIsIgnore() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public java.lang.Long getStartTime() {
      return startTime;
    }

    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setStartTime(long value) {
      validate(fields()[2], value);
      this.startTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearStartTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public java.lang.Long getEndTime() {
      return endTime;
    }

    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setEndTime(long value) {
      validate(fields()[3], value);
      this.endTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearEndTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'startLocation' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getStartLocation() {
      return startLocation;
    }

    /**
      * Sets the value of the 'startLocation' field.
      * @param value The value of 'startLocation'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setStartLocation(com.fretron.Model.LitePosition value) {
      validate(fields()[4], value);
      this.startLocationBuilder = null;
      this.startLocation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'startLocation' field has been set.
      * @return True if the 'startLocation' field has been set, false otherwise.
      */
    public boolean hasStartLocation() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'startLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getStartLocationBuilder() {
      if (startLocationBuilder == null) {
        if (hasStartLocation()) {
          setStartLocationBuilder(com.fretron.Model.LitePosition.newBuilder(startLocation));
        } else {
          setStartLocationBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return startLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'startLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.VehicleGpsState.Builder setStartLocationBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearStartLocation();
      startLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'startLocation' field has an active Builder instance
     * @return True if the 'startLocation' field has an active Builder instance
     */
    public boolean hasStartLocationBuilder() {
      return startLocationBuilder != null;
    }

    /**
      * Clears the value of the 'startLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearStartLocation() {
      startLocation = null;
      startLocationBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'endLocation' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getEndLocation() {
      return endLocation;
    }

    /**
      * Sets the value of the 'endLocation' field.
      * @param value The value of 'endLocation'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setEndLocation(com.fretron.Model.LitePosition value) {
      validate(fields()[5], value);
      this.endLocationBuilder = null;
      this.endLocation = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'endLocation' field has been set.
      * @return True if the 'endLocation' field has been set, false otherwise.
      */
    public boolean hasEndLocation() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'endLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getEndLocationBuilder() {
      if (endLocationBuilder == null) {
        if (hasEndLocation()) {
          setEndLocationBuilder(com.fretron.Model.LitePosition.newBuilder(endLocation));
        } else {
          setEndLocationBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return endLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'endLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.VehicleGpsState.Builder setEndLocationBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearEndLocation();
      endLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'endLocation' field has an active Builder instance
     * @return True if the 'endLocation' field has an active Builder instance
     */
    public boolean hasEndLocationBuilder() {
      return endLocationBuilder != null;
    }

    /**
      * Clears the value of the 'endLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearEndLocation() {
      endLocation = null;
      endLocationBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sigmasq' field.
      * @return The value.
      */
    public java.lang.Double getSigmasq() {
      return sigmasq;
    }

    /**
      * Sets the value of the 'sigmasq' field.
      * @param value The value of 'sigmasq'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setSigmasq(double value) {
      validate(fields()[6], value);
      this.sigmasq = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sigmasq' field has been set.
      * @return True if the 'sigmasq' field has been set, false otherwise.
      */
    public boolean hasSigmasq() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sigmasq' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearSigmasq() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mean' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getMean() {
      return mean;
    }

    /**
      * Sets the value of the 'mean' field.
      * @param value The value of 'mean'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setMean(com.fretron.Model.LitePosition value) {
      validate(fields()[7], value);
      this.meanBuilder = null;
      this.mean = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mean' field has been set.
      * @return True if the 'mean' field has been set, false otherwise.
      */
    public boolean hasMean() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'mean' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getMeanBuilder() {
      if (meanBuilder == null) {
        if (hasMean()) {
          setMeanBuilder(com.fretron.Model.LitePosition.newBuilder(mean));
        } else {
          setMeanBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return meanBuilder;
    }

    /**
     * Sets the Builder instance for the 'mean' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.VehicleGpsState.Builder setMeanBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearMean();
      meanBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mean' field has an active Builder instance
     * @return True if the 'mean' field has an active Builder instance
     */
    public boolean hasMeanBuilder() {
      return meanBuilder != null;
    }

    /**
      * Clears the value of the 'mean' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearMean() {
      mean = null;
      meanBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDistance' field.
      * @return The value.
      */
    public java.lang.Double getTotalDistance() {
      return totalDistance;
    }

    /**
      * Sets the value of the 'totalDistance' field.
      * @param value The value of 'totalDistance'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setTotalDistance(double value) {
      validate(fields()[8], value);
      this.totalDistance = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDistance' field has been set.
      * @return True if the 'totalDistance' field has been set, false otherwise.
      */
    public boolean hasTotalDistance() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'totalDistance' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearTotalDistance() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTime' field.
      * @return The value.
      */
    public java.lang.Long getTotalTime() {
      return totalTime;
    }

    /**
      * Sets the value of the 'totalTime' field.
      * @param value The value of 'totalTime'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setTotalTime(long value) {
      validate(fields()[9], value);
      this.totalTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTime' field has been set.
      * @return True if the 'totalTime' field has been set, false otherwise.
      */
    public boolean hasTotalTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'totalTime' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearTotalTime() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageOfSpeed' field.
      * @return The value.
      */
    public java.lang.Double getAverageOfSpeed() {
      return averageOfSpeed;
    }

    /**
      * Sets the value of the 'averageOfSpeed' field.
      * @param value The value of 'averageOfSpeed'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setAverageOfSpeed(double value) {
      validate(fields()[10], value);
      this.averageOfSpeed = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'averageOfSpeed' field has been set.
      * @return True if the 'averageOfSpeed' field has been set, false otherwise.
      */
    public boolean hasAverageOfSpeed() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'averageOfSpeed' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearAverageOfSpeed() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageSpeeds' field.
      * @return The value.
      */
    public java.lang.Double getAverageSpeeds() {
      return averageSpeeds;
    }

    /**
      * Sets the value of the 'averageSpeeds' field.
      * @param value The value of 'averageSpeeds'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setAverageSpeeds(double value) {
      validate(fields()[11], value);
      this.averageSpeeds = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'averageSpeeds' field has been set.
      * @return True if the 'averageSpeeds' field has been set, false otherwise.
      */
    public boolean hasAverageSpeeds() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'averageSpeeds' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearAverageSpeeds() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfRecord' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOfRecord() {
      return numberOfRecord;
    }

    /**
      * Sets the value of the 'numberOfRecord' field.
      * @param value The value of 'numberOfRecord'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setNumberOfRecord(int value) {
      validate(fields()[12], value);
      this.numberOfRecord = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfRecord' field has been set.
      * @return True if the 'numberOfRecord' field has been set, false otherwise.
      */
    public boolean hasNumberOfRecord() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'numberOfRecord' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearNumberOfRecord() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'lateArrivedRecordsCount' field.
      * @return The value.
      */
    public java.lang.Integer getLateArrivedRecordsCount() {
      return lateArrivedRecordsCount;
    }

    /**
      * Sets the value of the 'lateArrivedRecordsCount' field.
      * @param value The value of 'lateArrivedRecordsCount'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setLateArrivedRecordsCount(java.lang.Integer value) {
      validate(fields()[13], value);
      this.lateArrivedRecordsCount = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'lateArrivedRecordsCount' field has been set.
      * @return True if the 'lateArrivedRecordsCount' field has been set, false otherwise.
      */
    public boolean hasLateArrivedRecordsCount() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'lateArrivedRecordsCount' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearLateArrivedRecordsCount() {
      lateArrivedRecordsCount = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'imei' field.
      * @return The value.
      */
    public java.lang.String getImei() {
      return imei;
    }

    /**
      * Sets the value of the 'imei' field.
      * @param value The value of 'imei'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setImei(java.lang.String value) {
      validate(fields()[14], value);
      this.imei = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'imei' field has been set.
      * @return True if the 'imei' field has been set, false otherwise.
      */
    public boolean hasImei() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'imei' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearImei() {
      imei = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setVehicleId(java.lang.String value) {
      validate(fields()[15], value);
      this.vehicleId = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setUuid(java.lang.String value) {
      validate(fields()[16], value);
      this.uuid = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public com.fretron.Model.GPSState getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setState(com.fretron.Model.GPSState value) {
      validate(fields()[17], value);
      this.state = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearState() {
      state = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedPolyline' field.
      * @return The value.
      */
    public java.lang.String getEncodedPolyline() {
      return encodedPolyline;
    }

    /**
      * Sets the value of the 'encodedPolyline' field.
      * @param value The value of 'encodedPolyline'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setEncodedPolyline(java.lang.String value) {
      validate(fields()[18], value);
      this.encodedPolyline = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedPolyline' field has been set.
      * @return True if the 'encodedPolyline' field has been set, false otherwise.
      */
    public boolean hasEncodedPolyline() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'encodedPolyline' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearEncodedPolyline() {
      encodedPolyline = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeAwarePolyline' field.
      * @return The value.
      */
    public com.fretron.Model.TimeAwarePolyline getTimeAwarePolyline() {
      return timeAwarePolyline;
    }

    /**
      * Sets the value of the 'timeAwarePolyline' field.
      * @param value The value of 'timeAwarePolyline'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setTimeAwarePolyline(com.fretron.Model.TimeAwarePolyline value) {
      validate(fields()[19], value);
      this.timeAwarePolylineBuilder = null;
      this.timeAwarePolyline = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'timeAwarePolyline' field has been set.
      * @return True if the 'timeAwarePolyline' field has been set, false otherwise.
      */
    public boolean hasTimeAwarePolyline() {
      return fieldSetFlags()[19];
    }

    /**
     * Gets the Builder instance for the 'timeAwarePolyline' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.TimeAwarePolyline.Builder getTimeAwarePolylineBuilder() {
      if (timeAwarePolylineBuilder == null) {
        if (hasTimeAwarePolyline()) {
          setTimeAwarePolylineBuilder(com.fretron.Model.TimeAwarePolyline.newBuilder(timeAwarePolyline));
        } else {
          setTimeAwarePolylineBuilder(com.fretron.Model.TimeAwarePolyline.newBuilder());
        }
      }
      return timeAwarePolylineBuilder;
    }

    /**
     * Sets the Builder instance for the 'timeAwarePolyline' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.VehicleGpsState.Builder setTimeAwarePolylineBuilder(com.fretron.Model.TimeAwarePolyline.Builder value) {
      clearTimeAwarePolyline();
      timeAwarePolylineBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'timeAwarePolyline' field has an active Builder instance
     * @return True if the 'timeAwarePolyline' field has an active Builder instance
     */
    public boolean hasTimeAwarePolylineBuilder() {
      return timeAwarePolylineBuilder != null;
    }

    /**
      * Clears the value of the 'timeAwarePolyline' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearTimeAwarePolyline() {
      timeAwarePolyline = null;
      timeAwarePolylineBuilder = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'polylineSegments' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.TimeAwarePolyline> getPolylineSegments() {
      return polylineSegments;
    }

    /**
      * Sets the value of the 'polylineSegments' field.
      * @param value The value of 'polylineSegments'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setPolylineSegments(java.util.List<com.fretron.Model.TimeAwarePolyline> value) {
      validate(fields()[20], value);
      this.polylineSegments = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'polylineSegments' field has been set.
      * @return True if the 'polylineSegments' field has been set, false otherwise.
      */
    public boolean hasPolylineSegments() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'polylineSegments' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearPolylineSegments() {
      polylineSegments = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'recalculatedDistance' field.
      * @return The value.
      */
    public java.lang.Double getRecalculatedDistance() {
      return recalculatedDistance;
    }

    /**
      * Sets the value of the 'recalculatedDistance' field.
      * @param value The value of 'recalculatedDistance'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setRecalculatedDistance(java.lang.Double value) {
      validate(fields()[21], value);
      this.recalculatedDistance = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'recalculatedDistance' field has been set.
      * @return True if the 'recalculatedDistance' field has been set, false otherwise.
      */
    public boolean hasRecalculatedDistance() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'recalculatedDistance' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearRecalculatedDistance() {
      recalculatedDistance = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'odoMeter' field.
      * @return The value.
      */
    public java.lang.Double getOdoMeter() {
      return odoMeter;
    }

    /**
      * Sets the value of the 'odoMeter' field.
      * @param value The value of 'odoMeter'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setOdoMeter(java.lang.Double value) {
      validate(fields()[22], value);
      this.odoMeter = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'odoMeter' field has been set.
      * @return True if the 'odoMeter' field has been set, false otherwise.
      */
    public boolean hasOdoMeter() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'odoMeter' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearOdoMeter() {
      odoMeter = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastOdoMeterReading' field.
      * @return The value.
      */
    public java.lang.Double getLastOdoMeterReading() {
      return lastOdoMeterReading;
    }

    /**
      * Sets the value of the 'lastOdoMeterReading' field.
      * @param value The value of 'lastOdoMeterReading'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setLastOdoMeterReading(java.lang.Double value) {
      validate(fields()[23], value);
      this.lastOdoMeterReading = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'lastOdoMeterReading' field has been set.
      * @return True if the 'lastOdoMeterReading' field has been set, false otherwise.
      */
    public boolean hasLastOdoMeterReading() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'lastOdoMeterReading' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearLastOdoMeterReading() {
      lastOdoMeterReading = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'isDisconnected' field.
      * @return The value.
      */
    public java.lang.Boolean getIsDisconnected() {
      return isDisconnected;
    }

    /**
      * Sets the value of the 'isDisconnected' field.
      * @param value The value of 'isDisconnected'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setIsDisconnected(boolean value) {
      validate(fields()[24], value);
      this.isDisconnected = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'isDisconnected' field has been set.
      * @return True if the 'isDisconnected' field has been set, false otherwise.
      */
    public boolean hasIsDisconnected() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'isDisconnected' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearIsDisconnected() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setEventType(java.lang.String value) {
      validate(fields()[25], value);
      this.eventType = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'batteryStatus' field.
      * @return The value.
      */
    public java.lang.String getBatteryStatus() {
      return batteryStatus;
    }

    /**
      * Sets the value of the 'batteryStatus' field.
      * @param value The value of 'batteryStatus'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder setBatteryStatus(java.lang.String value) {
      validate(fields()[26], value);
      this.batteryStatus = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'batteryStatus' field has been set.
      * @return True if the 'batteryStatus' field has been set, false otherwise.
      */
    public boolean hasBatteryStatus() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'batteryStatus' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleGpsState.Builder clearBatteryStatus() {
      batteryStatus = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    @Override
    public VehicleGpsState build() {
      try {
        VehicleGpsState record = new VehicleGpsState();
        record.isManuallyAdded = fieldSetFlags()[0] ? this.isManuallyAdded : (java.lang.Boolean) defaultValue(fields()[0]);
        record.isIgnore = fieldSetFlags()[1] ? this.isIgnore : (java.lang.Boolean) defaultValue(fields()[1]);
        record.startTime = fieldSetFlags()[2] ? this.startTime : (java.lang.Long) defaultValue(fields()[2]);
        record.endTime = fieldSetFlags()[3] ? this.endTime : (java.lang.Long) defaultValue(fields()[3]);
        if (startLocationBuilder != null) {
          record.startLocation = this.startLocationBuilder.build();
        } else {
          record.startLocation = fieldSetFlags()[4] ? this.startLocation : (com.fretron.Model.LitePosition) defaultValue(fields()[4]);
        }
        if (endLocationBuilder != null) {
          record.endLocation = this.endLocationBuilder.build();
        } else {
          record.endLocation = fieldSetFlags()[5] ? this.endLocation : (com.fretron.Model.LitePosition) defaultValue(fields()[5]);
        }
        record.sigmasq = fieldSetFlags()[6] ? this.sigmasq : (java.lang.Double) defaultValue(fields()[6]);
        if (meanBuilder != null) {
          record.mean = this.meanBuilder.build();
        } else {
          record.mean = fieldSetFlags()[7] ? this.mean : (com.fretron.Model.LitePosition) defaultValue(fields()[7]);
        }
        record.totalDistance = fieldSetFlags()[8] ? this.totalDistance : (java.lang.Double) defaultValue(fields()[8]);
        record.totalTime = fieldSetFlags()[9] ? this.totalTime : (java.lang.Long) defaultValue(fields()[9]);
        record.averageOfSpeed = fieldSetFlags()[10] ? this.averageOfSpeed : (java.lang.Double) defaultValue(fields()[10]);
        record.averageSpeeds = fieldSetFlags()[11] ? this.averageSpeeds : (java.lang.Double) defaultValue(fields()[11]);
        record.numberOfRecord = fieldSetFlags()[12] ? this.numberOfRecord : (java.lang.Integer) defaultValue(fields()[12]);
        record.lateArrivedRecordsCount = fieldSetFlags()[13] ? this.lateArrivedRecordsCount : (java.lang.Integer) defaultValue(fields()[13]);
        record.imei = fieldSetFlags()[14] ? this.imei : (java.lang.String) defaultValue(fields()[14]);
        record.vehicleId = fieldSetFlags()[15] ? this.vehicleId : (java.lang.String) defaultValue(fields()[15]);
        record.uuid = fieldSetFlags()[16] ? this.uuid : (java.lang.String) defaultValue(fields()[16]);
        record.state = fieldSetFlags()[17] ? this.state : (com.fretron.Model.GPSState) defaultValue(fields()[17]);
        record.encodedPolyline = fieldSetFlags()[18] ? this.encodedPolyline : (java.lang.String) defaultValue(fields()[18]);
        if (timeAwarePolylineBuilder != null) {
          record.timeAwarePolyline = this.timeAwarePolylineBuilder.build();
        } else {
          record.timeAwarePolyline = fieldSetFlags()[19] ? this.timeAwarePolyline : (com.fretron.Model.TimeAwarePolyline) defaultValue(fields()[19]);
        }
        record.polylineSegments = fieldSetFlags()[20] ? this.polylineSegments : (java.util.List<com.fretron.Model.TimeAwarePolyline>) defaultValue(fields()[20]);
        record.recalculatedDistance = fieldSetFlags()[21] ? this.recalculatedDistance : (java.lang.Double) defaultValue(fields()[21]);
        record.odoMeter = fieldSetFlags()[22] ? this.odoMeter : (java.lang.Double) defaultValue(fields()[22]);
        record.lastOdoMeterReading = fieldSetFlags()[23] ? this.lastOdoMeterReading : (java.lang.Double) defaultValue(fields()[23]);
        record.isDisconnected = fieldSetFlags()[24] ? this.isDisconnected : (java.lang.Boolean) defaultValue(fields()[24]);
        record.eventType = fieldSetFlags()[25] ? this.eventType : (java.lang.String) defaultValue(fields()[25]);
        record.batteryStatus = fieldSetFlags()[26] ? this.batteryStatus : (java.lang.String) defaultValue(fields()[26]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
