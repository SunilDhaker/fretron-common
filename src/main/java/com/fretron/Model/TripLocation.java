/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TripLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3409292299537332414L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TripLocation\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"freightLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FreightLocation\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"geofence\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geofence\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundry\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Circle\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"radius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GeofenceType\",\"symbols\":[\"Proximity\",\"Polygon\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"favouriteOf\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"FreightLocType\",\"symbols\":[\"Private\",\"Public\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"fromTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"tillTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"firstGpsLogId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastGpsLogId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ignoredVehicleGpsLogs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.FreightLocation freightLocation;
  @Deprecated public java.lang.Long fromTime;
  @Deprecated public java.lang.Long tillTime;
  @Deprecated public java.lang.String firstGpsLogId;
  @Deprecated public java.lang.String lastGpsLogId;
  @Deprecated public java.util.List<java.lang.String> ignoredVehicleGpsLogs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TripLocation() {}

  /**
   * All-args constructor.
   * @param freightLocation The new value for freightLocation
   * @param fromTime The new value for fromTime
   * @param tillTime The new value for tillTime
   * @param firstGpsLogId The new value for firstGpsLogId
   * @param lastGpsLogId The new value for lastGpsLogId
   * @param ignoredVehicleGpsLogs The new value for ignoredVehicleGpsLogs
   */
  public TripLocation(com.fretron.Model.FreightLocation freightLocation, java.lang.Long fromTime, java.lang.Long tillTime, java.lang.String firstGpsLogId, java.lang.String lastGpsLogId, java.util.List<java.lang.String> ignoredVehicleGpsLogs) {
    this.freightLocation = freightLocation;
    this.fromTime = fromTime;
    this.tillTime = tillTime;
    this.firstGpsLogId = firstGpsLogId;
    this.lastGpsLogId = lastGpsLogId;
    this.ignoredVehicleGpsLogs = ignoredVehicleGpsLogs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return freightLocation;
    case 1: return fromTime;
    case 2: return tillTime;
    case 3: return firstGpsLogId;
    case 4: return lastGpsLogId;
    case 5: return ignoredVehicleGpsLogs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: freightLocation = (com.fretron.Model.FreightLocation)value$; break;
    case 1: fromTime = (java.lang.Long)value$; break;
    case 2: tillTime = (java.lang.Long)value$; break;
    case 3: firstGpsLogId = (java.lang.String)value$; break;
    case 4: lastGpsLogId = (java.lang.String)value$; break;
    case 5: ignoredVehicleGpsLogs = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'freightLocation' field.
   * @return The value of the 'freightLocation' field.
   */
  public com.fretron.Model.FreightLocation getFreightLocation() {
    return freightLocation;
  }

  /**
   * Sets the value of the 'freightLocation' field.
   * @param value the value to set.
   */
  public void setFreightLocation(com.fretron.Model.FreightLocation value) {
    this.freightLocation = value;
  }

  /**
   * Gets the value of the 'fromTime' field.
   * @return The value of the 'fromTime' field.
   */
  public java.lang.Long getFromTime() {
    return fromTime;
  }

  /**
   * Sets the value of the 'fromTime' field.
   * @param value the value to set.
   */
  public void setFromTime(java.lang.Long value) {
    this.fromTime = value;
  }

  /**
   * Gets the value of the 'tillTime' field.
   * @return The value of the 'tillTime' field.
   */
  public java.lang.Long getTillTime() {
    return tillTime;
  }

  /**
   * Sets the value of the 'tillTime' field.
   * @param value the value to set.
   */
  public void setTillTime(java.lang.Long value) {
    this.tillTime = value;
  }

  /**
   * Gets the value of the 'firstGpsLogId' field.
   * @return The value of the 'firstGpsLogId' field.
   */
  public java.lang.String getFirstGpsLogId() {
    return firstGpsLogId;
  }

  /**
   * Sets the value of the 'firstGpsLogId' field.
   * @param value the value to set.
   */
  public void setFirstGpsLogId(java.lang.String value) {
    this.firstGpsLogId = value;
  }

  /**
   * Gets the value of the 'lastGpsLogId' field.
   * @return The value of the 'lastGpsLogId' field.
   */
  public java.lang.String getLastGpsLogId() {
    return lastGpsLogId;
  }

  /**
   * Sets the value of the 'lastGpsLogId' field.
   * @param value the value to set.
   */
  public void setLastGpsLogId(java.lang.String value) {
    this.lastGpsLogId = value;
  }

  /**
   * Gets the value of the 'ignoredVehicleGpsLogs' field.
   * @return The value of the 'ignoredVehicleGpsLogs' field.
   */
  public java.util.List<java.lang.String> getIgnoredVehicleGpsLogs() {
    return ignoredVehicleGpsLogs;
  }

  /**
   * Sets the value of the 'ignoredVehicleGpsLogs' field.
   * @param value the value to set.
   */
  public void setIgnoredVehicleGpsLogs(java.util.List<java.lang.String> value) {
    this.ignoredVehicleGpsLogs = value;
  }

  /**
   * Creates a new TripLocation RecordBuilder.
   * @return A new TripLocation RecordBuilder
   */
  public static com.fretron.Model.TripLocation.Builder newBuilder() {
    return new com.fretron.Model.TripLocation.Builder();
  }

  /**
   * Creates a new TripLocation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TripLocation RecordBuilder
   */
  public static com.fretron.Model.TripLocation.Builder newBuilder(com.fretron.Model.TripLocation.Builder other) {
    return new com.fretron.Model.TripLocation.Builder(other);
  }

  /**
   * Creates a new TripLocation RecordBuilder by copying an existing TripLocation instance.
   * @param other The existing instance to copy.
   * @return A new TripLocation RecordBuilder
   */
  public static com.fretron.Model.TripLocation.Builder newBuilder(com.fretron.Model.TripLocation other) {
    return new com.fretron.Model.TripLocation.Builder(other);
  }

  /**
   * RecordBuilder for TripLocation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TripLocation>
    implements org.apache.avro.data.RecordBuilder<TripLocation> {

    private com.fretron.Model.FreightLocation freightLocation;
    private com.fretron.Model.FreightLocation.Builder freightLocationBuilder;
    private java.lang.Long fromTime;
    private java.lang.Long tillTime;
    private java.lang.String firstGpsLogId;
    private java.lang.String lastGpsLogId;
    private java.util.List<java.lang.String> ignoredVehicleGpsLogs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.TripLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.freightLocation)) {
        this.freightLocation = data().deepCopy(fields()[0].schema(), other.freightLocation);
        fieldSetFlags()[0] = true;
      }
      if (other.hasFreightLocationBuilder()) {
        this.freightLocationBuilder = com.fretron.Model.FreightLocation.newBuilder(other.getFreightLocationBuilder());
      }
      if (isValidValue(fields()[1], other.fromTime)) {
        this.fromTime = data().deepCopy(fields()[1].schema(), other.fromTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tillTime)) {
        this.tillTime = data().deepCopy(fields()[2].schema(), other.tillTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.firstGpsLogId)) {
        this.firstGpsLogId = data().deepCopy(fields()[3].schema(), other.firstGpsLogId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastGpsLogId)) {
        this.lastGpsLogId = data().deepCopy(fields()[4].schema(), other.lastGpsLogId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ignoredVehicleGpsLogs)) {
        this.ignoredVehicleGpsLogs = data().deepCopy(fields()[5].schema(), other.ignoredVehicleGpsLogs);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TripLocation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.TripLocation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.freightLocation)) {
        this.freightLocation = data().deepCopy(fields()[0].schema(), other.freightLocation);
        fieldSetFlags()[0] = true;
      }
      this.freightLocationBuilder = null;
      if (isValidValue(fields()[1], other.fromTime)) {
        this.fromTime = data().deepCopy(fields()[1].schema(), other.fromTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tillTime)) {
        this.tillTime = data().deepCopy(fields()[2].schema(), other.tillTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.firstGpsLogId)) {
        this.firstGpsLogId = data().deepCopy(fields()[3].schema(), other.firstGpsLogId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastGpsLogId)) {
        this.lastGpsLogId = data().deepCopy(fields()[4].schema(), other.lastGpsLogId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ignoredVehicleGpsLogs)) {
        this.ignoredVehicleGpsLogs = data().deepCopy(fields()[5].schema(), other.ignoredVehicleGpsLogs);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'freightLocation' field.
      * @return The value.
      */
    public com.fretron.Model.FreightLocation getFreightLocation() {
      return freightLocation;
    }

    /**
      * Sets the value of the 'freightLocation' field.
      * @param value The value of 'freightLocation'.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder setFreightLocation(com.fretron.Model.FreightLocation value) {
      validate(fields()[0], value);
      this.freightLocationBuilder = null;
      this.freightLocation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'freightLocation' field has been set.
      * @return True if the 'freightLocation' field has been set, false otherwise.
      */
    public boolean hasFreightLocation() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'freightLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.FreightLocation.Builder getFreightLocationBuilder() {
      if (freightLocationBuilder == null) {
        if (hasFreightLocation()) {
          setFreightLocationBuilder(com.fretron.Model.FreightLocation.newBuilder(freightLocation));
        } else {
          setFreightLocationBuilder(com.fretron.Model.FreightLocation.newBuilder());
        }
      }
      return freightLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'freightLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripLocation.Builder setFreightLocationBuilder(com.fretron.Model.FreightLocation.Builder value) {
      clearFreightLocation();
      freightLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'freightLocation' field has an active Builder instance
     * @return True if the 'freightLocation' field has an active Builder instance
     */
    public boolean hasFreightLocationBuilder() {
      return freightLocationBuilder != null;
    }

    /**
      * Clears the value of the 'freightLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder clearFreightLocation() {
      freightLocation = null;
      freightLocationBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromTime' field.
      * @return The value.
      */
    public java.lang.Long getFromTime() {
      return fromTime;
    }

    /**
      * Sets the value of the 'fromTime' field.
      * @param value The value of 'fromTime'.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder setFromTime(java.lang.Long value) {
      validate(fields()[1], value);
      this.fromTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fromTime' field has been set.
      * @return True if the 'fromTime' field has been set, false otherwise.
      */
    public boolean hasFromTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fromTime' field.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder clearFromTime() {
      fromTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tillTime' field.
      * @return The value.
      */
    public java.lang.Long getTillTime() {
      return tillTime;
    }

    /**
      * Sets the value of the 'tillTime' field.
      * @param value The value of 'tillTime'.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder setTillTime(java.lang.Long value) {
      validate(fields()[2], value);
      this.tillTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tillTime' field has been set.
      * @return True if the 'tillTime' field has been set, false otherwise.
      */
    public boolean hasTillTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tillTime' field.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder clearTillTime() {
      tillTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstGpsLogId' field.
      * @return The value.
      */
    public java.lang.String getFirstGpsLogId() {
      return firstGpsLogId;
    }

    /**
      * Sets the value of the 'firstGpsLogId' field.
      * @param value The value of 'firstGpsLogId'.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder setFirstGpsLogId(java.lang.String value) {
      validate(fields()[3], value);
      this.firstGpsLogId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'firstGpsLogId' field has been set.
      * @return True if the 'firstGpsLogId' field has been set, false otherwise.
      */
    public boolean hasFirstGpsLogId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'firstGpsLogId' field.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder clearFirstGpsLogId() {
      firstGpsLogId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastGpsLogId' field.
      * @return The value.
      */
    public java.lang.String getLastGpsLogId() {
      return lastGpsLogId;
    }

    /**
      * Sets the value of the 'lastGpsLogId' field.
      * @param value The value of 'lastGpsLogId'.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder setLastGpsLogId(java.lang.String value) {
      validate(fields()[4], value);
      this.lastGpsLogId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lastGpsLogId' field has been set.
      * @return True if the 'lastGpsLogId' field has been set, false otherwise.
      */
    public boolean hasLastGpsLogId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lastGpsLogId' field.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder clearLastGpsLogId() {
      lastGpsLogId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ignoredVehicleGpsLogs' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getIgnoredVehicleGpsLogs() {
      return ignoredVehicleGpsLogs;
    }

    /**
      * Sets the value of the 'ignoredVehicleGpsLogs' field.
      * @param value The value of 'ignoredVehicleGpsLogs'.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder setIgnoredVehicleGpsLogs(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.ignoredVehicleGpsLogs = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ignoredVehicleGpsLogs' field has been set.
      * @return True if the 'ignoredVehicleGpsLogs' field has been set, false otherwise.
      */
    public boolean hasIgnoredVehicleGpsLogs() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ignoredVehicleGpsLogs' field.
      * @return This builder.
      */
    public com.fretron.Model.TripLocation.Builder clearIgnoredVehicleGpsLogs() {
      ignoredVehicleGpsLogs = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public TripLocation build() {
      try {
        TripLocation record = new TripLocation();
        if (freightLocationBuilder != null) {
          record.freightLocation = this.freightLocationBuilder.build();
        } else {
          record.freightLocation = fieldSetFlags()[0] ? this.freightLocation : (com.fretron.Model.FreightLocation) defaultValue(fields()[0]);
        }
        record.fromTime = fieldSetFlags()[1] ? this.fromTime : (java.lang.Long) defaultValue(fields()[1]);
        record.tillTime = fieldSetFlags()[2] ? this.tillTime : (java.lang.Long) defaultValue(fields()[2]);
        record.firstGpsLogId = fieldSetFlags()[3] ? this.firstGpsLogId : (java.lang.String) defaultValue(fields()[3]);
        record.lastGpsLogId = fieldSetFlags()[4] ? this.lastGpsLogId : (java.lang.String) defaultValue(fields()[4]);
        record.ignoredVehicleGpsLogs = fieldSetFlags()[5] ? this.ignoredVehicleGpsLogs : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
