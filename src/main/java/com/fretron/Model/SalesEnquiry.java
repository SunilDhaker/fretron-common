/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SalesEnquiry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5236377018088720771L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SalesEnquiry\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"sourceLoc\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"destination\",\"type\":\"Location\"},{\"name\":\"salesEnquiryID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"EnquiryStatus\",\"symbols\":[\"Pending\",\"Completed\",\"CarriedForward\",\"Canceled\"]}]},{\"name\":\"material\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"offerRate\",\"type\":[\"null\",\"int\"]},{\"name\":\"numberOFLoads\",\"type\":\"int\"},{\"name\":\"endTime\",\"type\":[\"null\",\"long\"]},{\"name\":\"remainingLoad\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.Location sourceLoc;
  @Deprecated public com.fretron.Model.Location destination;
  @Deprecated public java.lang.String salesEnquiryID;
  @Deprecated public com.fretron.Model.EnquiryStatus status;
  @Deprecated public java.lang.String material;
  @Deprecated public java.lang.Integer offerRate;
  @Deprecated public int numberOFLoads;
  @Deprecated public java.lang.Long endTime;
  @Deprecated public int remainingLoad;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SalesEnquiry() {}

  /**
   * All-args constructor.
   * @param sourceLoc The new value for sourceLoc
   * @param destination The new value for destination
   * @param salesEnquiryID The new value for salesEnquiryID
   * @param status The new value for status
   * @param material The new value for material
   * @param offerRate The new value for offerRate
   * @param numberOFLoads The new value for numberOFLoads
   * @param endTime The new value for endTime
   * @param remainingLoad The new value for remainingLoad
   */
  public SalesEnquiry(com.fretron.Model.Location sourceLoc, com.fretron.Model.Location destination, java.lang.String salesEnquiryID, com.fretron.Model.EnquiryStatus status, java.lang.String material, java.lang.Integer offerRate, java.lang.Integer numberOFLoads, java.lang.Long endTime, java.lang.Integer remainingLoad) {
    this.sourceLoc = sourceLoc;
    this.destination = destination;
    this.salesEnquiryID = salesEnquiryID;
    this.status = status;
    this.material = material;
    this.offerRate = offerRate;
    this.numberOFLoads = numberOFLoads;
    this.endTime = endTime;
    this.remainingLoad = remainingLoad;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sourceLoc;
    case 1: return destination;
    case 2: return salesEnquiryID;
    case 3: return status;
    case 4: return material;
    case 5: return offerRate;
    case 6: return numberOFLoads;
    case 7: return endTime;
    case 8: return remainingLoad;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sourceLoc = (com.fretron.Model.Location)value$; break;
    case 1: destination = (com.fretron.Model.Location)value$; break;
    case 2: salesEnquiryID = (java.lang.String)value$; break;
    case 3: status = (com.fretron.Model.EnquiryStatus)value$; break;
    case 4: material = (java.lang.String)value$; break;
    case 5: offerRate = (java.lang.Integer)value$; break;
    case 6: numberOFLoads = (java.lang.Integer)value$; break;
    case 7: endTime = (java.lang.Long)value$; break;
    case 8: remainingLoad = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sourceLoc' field.
   * @return The value of the 'sourceLoc' field.
   */
  public com.fretron.Model.Location getSourceLoc() {
    return sourceLoc;
  }

  /**
   * Sets the value of the 'sourceLoc' field.
   * @param value the value to set.
   */
  public void setSourceLoc(com.fretron.Model.Location value) {
    this.sourceLoc = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public com.fretron.Model.Location getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(com.fretron.Model.Location value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'salesEnquiryID' field.
   * @return The value of the 'salesEnquiryID' field.
   */
  public java.lang.String getSalesEnquiryID() {
    return salesEnquiryID;
  }

  /**
   * Sets the value of the 'salesEnquiryID' field.
   * @param value the value to set.
   */
  public void setSalesEnquiryID(java.lang.String value) {
    this.salesEnquiryID = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.fretron.Model.EnquiryStatus getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.fretron.Model.EnquiryStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'material' field.
   * @return The value of the 'material' field.
   */
  public java.lang.String getMaterial() {
    return material;
  }

  /**
   * Sets the value of the 'material' field.
   * @param value the value to set.
   */
  public void setMaterial(java.lang.String value) {
    this.material = value;
  }

  /**
   * Gets the value of the 'offerRate' field.
   * @return The value of the 'offerRate' field.
   */
  public java.lang.Integer getOfferRate() {
    return offerRate;
  }

  /**
   * Sets the value of the 'offerRate' field.
   * @param value the value to set.
   */
  public void setOfferRate(java.lang.Integer value) {
    this.offerRate = value;
  }

  /**
   * Gets the value of the 'numberOFLoads' field.
   * @return The value of the 'numberOFLoads' field.
   */
  public java.lang.Integer getNumberOFLoads() {
    return numberOFLoads;
  }

  /**
   * Sets the value of the 'numberOFLoads' field.
   * @param value the value to set.
   */
  public void setNumberOFLoads(java.lang.Integer value) {
    this.numberOFLoads = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public java.lang.Long getEndTime() {
    return endTime;
  }

  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(java.lang.Long value) {
    this.endTime = value;
  }

  /**
   * Gets the value of the 'remainingLoad' field.
   * @return The value of the 'remainingLoad' field.
   */
  public java.lang.Integer getRemainingLoad() {
    return remainingLoad;
  }

  /**
   * Sets the value of the 'remainingLoad' field.
   * @param value the value to set.
   */
  public void setRemainingLoad(java.lang.Integer value) {
    this.remainingLoad = value;
  }

  /**
   * Creates a new SalesEnquiry RecordBuilder.
   * @return A new SalesEnquiry RecordBuilder
   */
  public static com.fretron.Model.SalesEnquiry.Builder newBuilder() {
    return new com.fretron.Model.SalesEnquiry.Builder();
  }

  /**
   * Creates a new SalesEnquiry RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SalesEnquiry RecordBuilder
   */
  public static com.fretron.Model.SalesEnquiry.Builder newBuilder(com.fretron.Model.SalesEnquiry.Builder other) {
    return new com.fretron.Model.SalesEnquiry.Builder(other);
  }

  /**
   * Creates a new SalesEnquiry RecordBuilder by copying an existing SalesEnquiry instance.
   * @param other The existing instance to copy.
   * @return A new SalesEnquiry RecordBuilder
   */
  public static com.fretron.Model.SalesEnquiry.Builder newBuilder(com.fretron.Model.SalesEnquiry other) {
    return new com.fretron.Model.SalesEnquiry.Builder(other);
  }

  /**
   * RecordBuilder for SalesEnquiry instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SalesEnquiry>
    implements org.apache.avro.data.RecordBuilder<SalesEnquiry> {

    private com.fretron.Model.Location sourceLoc;
    private com.fretron.Model.Location.Builder sourceLocBuilder;
    private com.fretron.Model.Location destination;
    private com.fretron.Model.Location.Builder destinationBuilder;
    private java.lang.String salesEnquiryID;
    private com.fretron.Model.EnquiryStatus status;
    private java.lang.String material;
    private java.lang.Integer offerRate;
    private int numberOFLoads;
    private java.lang.Long endTime;
    private int remainingLoad;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.SalesEnquiry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sourceLoc)) {
        this.sourceLoc = data().deepCopy(fields()[0].schema(), other.sourceLoc);
        fieldSetFlags()[0] = true;
      }
      if (other.hasSourceLocBuilder()) {
        this.sourceLocBuilder = com.fretron.Model.Location.newBuilder(other.getSourceLocBuilder());
      }
      if (isValidValue(fields()[1], other.destination)) {
        this.destination = data().deepCopy(fields()[1].schema(), other.destination);
        fieldSetFlags()[1] = true;
      }
      if (other.hasDestinationBuilder()) {
        this.destinationBuilder = com.fretron.Model.Location.newBuilder(other.getDestinationBuilder());
      }
      if (isValidValue(fields()[2], other.salesEnquiryID)) {
        this.salesEnquiryID = data().deepCopy(fields()[2].schema(), other.salesEnquiryID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.material)) {
        this.material = data().deepCopy(fields()[4].schema(), other.material);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.offerRate)) {
        this.offerRate = data().deepCopy(fields()[5].schema(), other.offerRate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.numberOFLoads)) {
        this.numberOFLoads = data().deepCopy(fields()[6].schema(), other.numberOFLoads);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.endTime)) {
        this.endTime = data().deepCopy(fields()[7].schema(), other.endTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.remainingLoad)) {
        this.remainingLoad = data().deepCopy(fields()[8].schema(), other.remainingLoad);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SalesEnquiry instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.SalesEnquiry other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sourceLoc)) {
        this.sourceLoc = data().deepCopy(fields()[0].schema(), other.sourceLoc);
        fieldSetFlags()[0] = true;
      }
      this.sourceLocBuilder = null;
      if (isValidValue(fields()[1], other.destination)) {
        this.destination = data().deepCopy(fields()[1].schema(), other.destination);
        fieldSetFlags()[1] = true;
      }
      this.destinationBuilder = null;
      if (isValidValue(fields()[2], other.salesEnquiryID)) {
        this.salesEnquiryID = data().deepCopy(fields()[2].schema(), other.salesEnquiryID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.material)) {
        this.material = data().deepCopy(fields()[4].schema(), other.material);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.offerRate)) {
        this.offerRate = data().deepCopy(fields()[5].schema(), other.offerRate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.numberOFLoads)) {
        this.numberOFLoads = data().deepCopy(fields()[6].schema(), other.numberOFLoads);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.endTime)) {
        this.endTime = data().deepCopy(fields()[7].schema(), other.endTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.remainingLoad)) {
        this.remainingLoad = data().deepCopy(fields()[8].schema(), other.remainingLoad);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'sourceLoc' field.
      * @return The value.
      */
    public com.fretron.Model.Location getSourceLoc() {
      return sourceLoc;
    }

    /**
      * Sets the value of the 'sourceLoc' field.
      * @param value The value of 'sourceLoc'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setSourceLoc(com.fretron.Model.Location value) {
      validate(fields()[0], value);
      this.sourceLocBuilder = null;
      this.sourceLoc = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceLoc' field has been set.
      * @return True if the 'sourceLoc' field has been set, false otherwise.
      */
    public boolean hasSourceLoc() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'sourceLoc' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Location.Builder getSourceLocBuilder() {
      if (sourceLocBuilder == null) {
        if (hasSourceLoc()) {
          setSourceLocBuilder(com.fretron.Model.Location.newBuilder(sourceLoc));
        } else {
          setSourceLocBuilder(com.fretron.Model.Location.newBuilder());
        }
      }
      return sourceLocBuilder;
    }

    /**
     * Sets the Builder instance for the 'sourceLoc' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.SalesEnquiry.Builder setSourceLocBuilder(com.fretron.Model.Location.Builder value) {
      clearSourceLoc();
      sourceLocBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sourceLoc' field has an active Builder instance
     * @return True if the 'sourceLoc' field has an active Builder instance
     */
    public boolean hasSourceLocBuilder() {
      return sourceLocBuilder != null;
    }

    /**
      * Clears the value of the 'sourceLoc' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearSourceLoc() {
      sourceLoc = null;
      sourceLocBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public com.fretron.Model.Location getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setDestination(com.fretron.Model.Location value) {
      validate(fields()[1], value);
      this.destinationBuilder = null;
      this.destination = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'destination' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Location.Builder getDestinationBuilder() {
      if (destinationBuilder == null) {
        if (hasDestination()) {
          setDestinationBuilder(com.fretron.Model.Location.newBuilder(destination));
        } else {
          setDestinationBuilder(com.fretron.Model.Location.newBuilder());
        }
      }
      return destinationBuilder;
    }

    /**
     * Sets the Builder instance for the 'destination' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.SalesEnquiry.Builder setDestinationBuilder(com.fretron.Model.Location.Builder value) {
      clearDestination();
      destinationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'destination' field has an active Builder instance
     * @return True if the 'destination' field has an active Builder instance
     */
    public boolean hasDestinationBuilder() {
      return destinationBuilder != null;
    }

    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearDestination() {
      destination = null;
      destinationBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'salesEnquiryID' field.
      * @return The value.
      */
    public java.lang.String getSalesEnquiryID() {
      return salesEnquiryID;
    }

    /**
      * Sets the value of the 'salesEnquiryID' field.
      * @param value The value of 'salesEnquiryID'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setSalesEnquiryID(java.lang.String value) {
      validate(fields()[2], value);
      this.salesEnquiryID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'salesEnquiryID' field has been set.
      * @return True if the 'salesEnquiryID' field has been set, false otherwise.
      */
    public boolean hasSalesEnquiryID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'salesEnquiryID' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearSalesEnquiryID() {
      salesEnquiryID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.fretron.Model.EnquiryStatus getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setStatus(com.fretron.Model.EnquiryStatus value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'material' field.
      * @return The value.
      */
    public java.lang.String getMaterial() {
      return material;
    }

    /**
      * Sets the value of the 'material' field.
      * @param value The value of 'material'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setMaterial(java.lang.String value) {
      validate(fields()[4], value);
      this.material = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'material' field has been set.
      * @return True if the 'material' field has been set, false otherwise.
      */
    public boolean hasMaterial() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'material' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearMaterial() {
      material = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerRate' field.
      * @return The value.
      */
    public java.lang.Integer getOfferRate() {
      return offerRate;
    }

    /**
      * Sets the value of the 'offerRate' field.
      * @param value The value of 'offerRate'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setOfferRate(java.lang.Integer value) {
      validate(fields()[5], value);
      this.offerRate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'offerRate' field has been set.
      * @return True if the 'offerRate' field has been set, false otherwise.
      */
    public boolean hasOfferRate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'offerRate' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearOfferRate() {
      offerRate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOFLoads' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOFLoads() {
      return numberOFLoads;
    }

    /**
      * Sets the value of the 'numberOFLoads' field.
      * @param value The value of 'numberOFLoads'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setNumberOFLoads(int value) {
      validate(fields()[6], value);
      this.numberOFLoads = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOFLoads' field has been set.
      * @return True if the 'numberOFLoads' field has been set, false otherwise.
      */
    public boolean hasNumberOFLoads() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'numberOFLoads' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearNumberOFLoads() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public java.lang.Long getEndTime() {
      return endTime;
    }

    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setEndTime(java.lang.Long value) {
      validate(fields()[7], value);
      this.endTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearEndTime() {
      endTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'remainingLoad' field.
      * @return The value.
      */
    public java.lang.Integer getRemainingLoad() {
      return remainingLoad;
    }

    /**
      * Sets the value of the 'remainingLoad' field.
      * @param value The value of 'remainingLoad'.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder setRemainingLoad(int value) {
      validate(fields()[8], value);
      this.remainingLoad = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'remainingLoad' field has been set.
      * @return True if the 'remainingLoad' field has been set, false otherwise.
      */
    public boolean hasRemainingLoad() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'remainingLoad' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesEnquiry.Builder clearRemainingLoad() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public SalesEnquiry build() {
      try {
        SalesEnquiry record = new SalesEnquiry();
        if (sourceLocBuilder != null) {
          record.sourceLoc = this.sourceLocBuilder.build();
        } else {
          record.sourceLoc = fieldSetFlags()[0] ? this.sourceLoc : (com.fretron.Model.Location) defaultValue(fields()[0]);
        }
        if (destinationBuilder != null) {
          record.destination = this.destinationBuilder.build();
        } else {
          record.destination = fieldSetFlags()[1] ? this.destination : (com.fretron.Model.Location) defaultValue(fields()[1]);
        }
        record.salesEnquiryID = fieldSetFlags()[2] ? this.salesEnquiryID : (java.lang.String) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (com.fretron.Model.EnquiryStatus) defaultValue(fields()[3]);
        record.material = fieldSetFlags()[4] ? this.material : (java.lang.String) defaultValue(fields()[4]);
        record.offerRate = fieldSetFlags()[5] ? this.offerRate : (java.lang.Integer) defaultValue(fields()[5]);
        record.numberOFLoads = fieldSetFlags()[6] ? this.numberOFLoads : (java.lang.Integer) defaultValue(fields()[6]);
        record.endTime = fieldSetFlags()[7] ? this.endTime : (java.lang.Long) defaultValue(fields()[7]);
        record.remainingLoad = fieldSetFlags()[8] ? this.remainingLoad : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
