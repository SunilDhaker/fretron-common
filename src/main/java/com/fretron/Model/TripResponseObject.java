/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TripResponseObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7181911207341210743L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TripResponseObject\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"latestGpsState\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"VehicleGpsState\",\"fields\":[{\"name\":\"isManuallyAdded\",\"type\":\"boolean\",\"default\":false},{\"name\":\"isIgnore\",\"type\":\"boolean\",\"default\":false},{\"name\":\"startTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"endTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"startLocation\",\"type\":{\"type\":\"record\",\"name\":\"LitePosition\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"isFillingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"odometer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Odometer\",\"fields\":[{\"name\":\"softwareMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastUpdateTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isSoftwareMeterManuallyCalibrated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"lastCalibrationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"hardwareReading\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"hardwareDistance\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}},{\"name\":\"endLocation\",\"type\":\"LitePosition\"},{\"name\":\"sigmasq\",\"type\":\"double\"},{\"name\":\"mean\",\"type\":\"LitePosition\"},{\"name\":\"totalDistance\",\"type\":\"double\"},{\"name\":\"totalTime\",\"type\":\"long\"},{\"name\":\"averageOfSpeed\",\"type\":\"double\"},{\"name\":\"averageSpeeds\",\"type\":\"double\"},{\"name\":\"numberOfRecord\",\"type\":\"int\"},{\"name\":\"lateArrivedRecordsCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GPSState\",\"symbols\":[\"Stopped\",\"Moving\",\"Overspeeding\",\"Disconnected\",\"Unknown\"]}]},{\"name\":\"encodedPolyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timeAwarePolyline\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TimeAwarePolyline\",\"fields\":[{\"name\":\"polyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"compressedPolyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastPoint\",\"type\":{\"type\":\"record\",\"name\":\"PointAtTime\",\"fields\":[{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"isAssumed\",\"type\":\"boolean\",\"default\":false},{\"name\":\"totalPoints\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"polylineSegments\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TimeAwarePolyline\"}],\"default\":null},{\"name\":\"recalculatedDistance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"odoMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastOdoMeterReading\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"isDisconnected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"eventType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"batteryStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastStateOdometer\",\"type\":[\"null\",\"Odometer\"],\"default\":null},{\"name\":\"odometer\",\"type\":[\"null\",\"Odometer\"],\"default\":null},{\"name\":\"clusters\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Properties\",\"fields\":[{\"name\":\"catagory\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"level\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customeFields\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null},{\"name\":\"hasUTurn\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"tripPoints\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TripPoint\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"purpose\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sequenceId\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"place\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Place\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"category\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"center\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"suggestedRadius\",\"type\":\"double\",\"default\":null},{\"name\":\"viewport\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ViewPort\",\"fields\":[{\"name\":\"northeast\",\"type\":[\"null\",\"Location\"],\"default\":null},{\"name\":\"southwest\",\"type\":[\"null\",\"Location\"],\"default\":null}]}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"boundary\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}],\"default\":null}]}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eta\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"remainingDistance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"plannedArrival\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"plannedDeparture\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"actualArrival\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"actualDeparture\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"assosiatedShipmentsId\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}}],\"default\":null}]}],\"default\":null},{\"name\":\"currentTrip\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Trip\",\"fields\":[{\"name\":\"distance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"quantityOfMaterial\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"unitOfQuantity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"driverName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"driverMobNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"remarks\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"origin\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TripLocation\",\"fields\":[{\"name\":\"freightLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FreightLocation\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java",".string\":\"String\"},\"default\":null},{\"name\":\"geofence\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geofence\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"boundry\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Circle\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"radius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GeofenceType\",\"symbols\":[\"Proximity\",\"Polygon\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"favouriteOf\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"FreightLocType\",\"symbols\":[\"Private\",\"Public\"]}],\"default\":null},{\"name\":\"isDeleted\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}],\"default\":null},{\"name\":\"fromTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"tillTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"firstGpsLogId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastGpsLogId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ignoredVehicleGpsLogs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"updatedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"updatedAt\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TripLocation\"}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"tripId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"actualStartTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"actualEndTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"plannedStartTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"plannedEndTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"lane\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Lane\",\"fields\":[{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"FreightLocation\"}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"FreightLocation\"}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"baseSource\",\"type\":[\"null\",\"FreightLocation\"],\"default\":null},{\"name\":\"baseDestination\",\"type\":[\"null\",\"FreightLocation\"],\"default\":null},{\"name\":\"baseMaterial\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"baseRate\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"sourceOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"destinationOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"materialOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"baseTransitDays\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"tripState\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TripState\",\"symbols\":[\"Created\",\"Started\",\"Completed\"]}],\"default\":null},{\"name\":\"deviceImei\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"shipmentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"trackingType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TrackingType\",\"symbols\":[\"Tracker\",\"Trip\",\"Manual\"]}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"expectedDestinations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"FreightLocation\"}],\"default\":null},{\"name\":\"reprocessTill\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"sharedWith\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"liveliness\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isOffTrack\",\"type\":\"boolean\",\"default\":false},{\"name\":\"offTrackSince\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"expectedSystemResolution\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}],\"default\":null},{\"name\":\"nextTrip\",\"type\":[\"null\",\"Trip\"],\"default\":null},{\"name\":\"lastTrip\",\"type\":[\"null\",\"Trip\"],\"default\":null},{\"name\":\"movementLegs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"VehicleGpsState\"}],\"default\":null},{\"name\":\"vts\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"VehicleTripState\",\"fields\":[{\"name\":\"deviceImei\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"VehicleState\",\"symbols\":[\"WaitingForLoad\",\"EnrouteForPickUp\",\"AtPickUpPoint\",\"EnrouteForDestination\",\"AtDestination\"]}],\"default\":null},{\"name\":\"tripId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"startTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"endTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"currentTrackerTrip\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TrackerTrip\",\"fields\":[{\"name\":\"distance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"quantityOfMaterial\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"unitOfQuantity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"driverName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"driverMobNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"remarks\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"origin\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TripLocation\"}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TripLocation\"}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"tripId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"actualStartTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"actualEndTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"plannedStartTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"plannedEndTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"lane\",\"type\":[\"null\",\"Lane\"],\"default\":null},{\"name\":\"tripState\",\"type\":[\"null\",\"TripState\"],\"default\":null},{\"name\":\"deviceImei\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"shipmentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.VehicleGpsState latestGpsState;
  @Deprecated public com.fretron.Model.Trip currentTrip;
  @Deprecated public com.fretron.Model.Trip nextTrip;
  @Deprecated public com.fretron.Model.Trip lastTrip;
  @Deprecated public java.util.List<com.fretron.Model.VehicleGpsState> movementLegs;
  @Deprecated public com.fretron.Model.VehicleTripState vts;
  @Deprecated public com.fretron.Model.TrackerTrip currentTrackerTrip;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TripResponseObject() {}

  /**
   * All-args constructor.
   * @param latestGpsState The new value for latestGpsState
   * @param currentTrip The new value for currentTrip
   * @param nextTrip The new value for nextTrip
   * @param lastTrip The new value for lastTrip
   * @param movementLegs The new value for movementLegs
   * @param vts The new value for vts
   * @param currentTrackerTrip The new value for currentTrackerTrip
   */
  public TripResponseObject(com.fretron.Model.VehicleGpsState latestGpsState, com.fretron.Model.Trip currentTrip, com.fretron.Model.Trip nextTrip, com.fretron.Model.Trip lastTrip, java.util.List<com.fretron.Model.VehicleGpsState> movementLegs, com.fretron.Model.VehicleTripState vts, com.fretron.Model.TrackerTrip currentTrackerTrip) {
    this.latestGpsState = latestGpsState;
    this.currentTrip = currentTrip;
    this.nextTrip = nextTrip;
    this.lastTrip = lastTrip;
    this.movementLegs = movementLegs;
    this.vts = vts;
    this.currentTrackerTrip = currentTrackerTrip;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return latestGpsState;
    case 1: return currentTrip;
    case 2: return nextTrip;
    case 3: return lastTrip;
    case 4: return movementLegs;
    case 5: return vts;
    case 6: return currentTrackerTrip;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: latestGpsState = (com.fretron.Model.VehicleGpsState)value$; break;
    case 1: currentTrip = (com.fretron.Model.Trip)value$; break;
    case 2: nextTrip = (com.fretron.Model.Trip)value$; break;
    case 3: lastTrip = (com.fretron.Model.Trip)value$; break;
    case 4: movementLegs = (java.util.List<com.fretron.Model.VehicleGpsState>)value$; break;
    case 5: vts = (com.fretron.Model.VehicleTripState)value$; break;
    case 6: currentTrackerTrip = (com.fretron.Model.TrackerTrip)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'latestGpsState' field.
   * @return The value of the 'latestGpsState' field.
   */
  public com.fretron.Model.VehicleGpsState getLatestGpsState() {
    return latestGpsState;
  }

  /**
   * Sets the value of the 'latestGpsState' field.
   * @param value the value to set.
   */
  public void setLatestGpsState(com.fretron.Model.VehicleGpsState value) {
    this.latestGpsState = value;
  }

  /**
   * Gets the value of the 'currentTrip' field.
   * @return The value of the 'currentTrip' field.
   */
  public com.fretron.Model.Trip getCurrentTrip() {
    return currentTrip;
  }

  /**
   * Sets the value of the 'currentTrip' field.
   * @param value the value to set.
   */
  public void setCurrentTrip(com.fretron.Model.Trip value) {
    this.currentTrip = value;
  }

  /**
   * Gets the value of the 'nextTrip' field.
   * @return The value of the 'nextTrip' field.
   */
  public com.fretron.Model.Trip getNextTrip() {
    return nextTrip;
  }

  /**
   * Sets the value of the 'nextTrip' field.
   * @param value the value to set.
   */
  public void setNextTrip(com.fretron.Model.Trip value) {
    this.nextTrip = value;
  }

  /**
   * Gets the value of the 'lastTrip' field.
   * @return The value of the 'lastTrip' field.
   */
  public com.fretron.Model.Trip getLastTrip() {
    return lastTrip;
  }

  /**
   * Sets the value of the 'lastTrip' field.
   * @param value the value to set.
   */
  public void setLastTrip(com.fretron.Model.Trip value) {
    this.lastTrip = value;
  }

  /**
   * Gets the value of the 'movementLegs' field.
   * @return The value of the 'movementLegs' field.
   */
  public java.util.List<com.fretron.Model.VehicleGpsState> getMovementLegs() {
    return movementLegs;
  }

  /**
   * Sets the value of the 'movementLegs' field.
   * @param value the value to set.
   */
  public void setMovementLegs(java.util.List<com.fretron.Model.VehicleGpsState> value) {
    this.movementLegs = value;
  }

  /**
   * Gets the value of the 'vts' field.
   * @return The value of the 'vts' field.
   */
  public com.fretron.Model.VehicleTripState getVts() {
    return vts;
  }

  /**
   * Sets the value of the 'vts' field.
   * @param value the value to set.
   */
  public void setVts(com.fretron.Model.VehicleTripState value) {
    this.vts = value;
  }

  /**
   * Gets the value of the 'currentTrackerTrip' field.
   * @return The value of the 'currentTrackerTrip' field.
   */
  public com.fretron.Model.TrackerTrip getCurrentTrackerTrip() {
    return currentTrackerTrip;
  }

  /**
   * Sets the value of the 'currentTrackerTrip' field.
   * @param value the value to set.
   */
  public void setCurrentTrackerTrip(com.fretron.Model.TrackerTrip value) {
    this.currentTrackerTrip = value;
  }

  /**
   * Creates a new TripResponseObject RecordBuilder.
   * @return A new TripResponseObject RecordBuilder
   */
  public static com.fretron.Model.TripResponseObject.Builder newBuilder() {
    return new com.fretron.Model.TripResponseObject.Builder();
  }

  /**
   * Creates a new TripResponseObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TripResponseObject RecordBuilder
   */
  public static com.fretron.Model.TripResponseObject.Builder newBuilder(com.fretron.Model.TripResponseObject.Builder other) {
    return new com.fretron.Model.TripResponseObject.Builder(other);
  }

  /**
   * Creates a new TripResponseObject RecordBuilder by copying an existing TripResponseObject instance.
   * @param other The existing instance to copy.
   * @return A new TripResponseObject RecordBuilder
   */
  public static com.fretron.Model.TripResponseObject.Builder newBuilder(com.fretron.Model.TripResponseObject other) {
    return new com.fretron.Model.TripResponseObject.Builder(other);
  }

  /**
   * RecordBuilder for TripResponseObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TripResponseObject>
    implements org.apache.avro.data.RecordBuilder<TripResponseObject> {

    private com.fretron.Model.VehicleGpsState latestGpsState;
    private com.fretron.Model.VehicleGpsState.Builder latestGpsStateBuilder;
    private com.fretron.Model.Trip currentTrip;
    private com.fretron.Model.Trip.Builder currentTripBuilder;
    private com.fretron.Model.Trip nextTrip;
    private com.fretron.Model.Trip.Builder nextTripBuilder;
    private com.fretron.Model.Trip lastTrip;
    private com.fretron.Model.Trip.Builder lastTripBuilder;
    private java.util.List<com.fretron.Model.VehicleGpsState> movementLegs;
    private com.fretron.Model.VehicleTripState vts;
    private com.fretron.Model.VehicleTripState.Builder vtsBuilder;
    private com.fretron.Model.TrackerTrip currentTrackerTrip;
    private com.fretron.Model.TrackerTrip.Builder currentTrackerTripBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.TripResponseObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.latestGpsState)) {
        this.latestGpsState = data().deepCopy(fields()[0].schema(), other.latestGpsState);
        fieldSetFlags()[0] = true;
      }
      if (other.hasLatestGpsStateBuilder()) {
        this.latestGpsStateBuilder = com.fretron.Model.VehicleGpsState.newBuilder(other.getLatestGpsStateBuilder());
      }
      if (isValidValue(fields()[1], other.currentTrip)) {
        this.currentTrip = data().deepCopy(fields()[1].schema(), other.currentTrip);
        fieldSetFlags()[1] = true;
      }
      if (other.hasCurrentTripBuilder()) {
        this.currentTripBuilder = com.fretron.Model.Trip.newBuilder(other.getCurrentTripBuilder());
      }
      if (isValidValue(fields()[2], other.nextTrip)) {
        this.nextTrip = data().deepCopy(fields()[2].schema(), other.nextTrip);
        fieldSetFlags()[2] = true;
      }
      if (other.hasNextTripBuilder()) {
        this.nextTripBuilder = com.fretron.Model.Trip.newBuilder(other.getNextTripBuilder());
      }
      if (isValidValue(fields()[3], other.lastTrip)) {
        this.lastTrip = data().deepCopy(fields()[3].schema(), other.lastTrip);
        fieldSetFlags()[3] = true;
      }
      if (other.hasLastTripBuilder()) {
        this.lastTripBuilder = com.fretron.Model.Trip.newBuilder(other.getLastTripBuilder());
      }
      if (isValidValue(fields()[4], other.movementLegs)) {
        this.movementLegs = data().deepCopy(fields()[4].schema(), other.movementLegs);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.vts)) {
        this.vts = data().deepCopy(fields()[5].schema(), other.vts);
        fieldSetFlags()[5] = true;
      }
      if (other.hasVtsBuilder()) {
        this.vtsBuilder = com.fretron.Model.VehicleTripState.newBuilder(other.getVtsBuilder());
      }
      if (isValidValue(fields()[6], other.currentTrackerTrip)) {
        this.currentTrackerTrip = data().deepCopy(fields()[6].schema(), other.currentTrackerTrip);
        fieldSetFlags()[6] = true;
      }
      if (other.hasCurrentTrackerTripBuilder()) {
        this.currentTrackerTripBuilder = com.fretron.Model.TrackerTrip.newBuilder(other.getCurrentTrackerTripBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TripResponseObject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.TripResponseObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.latestGpsState)) {
        this.latestGpsState = data().deepCopy(fields()[0].schema(), other.latestGpsState);
        fieldSetFlags()[0] = true;
      }
      this.latestGpsStateBuilder = null;
      if (isValidValue(fields()[1], other.currentTrip)) {
        this.currentTrip = data().deepCopy(fields()[1].schema(), other.currentTrip);
        fieldSetFlags()[1] = true;
      }
      this.currentTripBuilder = null;
      if (isValidValue(fields()[2], other.nextTrip)) {
        this.nextTrip = data().deepCopy(fields()[2].schema(), other.nextTrip);
        fieldSetFlags()[2] = true;
      }
      this.nextTripBuilder = null;
      if (isValidValue(fields()[3], other.lastTrip)) {
        this.lastTrip = data().deepCopy(fields()[3].schema(), other.lastTrip);
        fieldSetFlags()[3] = true;
      }
      this.lastTripBuilder = null;
      if (isValidValue(fields()[4], other.movementLegs)) {
        this.movementLegs = data().deepCopy(fields()[4].schema(), other.movementLegs);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.vts)) {
        this.vts = data().deepCopy(fields()[5].schema(), other.vts);
        fieldSetFlags()[5] = true;
      }
      this.vtsBuilder = null;
      if (isValidValue(fields()[6], other.currentTrackerTrip)) {
        this.currentTrackerTrip = data().deepCopy(fields()[6].schema(), other.currentTrackerTrip);
        fieldSetFlags()[6] = true;
      }
      this.currentTrackerTripBuilder = null;
    }

    /**
      * Gets the value of the 'latestGpsState' field.
      * @return The value.
      */
    public com.fretron.Model.VehicleGpsState getLatestGpsState() {
      return latestGpsState;
    }

    /**
      * Sets the value of the 'latestGpsState' field.
      * @param value The value of 'latestGpsState'.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder setLatestGpsState(com.fretron.Model.VehicleGpsState value) {
      validate(fields()[0], value);
      this.latestGpsStateBuilder = null;
      this.latestGpsState = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'latestGpsState' field has been set.
      * @return True if the 'latestGpsState' field has been set, false otherwise.
      */
    public boolean hasLatestGpsState() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'latestGpsState' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.VehicleGpsState.Builder getLatestGpsStateBuilder() {
      if (latestGpsStateBuilder == null) {
        if (hasLatestGpsState()) {
          setLatestGpsStateBuilder(com.fretron.Model.VehicleGpsState.newBuilder(latestGpsState));
        } else {
          setLatestGpsStateBuilder(com.fretron.Model.VehicleGpsState.newBuilder());
        }
      }
      return latestGpsStateBuilder;
    }

    /**
     * Sets the Builder instance for the 'latestGpsState' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripResponseObject.Builder setLatestGpsStateBuilder(com.fretron.Model.VehicleGpsState.Builder value) {
      clearLatestGpsState();
      latestGpsStateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'latestGpsState' field has an active Builder instance
     * @return True if the 'latestGpsState' field has an active Builder instance
     */
    public boolean hasLatestGpsStateBuilder() {
      return latestGpsStateBuilder != null;
    }

    /**
      * Clears the value of the 'latestGpsState' field.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder clearLatestGpsState() {
      latestGpsState = null;
      latestGpsStateBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentTrip' field.
      * @return The value.
      */
    public com.fretron.Model.Trip getCurrentTrip() {
      return currentTrip;
    }

    /**
      * Sets the value of the 'currentTrip' field.
      * @param value The value of 'currentTrip'.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder setCurrentTrip(com.fretron.Model.Trip value) {
      validate(fields()[1], value);
      this.currentTripBuilder = null;
      this.currentTrip = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currentTrip' field has been set.
      * @return True if the 'currentTrip' field has been set, false otherwise.
      */
    public boolean hasCurrentTrip() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'currentTrip' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Trip.Builder getCurrentTripBuilder() {
      if (currentTripBuilder == null) {
        if (hasCurrentTrip()) {
          setCurrentTripBuilder(com.fretron.Model.Trip.newBuilder(currentTrip));
        } else {
          setCurrentTripBuilder(com.fretron.Model.Trip.newBuilder());
        }
      }
      return currentTripBuilder;
    }

    /**
     * Sets the Builder instance for the 'currentTrip' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripResponseObject.Builder setCurrentTripBuilder(com.fretron.Model.Trip.Builder value) {
      clearCurrentTrip();
      currentTripBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currentTrip' field has an active Builder instance
     * @return True if the 'currentTrip' field has an active Builder instance
     */
    public boolean hasCurrentTripBuilder() {
      return currentTripBuilder != null;
    }

    /**
      * Clears the value of the 'currentTrip' field.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder clearCurrentTrip() {
      currentTrip = null;
      currentTripBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nextTrip' field.
      * @return The value.
      */
    public com.fretron.Model.Trip getNextTrip() {
      return nextTrip;
    }

    /**
      * Sets the value of the 'nextTrip' field.
      * @param value The value of 'nextTrip'.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder setNextTrip(com.fretron.Model.Trip value) {
      validate(fields()[2], value);
      this.nextTripBuilder = null;
      this.nextTrip = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nextTrip' field has been set.
      * @return True if the 'nextTrip' field has been set, false otherwise.
      */
    public boolean hasNextTrip() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'nextTrip' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Trip.Builder getNextTripBuilder() {
      if (nextTripBuilder == null) {
        if (hasNextTrip()) {
          setNextTripBuilder(com.fretron.Model.Trip.newBuilder(nextTrip));
        } else {
          setNextTripBuilder(com.fretron.Model.Trip.newBuilder());
        }
      }
      return nextTripBuilder;
    }

    /**
     * Sets the Builder instance for the 'nextTrip' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripResponseObject.Builder setNextTripBuilder(com.fretron.Model.Trip.Builder value) {
      clearNextTrip();
      nextTripBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'nextTrip' field has an active Builder instance
     * @return True if the 'nextTrip' field has an active Builder instance
     */
    public boolean hasNextTripBuilder() {
      return nextTripBuilder != null;
    }

    /**
      * Clears the value of the 'nextTrip' field.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder clearNextTrip() {
      nextTrip = null;
      nextTripBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastTrip' field.
      * @return The value.
      */
    public com.fretron.Model.Trip getLastTrip() {
      return lastTrip;
    }

    /**
      * Sets the value of the 'lastTrip' field.
      * @param value The value of 'lastTrip'.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder setLastTrip(com.fretron.Model.Trip value) {
      validate(fields()[3], value);
      this.lastTripBuilder = null;
      this.lastTrip = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastTrip' field has been set.
      * @return True if the 'lastTrip' field has been set, false otherwise.
      */
    public boolean hasLastTrip() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'lastTrip' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Trip.Builder getLastTripBuilder() {
      if (lastTripBuilder == null) {
        if (hasLastTrip()) {
          setLastTripBuilder(com.fretron.Model.Trip.newBuilder(lastTrip));
        } else {
          setLastTripBuilder(com.fretron.Model.Trip.newBuilder());
        }
      }
      return lastTripBuilder;
    }

    /**
     * Sets the Builder instance for the 'lastTrip' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripResponseObject.Builder setLastTripBuilder(com.fretron.Model.Trip.Builder value) {
      clearLastTrip();
      lastTripBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lastTrip' field has an active Builder instance
     * @return True if the 'lastTrip' field has an active Builder instance
     */
    public boolean hasLastTripBuilder() {
      return lastTripBuilder != null;
    }

    /**
      * Clears the value of the 'lastTrip' field.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder clearLastTrip() {
      lastTrip = null;
      lastTripBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'movementLegs' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.VehicleGpsState> getMovementLegs() {
      return movementLegs;
    }

    /**
      * Sets the value of the 'movementLegs' field.
      * @param value The value of 'movementLegs'.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder setMovementLegs(java.util.List<com.fretron.Model.VehicleGpsState> value) {
      validate(fields()[4], value);
      this.movementLegs = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'movementLegs' field has been set.
      * @return True if the 'movementLegs' field has been set, false otherwise.
      */
    public boolean hasMovementLegs() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'movementLegs' field.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder clearMovementLegs() {
      movementLegs = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'vts' field.
      * @return The value.
      */
    public com.fretron.Model.VehicleTripState getVts() {
      return vts;
    }

    /**
      * Sets the value of the 'vts' field.
      * @param value The value of 'vts'.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder setVts(com.fretron.Model.VehicleTripState value) {
      validate(fields()[5], value);
      this.vtsBuilder = null;
      this.vts = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'vts' field has been set.
      * @return True if the 'vts' field has been set, false otherwise.
      */
    public boolean hasVts() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'vts' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.VehicleTripState.Builder getVtsBuilder() {
      if (vtsBuilder == null) {
        if (hasVts()) {
          setVtsBuilder(com.fretron.Model.VehicleTripState.newBuilder(vts));
        } else {
          setVtsBuilder(com.fretron.Model.VehicleTripState.newBuilder());
        }
      }
      return vtsBuilder;
    }

    /**
     * Sets the Builder instance for the 'vts' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripResponseObject.Builder setVtsBuilder(com.fretron.Model.VehicleTripState.Builder value) {
      clearVts();
      vtsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'vts' field has an active Builder instance
     * @return True if the 'vts' field has an active Builder instance
     */
    public boolean hasVtsBuilder() {
      return vtsBuilder != null;
    }

    /**
      * Clears the value of the 'vts' field.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder clearVts() {
      vts = null;
      vtsBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentTrackerTrip' field.
      * @return The value.
      */
    public com.fretron.Model.TrackerTrip getCurrentTrackerTrip() {
      return currentTrackerTrip;
    }

    /**
      * Sets the value of the 'currentTrackerTrip' field.
      * @param value The value of 'currentTrackerTrip'.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder setCurrentTrackerTrip(com.fretron.Model.TrackerTrip value) {
      validate(fields()[6], value);
      this.currentTrackerTripBuilder = null;
      this.currentTrackerTrip = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'currentTrackerTrip' field has been set.
      * @return True if the 'currentTrackerTrip' field has been set, false otherwise.
      */
    public boolean hasCurrentTrackerTrip() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'currentTrackerTrip' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.TrackerTrip.Builder getCurrentTrackerTripBuilder() {
      if (currentTrackerTripBuilder == null) {
        if (hasCurrentTrackerTrip()) {
          setCurrentTrackerTripBuilder(com.fretron.Model.TrackerTrip.newBuilder(currentTrackerTrip));
        } else {
          setCurrentTrackerTripBuilder(com.fretron.Model.TrackerTrip.newBuilder());
        }
      }
      return currentTrackerTripBuilder;
    }

    /**
     * Sets the Builder instance for the 'currentTrackerTrip' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripResponseObject.Builder setCurrentTrackerTripBuilder(com.fretron.Model.TrackerTrip.Builder value) {
      clearCurrentTrackerTrip();
      currentTrackerTripBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currentTrackerTrip' field has an active Builder instance
     * @return True if the 'currentTrackerTrip' field has an active Builder instance
     */
    public boolean hasCurrentTrackerTripBuilder() {
      return currentTrackerTripBuilder != null;
    }

    /**
      * Clears the value of the 'currentTrackerTrip' field.
      * @return This builder.
      */
    public com.fretron.Model.TripResponseObject.Builder clearCurrentTrackerTrip() {
      currentTrackerTrip = null;
      currentTrackerTripBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public TripResponseObject build() {
      try {
        TripResponseObject record = new TripResponseObject();
        if (latestGpsStateBuilder != null) {
          record.latestGpsState = this.latestGpsStateBuilder.build();
        } else {
          record.latestGpsState = fieldSetFlags()[0] ? this.latestGpsState : (com.fretron.Model.VehicleGpsState) defaultValue(fields()[0]);
        }
        if (currentTripBuilder != null) {
          record.currentTrip = this.currentTripBuilder.build();
        } else {
          record.currentTrip = fieldSetFlags()[1] ? this.currentTrip : (com.fretron.Model.Trip) defaultValue(fields()[1]);
        }
        if (nextTripBuilder != null) {
          record.nextTrip = this.nextTripBuilder.build();
        } else {
          record.nextTrip = fieldSetFlags()[2] ? this.nextTrip : (com.fretron.Model.Trip) defaultValue(fields()[2]);
        }
        if (lastTripBuilder != null) {
          record.lastTrip = this.lastTripBuilder.build();
        } else {
          record.lastTrip = fieldSetFlags()[3] ? this.lastTrip : (com.fretron.Model.Trip) defaultValue(fields()[3]);
        }
        record.movementLegs = fieldSetFlags()[4] ? this.movementLegs : (java.util.List<com.fretron.Model.VehicleGpsState>) defaultValue(fields()[4]);
        if (vtsBuilder != null) {
          record.vts = this.vtsBuilder.build();
        } else {
          record.vts = fieldSetFlags()[5] ? this.vts : (com.fretron.Model.VehicleTripState) defaultValue(fields()[5]);
        }
        if (currentTrackerTripBuilder != null) {
          record.currentTrackerTrip = this.currentTrackerTripBuilder.build();
        } else {
          record.currentTrackerTrip = fieldSetFlags()[6] ? this.currentTrackerTrip : (com.fretron.Model.TrackerTrip) defaultValue(fields()[6]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
