/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LBSDevice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7820003242910617510L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LBSDevice\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"imei\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"updatedAt\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"lastLocationFetchTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"consentStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LitePosition\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"isFillingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"odometer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Odometer\",\"fields\":[{\"name\":\"softwareMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastUpdateTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isSoftwareMeterManuallyCalibrated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"lastCalibrationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"hardwareReading\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"hardwareDistance\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String imei;
  @Deprecated public java.lang.String userId;
  @Deprecated public java.lang.String orgId;
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.Long createdAt;
  @Deprecated public java.lang.Long updatedAt;
  @Deprecated public java.lang.Long lastLocationFetchTime;
  @Deprecated public java.lang.String consentStatus;
  @Deprecated public com.fretron.Model.LitePosition lastLocation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LBSDevice() {}

  /**
   * All-args constructor.
   * @param imei The new value for imei
   * @param userId The new value for userId
   * @param orgId The new value for orgId
   * @param uuid The new value for uuid
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   * @param lastLocationFetchTime The new value for lastLocationFetchTime
   * @param consentStatus The new value for consentStatus
   * @param lastLocation The new value for lastLocation
   */
  public LBSDevice(java.lang.String imei, java.lang.String userId, java.lang.String orgId, java.lang.String uuid, java.lang.Long createdAt, java.lang.Long updatedAt, java.lang.Long lastLocationFetchTime, java.lang.String consentStatus, com.fretron.Model.LitePosition lastLocation) {
    this.imei = imei;
    this.userId = userId;
    this.orgId = orgId;
    this.uuid = uuid;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.lastLocationFetchTime = lastLocationFetchTime;
    this.consentStatus = consentStatus;
    this.lastLocation = lastLocation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return imei;
    case 1: return userId;
    case 2: return orgId;
    case 3: return uuid;
    case 4: return createdAt;
    case 5: return updatedAt;
    case 6: return lastLocationFetchTime;
    case 7: return consentStatus;
    case 8: return lastLocation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: imei = (java.lang.String)value$; break;
    case 1: userId = (java.lang.String)value$; break;
    case 2: orgId = (java.lang.String)value$; break;
    case 3: uuid = (java.lang.String)value$; break;
    case 4: createdAt = (java.lang.Long)value$; break;
    case 5: updatedAt = (java.lang.Long)value$; break;
    case 6: lastLocationFetchTime = (java.lang.Long)value$; break;
    case 7: consentStatus = (java.lang.String)value$; break;
    case 8: lastLocation = (com.fretron.Model.LitePosition)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'imei' field.
   * @return The value of the 'imei' field.
   */
  public java.lang.String getImei() {
    return imei;
  }

  /**
   * Sets the value of the 'imei' field.
   * @param value the value to set.
   */
  public void setImei(java.lang.String value) {
    this.imei = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.lang.Long getCreatedAt() {
    return createdAt;
  }

  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.Long value) {
    this.createdAt = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.lang.Long getUpdatedAt() {
    return updatedAt;
  }

  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.lang.Long value) {
    this.updatedAt = value;
  }

  /**
   * Gets the value of the 'lastLocationFetchTime' field.
   * @return The value of the 'lastLocationFetchTime' field.
   */
  public java.lang.Long getLastLocationFetchTime() {
    return lastLocationFetchTime;
  }

  /**
   * Sets the value of the 'lastLocationFetchTime' field.
   * @param value the value to set.
   */
  public void setLastLocationFetchTime(java.lang.Long value) {
    this.lastLocationFetchTime = value;
  }

  /**
   * Gets the value of the 'consentStatus' field.
   * @return The value of the 'consentStatus' field.
   */
  public java.lang.String getConsentStatus() {
    return consentStatus;
  }

  /**
   * Sets the value of the 'consentStatus' field.
   * @param value the value to set.
   */
  public void setConsentStatus(java.lang.String value) {
    this.consentStatus = value;
  }

  /**
   * Gets the value of the 'lastLocation' field.
   * @return The value of the 'lastLocation' field.
   */
  public com.fretron.Model.LitePosition getLastLocation() {
    return lastLocation;
  }

  /**
   * Sets the value of the 'lastLocation' field.
   * @param value the value to set.
   */
  public void setLastLocation(com.fretron.Model.LitePosition value) {
    this.lastLocation = value;
  }

  /**
   * Creates a new LBSDevice RecordBuilder.
   * @return A new LBSDevice RecordBuilder
   */
  public static com.fretron.Model.LBSDevice.Builder newBuilder() {
    return new com.fretron.Model.LBSDevice.Builder();
  }

  /**
   * Creates a new LBSDevice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LBSDevice RecordBuilder
   */
  public static com.fretron.Model.LBSDevice.Builder newBuilder(com.fretron.Model.LBSDevice.Builder other) {
    return new com.fretron.Model.LBSDevice.Builder(other);
  }

  /**
   * Creates a new LBSDevice RecordBuilder by copying an existing LBSDevice instance.
   * @param other The existing instance to copy.
   * @return A new LBSDevice RecordBuilder
   */
  public static com.fretron.Model.LBSDevice.Builder newBuilder(com.fretron.Model.LBSDevice other) {
    return new com.fretron.Model.LBSDevice.Builder(other);
  }

  /**
   * RecordBuilder for LBSDevice instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LBSDevice>
    implements org.apache.avro.data.RecordBuilder<LBSDevice> {

    private java.lang.String imei;
    private java.lang.String userId;
    private java.lang.String orgId;
    private java.lang.String uuid;
    private java.lang.Long createdAt;
    private java.lang.Long updatedAt;
    private java.lang.Long lastLocationFetchTime;
    private java.lang.String consentStatus;
    private com.fretron.Model.LitePosition lastLocation;
    private com.fretron.Model.LitePosition.Builder lastLocationBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.LBSDevice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.imei)) {
        this.imei = data().deepCopy(fields()[0].schema(), other.imei);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orgId)) {
        this.orgId = data().deepCopy(fields()[2].schema(), other.orgId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uuid)) {
        this.uuid = data().deepCopy(fields()[3].schema(), other.uuid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[4].schema(), other.createdAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[5].schema(), other.updatedAt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastLocationFetchTime)) {
        this.lastLocationFetchTime = data().deepCopy(fields()[6].schema(), other.lastLocationFetchTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.consentStatus)) {
        this.consentStatus = data().deepCopy(fields()[7].schema(), other.consentStatus);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lastLocation)) {
        this.lastLocation = data().deepCopy(fields()[8].schema(), other.lastLocation);
        fieldSetFlags()[8] = true;
      }
      if (other.hasLastLocationBuilder()) {
        this.lastLocationBuilder = com.fretron.Model.LitePosition.newBuilder(other.getLastLocationBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing LBSDevice instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.LBSDevice other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.imei)) {
        this.imei = data().deepCopy(fields()[0].schema(), other.imei);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orgId)) {
        this.orgId = data().deepCopy(fields()[2].schema(), other.orgId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uuid)) {
        this.uuid = data().deepCopy(fields()[3].schema(), other.uuid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[4].schema(), other.createdAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[5].schema(), other.updatedAt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastLocationFetchTime)) {
        this.lastLocationFetchTime = data().deepCopy(fields()[6].schema(), other.lastLocationFetchTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.consentStatus)) {
        this.consentStatus = data().deepCopy(fields()[7].schema(), other.consentStatus);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lastLocation)) {
        this.lastLocation = data().deepCopy(fields()[8].schema(), other.lastLocation);
        fieldSetFlags()[8] = true;
      }
      this.lastLocationBuilder = null;
    }

    /**
      * Gets the value of the 'imei' field.
      * @return The value.
      */
    public java.lang.String getImei() {
      return imei;
    }

    /**
      * Sets the value of the 'imei' field.
      * @param value The value of 'imei'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setImei(java.lang.String value) {
      validate(fields()[0], value);
      this.imei = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'imei' field has been set.
      * @return True if the 'imei' field has been set, false otherwise.
      */
    public boolean hasImei() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'imei' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearImei() {
      imei = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setOrgId(java.lang.String value) {
      validate(fields()[2], value);
      this.orgId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setUuid(java.lang.String value) {
      validate(fields()[3], value);
      this.uuid = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.lang.Long getCreatedAt() {
      return createdAt;
    }

    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setCreatedAt(java.lang.Long value) {
      validate(fields()[4], value);
      this.createdAt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.lang.Long getUpdatedAt() {
      return updatedAt;
    }

    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setUpdatedAt(java.lang.Long value) {
      validate(fields()[5], value);
      this.updatedAt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastLocationFetchTime' field.
      * @return The value.
      */
    public java.lang.Long getLastLocationFetchTime() {
      return lastLocationFetchTime;
    }

    /**
      * Sets the value of the 'lastLocationFetchTime' field.
      * @param value The value of 'lastLocationFetchTime'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setLastLocationFetchTime(java.lang.Long value) {
      validate(fields()[6], value);
      this.lastLocationFetchTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'lastLocationFetchTime' field has been set.
      * @return True if the 'lastLocationFetchTime' field has been set, false otherwise.
      */
    public boolean hasLastLocationFetchTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'lastLocationFetchTime' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearLastLocationFetchTime() {
      lastLocationFetchTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'consentStatus' field.
      * @return The value.
      */
    public java.lang.String getConsentStatus() {
      return consentStatus;
    }

    /**
      * Sets the value of the 'consentStatus' field.
      * @param value The value of 'consentStatus'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setConsentStatus(java.lang.String value) {
      validate(fields()[7], value);
      this.consentStatus = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'consentStatus' field has been set.
      * @return True if the 'consentStatus' field has been set, false otherwise.
      */
    public boolean hasConsentStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'consentStatus' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearConsentStatus() {
      consentStatus = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastLocation' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getLastLocation() {
      return lastLocation;
    }

    /**
      * Sets the value of the 'lastLocation' field.
      * @param value The value of 'lastLocation'.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder setLastLocation(com.fretron.Model.LitePosition value) {
      validate(fields()[8], value);
      this.lastLocationBuilder = null;
      this.lastLocation = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'lastLocation' field has been set.
      * @return True if the 'lastLocation' field has been set, false otherwise.
      */
    public boolean hasLastLocation() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'lastLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getLastLocationBuilder() {
      if (lastLocationBuilder == null) {
        if (hasLastLocation()) {
          setLastLocationBuilder(com.fretron.Model.LitePosition.newBuilder(lastLocation));
        } else {
          setLastLocationBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return lastLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'lastLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.LBSDevice.Builder setLastLocationBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearLastLocation();
      lastLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lastLocation' field has an active Builder instance
     * @return True if the 'lastLocation' field has an active Builder instance
     */
    public boolean hasLastLocationBuilder() {
      return lastLocationBuilder != null;
    }

    /**
      * Clears the value of the 'lastLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.LBSDevice.Builder clearLastLocation() {
      lastLocation = null;
      lastLocationBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public LBSDevice build() {
      try {
        LBSDevice record = new LBSDevice();
        record.imei = fieldSetFlags()[0] ? this.imei : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        record.orgId = fieldSetFlags()[2] ? this.orgId : (java.lang.String) defaultValue(fields()[2]);
        record.uuid = fieldSetFlags()[3] ? this.uuid : (java.lang.String) defaultValue(fields()[3]);
        record.createdAt = fieldSetFlags()[4] ? this.createdAt : (java.lang.Long) defaultValue(fields()[4]);
        record.updatedAt = fieldSetFlags()[5] ? this.updatedAt : (java.lang.Long) defaultValue(fields()[5]);
        record.lastLocationFetchTime = fieldSetFlags()[6] ? this.lastLocationFetchTime : (java.lang.Long) defaultValue(fields()[6]);
        record.consentStatus = fieldSetFlags()[7] ? this.consentStatus : (java.lang.String) defaultValue(fields()[7]);
        if (lastLocationBuilder != null) {
          record.lastLocation = this.lastLocationBuilder.build();
        } else {
          record.lastLocation = fieldSetFlags()[8] ? this.lastLocation : (com.fretron.Model.LitePosition) defaultValue(fields()[8]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
