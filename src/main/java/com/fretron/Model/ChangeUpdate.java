/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ChangeUpdate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6559296698159995274L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChangeUpdate\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"currentValue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fieldName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastValue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fieldType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String currentValue;
  @Deprecated public java.lang.String fieldName;
  @Deprecated public java.lang.String lastValue;
  @Deprecated public java.lang.String fieldType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChangeUpdate() {}

  /**
   * All-args constructor.
   * @param currentValue The new value for currentValue
   * @param fieldName The new value for fieldName
   * @param lastValue The new value for lastValue
   * @param fieldType The new value for fieldType
   */
  public ChangeUpdate(java.lang.String currentValue, java.lang.String fieldName, java.lang.String lastValue, java.lang.String fieldType) {
    this.currentValue = currentValue;
    this.fieldName = fieldName;
    this.lastValue = lastValue;
    this.fieldType = fieldType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return currentValue;
    case 1: return fieldName;
    case 2: return lastValue;
    case 3: return fieldType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: currentValue = (java.lang.String)value$; break;
    case 1: fieldName = (java.lang.String)value$; break;
    case 2: lastValue = (java.lang.String)value$; break;
    case 3: fieldType = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'currentValue' field.
   * @return The value of the 'currentValue' field.
   */
  public java.lang.String getCurrentValue() {
    return currentValue;
  }

  /**
   * Sets the value of the 'currentValue' field.
   * @param value the value to set.
   */
  public void setCurrentValue(java.lang.String value) {
    this.currentValue = value;
  }

  /**
   * Gets the value of the 'fieldName' field.
   * @return The value of the 'fieldName' field.
   */
  public java.lang.String getFieldName() {
    return fieldName;
  }

  /**
   * Sets the value of the 'fieldName' field.
   * @param value the value to set.
   */
  public void setFieldName(java.lang.String value) {
    this.fieldName = value;
  }

  /**
   * Gets the value of the 'lastValue' field.
   * @return The value of the 'lastValue' field.
   */
  public java.lang.String getLastValue() {
    return lastValue;
  }

  /**
   * Sets the value of the 'lastValue' field.
   * @param value the value to set.
   */
  public void setLastValue(java.lang.String value) {
    this.lastValue = value;
  }

  /**
   * Gets the value of the 'fieldType' field.
   * @return The value of the 'fieldType' field.
   */
  public java.lang.String getFieldType() {
    return fieldType;
  }

  /**
   * Sets the value of the 'fieldType' field.
   * @param value the value to set.
   */
  public void setFieldType(java.lang.String value) {
    this.fieldType = value;
  }

  /**
   * Creates a new ChangeUpdate RecordBuilder.
   * @return A new ChangeUpdate RecordBuilder
   */
  public static com.fretron.Model.ChangeUpdate.Builder newBuilder() {
    return new com.fretron.Model.ChangeUpdate.Builder();
  }

  /**
   * Creates a new ChangeUpdate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChangeUpdate RecordBuilder
   */
  public static com.fretron.Model.ChangeUpdate.Builder newBuilder(com.fretron.Model.ChangeUpdate.Builder other) {
    return new com.fretron.Model.ChangeUpdate.Builder(other);
  }

  /**
   * Creates a new ChangeUpdate RecordBuilder by copying an existing ChangeUpdate instance.
   * @param other The existing instance to copy.
   * @return A new ChangeUpdate RecordBuilder
   */
  public static com.fretron.Model.ChangeUpdate.Builder newBuilder(com.fretron.Model.ChangeUpdate other) {
    return new com.fretron.Model.ChangeUpdate.Builder(other);
  }

  /**
   * RecordBuilder for ChangeUpdate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChangeUpdate>
    implements org.apache.avro.data.RecordBuilder<ChangeUpdate> {

    private java.lang.String currentValue;
    private java.lang.String fieldName;
    private java.lang.String lastValue;
    private java.lang.String fieldType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ChangeUpdate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currentValue)) {
        this.currentValue = data().deepCopy(fields()[0].schema(), other.currentValue);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldName)) {
        this.fieldName = data().deepCopy(fields()[1].schema(), other.fieldName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastValue)) {
        this.lastValue = data().deepCopy(fields()[2].schema(), other.lastValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fieldType)) {
        this.fieldType = data().deepCopy(fields()[3].schema(), other.fieldType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ChangeUpdate instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ChangeUpdate other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.currentValue)) {
        this.currentValue = data().deepCopy(fields()[0].schema(), other.currentValue);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldName)) {
        this.fieldName = data().deepCopy(fields()[1].schema(), other.fieldName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastValue)) {
        this.lastValue = data().deepCopy(fields()[2].schema(), other.lastValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fieldType)) {
        this.fieldType = data().deepCopy(fields()[3].schema(), other.fieldType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'currentValue' field.
      * @return The value.
      */
    public java.lang.String getCurrentValue() {
      return currentValue;
    }

    /**
      * Sets the value of the 'currentValue' field.
      * @param value The value of 'currentValue'.
      * @return This builder.
      */
    public com.fretron.Model.ChangeUpdate.Builder setCurrentValue(java.lang.String value) {
      validate(fields()[0], value);
      this.currentValue = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'currentValue' field has been set.
      * @return True if the 'currentValue' field has been set, false otherwise.
      */
    public boolean hasCurrentValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'currentValue' field.
      * @return This builder.
      */
    public com.fretron.Model.ChangeUpdate.Builder clearCurrentValue() {
      currentValue = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldName' field.
      * @return The value.
      */
    public java.lang.String getFieldName() {
      return fieldName;
    }

    /**
      * Sets the value of the 'fieldName' field.
      * @param value The value of 'fieldName'.
      * @return This builder.
      */
    public com.fretron.Model.ChangeUpdate.Builder setFieldName(java.lang.String value) {
      validate(fields()[1], value);
      this.fieldName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldName' field has been set.
      * @return True if the 'fieldName' field has been set, false otherwise.
      */
    public boolean hasFieldName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fieldName' field.
      * @return This builder.
      */
    public com.fretron.Model.ChangeUpdate.Builder clearFieldName() {
      fieldName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastValue' field.
      * @return The value.
      */
    public java.lang.String getLastValue() {
      return lastValue;
    }

    /**
      * Sets the value of the 'lastValue' field.
      * @param value The value of 'lastValue'.
      * @return This builder.
      */
    public com.fretron.Model.ChangeUpdate.Builder setLastValue(java.lang.String value) {
      validate(fields()[2], value);
      this.lastValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastValue' field has been set.
      * @return True if the 'lastValue' field has been set, false otherwise.
      */
    public boolean hasLastValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastValue' field.
      * @return This builder.
      */
    public com.fretron.Model.ChangeUpdate.Builder clearLastValue() {
      lastValue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldType' field.
      * @return The value.
      */
    public java.lang.String getFieldType() {
      return fieldType;
    }

    /**
      * Sets the value of the 'fieldType' field.
      * @param value The value of 'fieldType'.
      * @return This builder.
      */
    public com.fretron.Model.ChangeUpdate.Builder setFieldType(java.lang.String value) {
      validate(fields()[3], value);
      this.fieldType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldType' field has been set.
      * @return True if the 'fieldType' field has been set, false otherwise.
      */
    public boolean hasFieldType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fieldType' field.
      * @return This builder.
      */
    public com.fretron.Model.ChangeUpdate.Builder clearFieldType() {
      fieldType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ChangeUpdate build() {
      try {
        ChangeUpdate record = new ChangeUpdate();
        record.currentValue = fieldSetFlags()[0] ? this.currentValue : (java.lang.String) defaultValue(fields()[0]);
        record.fieldName = fieldSetFlags()[1] ? this.fieldName : (java.lang.String) defaultValue(fields()[1]);
        record.lastValue = fieldSetFlags()[2] ? this.lastValue : (java.lang.String) defaultValue(fields()[2]);
        record.fieldType = fieldSetFlags()[3] ? this.fieldType : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
