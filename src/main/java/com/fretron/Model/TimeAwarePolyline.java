/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TimeAwarePolyline extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6460764665698385188L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimeAwarePolyline\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"polyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"compressedPolyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastPoint\",\"type\":{\"type\":\"record\",\"name\":\"PointAtTime\",\"fields\":[{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"isAssumed\",\"type\":\"boolean\",\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String polyline;
  @Deprecated public java.lang.String compressedPolyline;
  @Deprecated public com.fretron.Model.PointAtTime lastPoint;
  @Deprecated public boolean isAssumed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TimeAwarePolyline() {}

  /**
   * All-args constructor.
   * @param polyline The new value for polyline
   * @param compressedPolyline The new value for compressedPolyline
   * @param lastPoint The new value for lastPoint
   * @param isAssumed The new value for isAssumed
   */
  public TimeAwarePolyline(java.lang.String polyline, java.lang.String compressedPolyline, com.fretron.Model.PointAtTime lastPoint, java.lang.Boolean isAssumed) {
    this.polyline = polyline;
    this.compressedPolyline = compressedPolyline;
    this.lastPoint = lastPoint;
    this.isAssumed = isAssumed;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return polyline;
    case 1: return compressedPolyline;
    case 2: return lastPoint;
    case 3: return isAssumed;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: polyline = (java.lang.String)value$; break;
    case 1: compressedPolyline = (java.lang.String)value$; break;
    case 2: lastPoint = (com.fretron.Model.PointAtTime)value$; break;
    case 3: isAssumed = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'polyline' field.
   * @return The value of the 'polyline' field.
   */
  public java.lang.String getPolyline() {
    return polyline;
  }

  /**
   * Sets the value of the 'polyline' field.
   * @param value the value to set.
   */
  public void setPolyline(java.lang.String value) {
    this.polyline = value;
  }

  /**
   * Gets the value of the 'compressedPolyline' field.
   * @return The value of the 'compressedPolyline' field.
   */
  public java.lang.String getCompressedPolyline() {
    return compressedPolyline;
  }

  /**
   * Sets the value of the 'compressedPolyline' field.
   * @param value the value to set.
   */
  public void setCompressedPolyline(java.lang.String value) {
    this.compressedPolyline = value;
  }

  /**
   * Gets the value of the 'lastPoint' field.
   * @return The value of the 'lastPoint' field.
   */
  public com.fretron.Model.PointAtTime getLastPoint() {
    return lastPoint;
  }

  /**
   * Sets the value of the 'lastPoint' field.
   * @param value the value to set.
   */
  public void setLastPoint(com.fretron.Model.PointAtTime value) {
    this.lastPoint = value;
  }

  /**
   * Gets the value of the 'isAssumed' field.
   * @return The value of the 'isAssumed' field.
   */
  public java.lang.Boolean getIsAssumed() {
    return isAssumed;
  }

  /**
   * Sets the value of the 'isAssumed' field.
   * @param value the value to set.
   */
  public void setIsAssumed(java.lang.Boolean value) {
    this.isAssumed = value;
  }

  /**
   * Creates a new TimeAwarePolyline RecordBuilder.
   * @return A new TimeAwarePolyline RecordBuilder
   */
  public static com.fretron.Model.TimeAwarePolyline.Builder newBuilder() {
    return new com.fretron.Model.TimeAwarePolyline.Builder();
  }

  /**
   * Creates a new TimeAwarePolyline RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TimeAwarePolyline RecordBuilder
   */
  public static com.fretron.Model.TimeAwarePolyline.Builder newBuilder(com.fretron.Model.TimeAwarePolyline.Builder other) {
    return new com.fretron.Model.TimeAwarePolyline.Builder(other);
  }

  /**
   * Creates a new TimeAwarePolyline RecordBuilder by copying an existing TimeAwarePolyline instance.
   * @param other The existing instance to copy.
   * @return A new TimeAwarePolyline RecordBuilder
   */
  public static com.fretron.Model.TimeAwarePolyline.Builder newBuilder(com.fretron.Model.TimeAwarePolyline other) {
    return new com.fretron.Model.TimeAwarePolyline.Builder(other);
  }

  /**
   * RecordBuilder for TimeAwarePolyline instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimeAwarePolyline>
    implements org.apache.avro.data.RecordBuilder<TimeAwarePolyline> {

    private java.lang.String polyline;
    private java.lang.String compressedPolyline;
    private com.fretron.Model.PointAtTime lastPoint;
    private com.fretron.Model.PointAtTime.Builder lastPointBuilder;
    private boolean isAssumed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.TimeAwarePolyline.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.polyline)) {
        this.polyline = data().deepCopy(fields()[0].schema(), other.polyline);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.compressedPolyline)) {
        this.compressedPolyline = data().deepCopy(fields()[1].schema(), other.compressedPolyline);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastPoint)) {
        this.lastPoint = data().deepCopy(fields()[2].schema(), other.lastPoint);
        fieldSetFlags()[2] = true;
      }
      if (other.hasLastPointBuilder()) {
        this.lastPointBuilder = com.fretron.Model.PointAtTime.newBuilder(other.getLastPointBuilder());
      }
      if (isValidValue(fields()[3], other.isAssumed)) {
        this.isAssumed = data().deepCopy(fields()[3].schema(), other.isAssumed);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TimeAwarePolyline instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.TimeAwarePolyline other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.polyline)) {
        this.polyline = data().deepCopy(fields()[0].schema(), other.polyline);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.compressedPolyline)) {
        this.compressedPolyline = data().deepCopy(fields()[1].schema(), other.compressedPolyline);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastPoint)) {
        this.lastPoint = data().deepCopy(fields()[2].schema(), other.lastPoint);
        fieldSetFlags()[2] = true;
      }
      this.lastPointBuilder = null;
      if (isValidValue(fields()[3], other.isAssumed)) {
        this.isAssumed = data().deepCopy(fields()[3].schema(), other.isAssumed);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'polyline' field.
      * @return The value.
      */
    public java.lang.String getPolyline() {
      return polyline;
    }

    /**
      * Sets the value of the 'polyline' field.
      * @param value The value of 'polyline'.
      * @return This builder.
      */
    public com.fretron.Model.TimeAwarePolyline.Builder setPolyline(java.lang.String value) {
      validate(fields()[0], value);
      this.polyline = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'polyline' field has been set.
      * @return True if the 'polyline' field has been set, false otherwise.
      */
    public boolean hasPolyline() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'polyline' field.
      * @return This builder.
      */
    public com.fretron.Model.TimeAwarePolyline.Builder clearPolyline() {
      polyline = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'compressedPolyline' field.
      * @return The value.
      */
    public java.lang.String getCompressedPolyline() {
      return compressedPolyline;
    }

    /**
      * Sets the value of the 'compressedPolyline' field.
      * @param value The value of 'compressedPolyline'.
      * @return This builder.
      */
    public com.fretron.Model.TimeAwarePolyline.Builder setCompressedPolyline(java.lang.String value) {
      validate(fields()[1], value);
      this.compressedPolyline = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'compressedPolyline' field has been set.
      * @return True if the 'compressedPolyline' field has been set, false otherwise.
      */
    public boolean hasCompressedPolyline() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'compressedPolyline' field.
      * @return This builder.
      */
    public com.fretron.Model.TimeAwarePolyline.Builder clearCompressedPolyline() {
      compressedPolyline = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPoint' field.
      * @return The value.
      */
    public com.fretron.Model.PointAtTime getLastPoint() {
      return lastPoint;
    }

    /**
      * Sets the value of the 'lastPoint' field.
      * @param value The value of 'lastPoint'.
      * @return This builder.
      */
    public com.fretron.Model.TimeAwarePolyline.Builder setLastPoint(com.fretron.Model.PointAtTime value) {
      validate(fields()[2], value);
      this.lastPointBuilder = null;
      this.lastPoint = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPoint' field has been set.
      * @return True if the 'lastPoint' field has been set, false otherwise.
      */
    public boolean hasLastPoint() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'lastPoint' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.PointAtTime.Builder getLastPointBuilder() {
      if (lastPointBuilder == null) {
        if (hasLastPoint()) {
          setLastPointBuilder(com.fretron.Model.PointAtTime.newBuilder(lastPoint));
        } else {
          setLastPointBuilder(com.fretron.Model.PointAtTime.newBuilder());
        }
      }
      return lastPointBuilder;
    }

    /**
     * Sets the Builder instance for the 'lastPoint' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TimeAwarePolyline.Builder setLastPointBuilder(com.fretron.Model.PointAtTime.Builder value) {
      clearLastPoint();
      lastPointBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lastPoint' field has an active Builder instance
     * @return True if the 'lastPoint' field has an active Builder instance
     */
    public boolean hasLastPointBuilder() {
      return lastPointBuilder != null;
    }

    /**
      * Clears the value of the 'lastPoint' field.
      * @return This builder.
      */
    public com.fretron.Model.TimeAwarePolyline.Builder clearLastPoint() {
      lastPoint = null;
      lastPointBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isAssumed' field.
      * @return The value.
      */
    public java.lang.Boolean getIsAssumed() {
      return isAssumed;
    }

    /**
      * Sets the value of the 'isAssumed' field.
      * @param value The value of 'isAssumed'.
      * @return This builder.
      */
    public com.fretron.Model.TimeAwarePolyline.Builder setIsAssumed(boolean value) {
      validate(fields()[3], value);
      this.isAssumed = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isAssumed' field has been set.
      * @return True if the 'isAssumed' field has been set, false otherwise.
      */
    public boolean hasIsAssumed() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isAssumed' field.
      * @return This builder.
      */
    public com.fretron.Model.TimeAwarePolyline.Builder clearIsAssumed() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public TimeAwarePolyline build() {
      try {
        TimeAwarePolyline record = new TimeAwarePolyline();
        record.polyline = fieldSetFlags()[0] ? this.polyline : (java.lang.String) defaultValue(fields()[0]);
        record.compressedPolyline = fieldSetFlags()[1] ? this.compressedPolyline : (java.lang.String) defaultValue(fields()[1]);
        if (lastPointBuilder != null) {
          record.lastPoint = this.lastPointBuilder.build();
        } else {
          record.lastPoint = fieldSetFlags()[2] ? this.lastPoint : (com.fretron.Model.PointAtTime) defaultValue(fields()[2]);
        }
        record.isAssumed = fieldSetFlags()[3] ? this.isAssumed : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
