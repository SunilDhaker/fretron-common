/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OrderRelation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4352231221676617062L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderRelation\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"standardMeasurement\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"StandardMeasurement\",\"fields\":[{\"name\":\"weight\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Measurement\",\"fields\":[{\"name\":\"measurmentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unitOfMeasurment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plannedLoadQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualLoadedQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"netQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"grossQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualDeliveredQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"shortage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"frieghtDeductableQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"claimQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"temperature\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"density\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"moisture\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"volume\",\"type\":[\"null\",\"Measurement\"],\"default\":null},{\"name\":\"package\",\"type\":[\"null\",\"Measurement\"],\"default\":null}]}],\"default\":null},{\"name\":\"orderId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lineItemId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.StandardMeasurement standardMeasurement;
  @Deprecated public java.lang.String orderId;
  @Deprecated public java.lang.String lineItemId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderRelation() {}

  /**
   * All-args constructor.
   * @param standardMeasurement The new value for standardMeasurement
   * @param orderId The new value for orderId
   * @param lineItemId The new value for lineItemId
   */
  public OrderRelation(com.fretron.Model.StandardMeasurement standardMeasurement, java.lang.String orderId, java.lang.String lineItemId) {
    this.standardMeasurement = standardMeasurement;
    this.orderId = orderId;
    this.lineItemId = lineItemId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return standardMeasurement;
    case 1: return orderId;
    case 2: return lineItemId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: standardMeasurement = (com.fretron.Model.StandardMeasurement)value$; break;
    case 1: orderId = (java.lang.String)value$; break;
    case 2: lineItemId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'standardMeasurement' field.
   * @return The value of the 'standardMeasurement' field.
   */
  public com.fretron.Model.StandardMeasurement getStandardMeasurement() {
    return standardMeasurement;
  }

  /**
   * Sets the value of the 'standardMeasurement' field.
   * @param value the value to set.
   */
  public void setStandardMeasurement(com.fretron.Model.StandardMeasurement value) {
    this.standardMeasurement = value;
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.String getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.String value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'lineItemId' field.
   * @return The value of the 'lineItemId' field.
   */
  public java.lang.String getLineItemId() {
    return lineItemId;
  }

  /**
   * Sets the value of the 'lineItemId' field.
   * @param value the value to set.
   */
  public void setLineItemId(java.lang.String value) {
    this.lineItemId = value;
  }

  /**
   * Creates a new OrderRelation RecordBuilder.
   * @return A new OrderRelation RecordBuilder
   */
  public static com.fretron.Model.OrderRelation.Builder newBuilder() {
    return new com.fretron.Model.OrderRelation.Builder();
  }

  /**
   * Creates a new OrderRelation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderRelation RecordBuilder
   */
  public static com.fretron.Model.OrderRelation.Builder newBuilder(com.fretron.Model.OrderRelation.Builder other) {
    return new com.fretron.Model.OrderRelation.Builder(other);
  }

  /**
   * Creates a new OrderRelation RecordBuilder by copying an existing OrderRelation instance.
   * @param other The existing instance to copy.
   * @return A new OrderRelation RecordBuilder
   */
  public static com.fretron.Model.OrderRelation.Builder newBuilder(com.fretron.Model.OrderRelation other) {
    return new com.fretron.Model.OrderRelation.Builder(other);
  }

  /**
   * RecordBuilder for OrderRelation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderRelation>
    implements org.apache.avro.data.RecordBuilder<OrderRelation> {

    private com.fretron.Model.StandardMeasurement standardMeasurement;
    private com.fretron.Model.StandardMeasurement.Builder standardMeasurementBuilder;
    private java.lang.String orderId;
    private java.lang.String lineItemId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.OrderRelation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.standardMeasurement)) {
        this.standardMeasurement = data().deepCopy(fields()[0].schema(), other.standardMeasurement);
        fieldSetFlags()[0] = true;
      }
      if (other.hasStandardMeasurementBuilder()) {
        this.standardMeasurementBuilder = com.fretron.Model.StandardMeasurement.newBuilder(other.getStandardMeasurementBuilder());
      }
      if (isValidValue(fields()[1], other.orderId)) {
        this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lineItemId)) {
        this.lineItemId = data().deepCopy(fields()[2].schema(), other.lineItemId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OrderRelation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.OrderRelation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.standardMeasurement)) {
        this.standardMeasurement = data().deepCopy(fields()[0].schema(), other.standardMeasurement);
        fieldSetFlags()[0] = true;
      }
      this.standardMeasurementBuilder = null;
      if (isValidValue(fields()[1], other.orderId)) {
        this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lineItemId)) {
        this.lineItemId = data().deepCopy(fields()[2].schema(), other.lineItemId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'standardMeasurement' field.
      * @return The value.
      */
    public com.fretron.Model.StandardMeasurement getStandardMeasurement() {
      return standardMeasurement;
    }

    /**
      * Sets the value of the 'standardMeasurement' field.
      * @param value The value of 'standardMeasurement'.
      * @return This builder.
      */
    public com.fretron.Model.OrderRelation.Builder setStandardMeasurement(com.fretron.Model.StandardMeasurement value) {
      validate(fields()[0], value);
      this.standardMeasurementBuilder = null;
      this.standardMeasurement = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'standardMeasurement' field has been set.
      * @return True if the 'standardMeasurement' field has been set, false otherwise.
      */
    public boolean hasStandardMeasurement() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'standardMeasurement' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder getStandardMeasurementBuilder() {
      if (standardMeasurementBuilder == null) {
        if (hasStandardMeasurement()) {
          setStandardMeasurementBuilder(com.fretron.Model.StandardMeasurement.newBuilder(standardMeasurement));
        } else {
          setStandardMeasurementBuilder(com.fretron.Model.StandardMeasurement.newBuilder());
        }
      }
      return standardMeasurementBuilder;
    }

    /**
     * Sets the Builder instance for the 'standardMeasurement' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.OrderRelation.Builder setStandardMeasurementBuilder(com.fretron.Model.StandardMeasurement.Builder value) {
      clearStandardMeasurement();
      standardMeasurementBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'standardMeasurement' field has an active Builder instance
     * @return True if the 'standardMeasurement' field has an active Builder instance
     */
    public boolean hasStandardMeasurementBuilder() {
      return standardMeasurementBuilder != null;
    }

    /**
      * Clears the value of the 'standardMeasurement' field.
      * @return This builder.
      */
    public com.fretron.Model.OrderRelation.Builder clearStandardMeasurement() {
      standardMeasurement = null;
      standardMeasurementBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.String getOrderId() {
      return orderId;
    }

    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.fretron.Model.OrderRelation.Builder setOrderId(java.lang.String value) {
      validate(fields()[1], value);
      this.orderId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.fretron.Model.OrderRelation.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineItemId' field.
      * @return The value.
      */
    public java.lang.String getLineItemId() {
      return lineItemId;
    }

    /**
      * Sets the value of the 'lineItemId' field.
      * @param value The value of 'lineItemId'.
      * @return This builder.
      */
    public com.fretron.Model.OrderRelation.Builder setLineItemId(java.lang.String value) {
      validate(fields()[2], value);
      this.lineItemId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lineItemId' field has been set.
      * @return True if the 'lineItemId' field has been set, false otherwise.
      */
    public boolean hasLineItemId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lineItemId' field.
      * @return This builder.
      */
    public com.fretron.Model.OrderRelation.Builder clearLineItemId() {
      lineItemId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public OrderRelation build() {
      try {
        OrderRelation record = new OrderRelation();
        if (standardMeasurementBuilder != null) {
          record.standardMeasurement = this.standardMeasurementBuilder.build();
        } else {
          record.standardMeasurement = fieldSetFlags()[0] ? this.standardMeasurement : (com.fretron.Model.StandardMeasurement) defaultValue(fields()[0]);
        }
        record.orderId = fieldSetFlags()[1] ? this.orderId : (java.lang.String) defaultValue(fields()[1]);
        record.lineItemId = fieldSetFlags()[2] ? this.lineItemId : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
