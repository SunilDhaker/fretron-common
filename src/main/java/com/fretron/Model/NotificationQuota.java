/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NotificationQuota extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5543047355399996576L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NotificationQuota\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"emailAmount\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"smsAmount\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"emailCurrentUses\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"smsCurrentUses\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"from\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"till\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"lastUpdate\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isSmsWarningSent\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"isEmailWarningSent\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"emails\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"mobileNumbers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String orgId;
  @Deprecated public java.lang.Long emailAmount;
  @Deprecated public java.lang.Long smsAmount;
  @Deprecated public java.lang.Long emailCurrentUses;
  @Deprecated public java.lang.Long smsCurrentUses;
  @Deprecated public java.lang.Long from;
  @Deprecated public java.lang.Long till;
  @Deprecated public java.lang.Long lastUpdate;
  @Deprecated public java.lang.String type;
  @Deprecated public java.lang.Boolean isSmsWarningSent;
  @Deprecated public java.lang.Boolean isEmailWarningSent;
  @Deprecated public java.util.List<java.lang.String> emails;
  @Deprecated public java.util.List<java.lang.String> mobileNumbers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NotificationQuota() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param orgId The new value for orgId
   * @param emailAmount The new value for emailAmount
   * @param smsAmount The new value for smsAmount
   * @param emailCurrentUses The new value for emailCurrentUses
   * @param smsCurrentUses The new value for smsCurrentUses
   * @param from The new value for from
   * @param till The new value for till
   * @param lastUpdate The new value for lastUpdate
   * @param type The new value for type
   * @param isSmsWarningSent The new value for isSmsWarningSent
   * @param isEmailWarningSent The new value for isEmailWarningSent
   * @param emails The new value for emails
   * @param mobileNumbers The new value for mobileNumbers
   */
  public NotificationQuota(java.lang.String uuid, java.lang.String orgId, java.lang.Long emailAmount, java.lang.Long smsAmount, java.lang.Long emailCurrentUses, java.lang.Long smsCurrentUses, java.lang.Long from, java.lang.Long till, java.lang.Long lastUpdate, java.lang.String type, java.lang.Boolean isSmsWarningSent, java.lang.Boolean isEmailWarningSent, java.util.List<java.lang.String> emails, java.util.List<java.lang.String> mobileNumbers) {
    this.uuid = uuid;
    this.orgId = orgId;
    this.emailAmount = emailAmount;
    this.smsAmount = smsAmount;
    this.emailCurrentUses = emailCurrentUses;
    this.smsCurrentUses = smsCurrentUses;
    this.from = from;
    this.till = till;
    this.lastUpdate = lastUpdate;
    this.type = type;
    this.isSmsWarningSent = isSmsWarningSent;
    this.isEmailWarningSent = isEmailWarningSent;
    this.emails = emails;
    this.mobileNumbers = mobileNumbers;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return orgId;
    case 2: return emailAmount;
    case 3: return smsAmount;
    case 4: return emailCurrentUses;
    case 5: return smsCurrentUses;
    case 6: return from;
    case 7: return till;
    case 8: return lastUpdate;
    case 9: return type;
    case 10: return isSmsWarningSent;
    case 11: return isEmailWarningSent;
    case 12: return emails;
    case 13: return mobileNumbers;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: orgId = (java.lang.String)value$; break;
    case 2: emailAmount = (java.lang.Long)value$; break;
    case 3: smsAmount = (java.lang.Long)value$; break;
    case 4: emailCurrentUses = (java.lang.Long)value$; break;
    case 5: smsCurrentUses = (java.lang.Long)value$; break;
    case 6: from = (java.lang.Long)value$; break;
    case 7: till = (java.lang.Long)value$; break;
    case 8: lastUpdate = (java.lang.Long)value$; break;
    case 9: type = (java.lang.String)value$; break;
    case 10: isSmsWarningSent = (java.lang.Boolean)value$; break;
    case 11: isEmailWarningSent = (java.lang.Boolean)value$; break;
    case 12: emails = (java.util.List<java.lang.String>)value$; break;
    case 13: mobileNumbers = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'emailAmount' field.
   * @return The value of the 'emailAmount' field.
   */
  public java.lang.Long getEmailAmount() {
    return emailAmount;
  }

  /**
   * Sets the value of the 'emailAmount' field.
   * @param value the value to set.
   */
  public void setEmailAmount(java.lang.Long value) {
    this.emailAmount = value;
  }

  /**
   * Gets the value of the 'smsAmount' field.
   * @return The value of the 'smsAmount' field.
   */
  public java.lang.Long getSmsAmount() {
    return smsAmount;
  }

  /**
   * Sets the value of the 'smsAmount' field.
   * @param value the value to set.
   */
  public void setSmsAmount(java.lang.Long value) {
    this.smsAmount = value;
  }

  /**
   * Gets the value of the 'emailCurrentUses' field.
   * @return The value of the 'emailCurrentUses' field.
   */
  public java.lang.Long getEmailCurrentUses() {
    return emailCurrentUses;
  }

  /**
   * Sets the value of the 'emailCurrentUses' field.
   * @param value the value to set.
   */
  public void setEmailCurrentUses(java.lang.Long value) {
    this.emailCurrentUses = value;
  }

  /**
   * Gets the value of the 'smsCurrentUses' field.
   * @return The value of the 'smsCurrentUses' field.
   */
  public java.lang.Long getSmsCurrentUses() {
    return smsCurrentUses;
  }

  /**
   * Sets the value of the 'smsCurrentUses' field.
   * @param value the value to set.
   */
  public void setSmsCurrentUses(java.lang.Long value) {
    this.smsCurrentUses = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return The value of the 'from' field.
   */
  public java.lang.Long getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(java.lang.Long value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'till' field.
   * @return The value of the 'till' field.
   */
  public java.lang.Long getTill() {
    return till;
  }

  /**
   * Sets the value of the 'till' field.
   * @param value the value to set.
   */
  public void setTill(java.lang.Long value) {
    this.till = value;
  }

  /**
   * Gets the value of the 'lastUpdate' field.
   * @return The value of the 'lastUpdate' field.
   */
  public java.lang.Long getLastUpdate() {
    return lastUpdate;
  }

  /**
   * Sets the value of the 'lastUpdate' field.
   * @param value the value to set.
   */
  public void setLastUpdate(java.lang.Long value) {
    this.lastUpdate = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'isSmsWarningSent' field.
   * @return The value of the 'isSmsWarningSent' field.
   */
  public java.lang.Boolean getIsSmsWarningSent() {
    return isSmsWarningSent;
  }

  /**
   * Sets the value of the 'isSmsWarningSent' field.
   * @param value the value to set.
   */
  public void setIsSmsWarningSent(java.lang.Boolean value) {
    this.isSmsWarningSent = value;
  }

  /**
   * Gets the value of the 'isEmailWarningSent' field.
   * @return The value of the 'isEmailWarningSent' field.
   */
  public java.lang.Boolean getIsEmailWarningSent() {
    return isEmailWarningSent;
  }

  /**
   * Sets the value of the 'isEmailWarningSent' field.
   * @param value the value to set.
   */
  public void setIsEmailWarningSent(java.lang.Boolean value) {
    this.isEmailWarningSent = value;
  }

  /**
   * Gets the value of the 'emails' field.
   * @return The value of the 'emails' field.
   */
  public java.util.List<java.lang.String> getEmails() {
    return emails;
  }

  /**
   * Sets the value of the 'emails' field.
   * @param value the value to set.
   */
  public void setEmails(java.util.List<java.lang.String> value) {
    this.emails = value;
  }

  /**
   * Gets the value of the 'mobileNumbers' field.
   * @return The value of the 'mobileNumbers' field.
   */
  public java.util.List<java.lang.String> getMobileNumbers() {
    return mobileNumbers;
  }

  /**
   * Sets the value of the 'mobileNumbers' field.
   * @param value the value to set.
   */
  public void setMobileNumbers(java.util.List<java.lang.String> value) {
    this.mobileNumbers = value;
  }

  /**
   * Creates a new NotificationQuota RecordBuilder.
   * @return A new NotificationQuota RecordBuilder
   */
  public static com.fretron.Model.NotificationQuota.Builder newBuilder() {
    return new com.fretron.Model.NotificationQuota.Builder();
  }

  /**
   * Creates a new NotificationQuota RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NotificationQuota RecordBuilder
   */
  public static com.fretron.Model.NotificationQuota.Builder newBuilder(com.fretron.Model.NotificationQuota.Builder other) {
    return new com.fretron.Model.NotificationQuota.Builder(other);
  }

  /**
   * Creates a new NotificationQuota RecordBuilder by copying an existing NotificationQuota instance.
   * @param other The existing instance to copy.
   * @return A new NotificationQuota RecordBuilder
   */
  public static com.fretron.Model.NotificationQuota.Builder newBuilder(com.fretron.Model.NotificationQuota other) {
    return new com.fretron.Model.NotificationQuota.Builder(other);
  }

  /**
   * RecordBuilder for NotificationQuota instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotificationQuota>
    implements org.apache.avro.data.RecordBuilder<NotificationQuota> {

    private java.lang.String uuid;
    private java.lang.String orgId;
    private java.lang.Long emailAmount;
    private java.lang.Long smsAmount;
    private java.lang.Long emailCurrentUses;
    private java.lang.Long smsCurrentUses;
    private java.lang.Long from;
    private java.lang.Long till;
    private java.lang.Long lastUpdate;
    private java.lang.String type;
    private java.lang.Boolean isSmsWarningSent;
    private java.lang.Boolean isEmailWarningSent;
    private java.util.List<java.lang.String> emails;
    private java.util.List<java.lang.String> mobileNumbers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.NotificationQuota.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emailAmount)) {
        this.emailAmount = data().deepCopy(fields()[2].schema(), other.emailAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.smsAmount)) {
        this.smsAmount = data().deepCopy(fields()[3].schema(), other.smsAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emailCurrentUses)) {
        this.emailCurrentUses = data().deepCopy(fields()[4].schema(), other.emailCurrentUses);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.smsCurrentUses)) {
        this.smsCurrentUses = data().deepCopy(fields()[5].schema(), other.smsCurrentUses);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.from)) {
        this.from = data().deepCopy(fields()[6].schema(), other.from);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.till)) {
        this.till = data().deepCopy(fields()[7].schema(), other.till);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[8].schema(), other.lastUpdate);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.type)) {
        this.type = data().deepCopy(fields()[9].schema(), other.type);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isSmsWarningSent)) {
        this.isSmsWarningSent = data().deepCopy(fields()[10].schema(), other.isSmsWarningSent);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.isEmailWarningSent)) {
        this.isEmailWarningSent = data().deepCopy(fields()[11].schema(), other.isEmailWarningSent);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.emails)) {
        this.emails = data().deepCopy(fields()[12].schema(), other.emails);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.mobileNumbers)) {
        this.mobileNumbers = data().deepCopy(fields()[13].schema(), other.mobileNumbers);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NotificationQuota instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.NotificationQuota other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emailAmount)) {
        this.emailAmount = data().deepCopy(fields()[2].schema(), other.emailAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.smsAmount)) {
        this.smsAmount = data().deepCopy(fields()[3].schema(), other.smsAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emailCurrentUses)) {
        this.emailCurrentUses = data().deepCopy(fields()[4].schema(), other.emailCurrentUses);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.smsCurrentUses)) {
        this.smsCurrentUses = data().deepCopy(fields()[5].schema(), other.smsCurrentUses);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.from)) {
        this.from = data().deepCopy(fields()[6].schema(), other.from);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.till)) {
        this.till = data().deepCopy(fields()[7].schema(), other.till);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[8].schema(), other.lastUpdate);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.type)) {
        this.type = data().deepCopy(fields()[9].schema(), other.type);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isSmsWarningSent)) {
        this.isSmsWarningSent = data().deepCopy(fields()[10].schema(), other.isSmsWarningSent);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.isEmailWarningSent)) {
        this.isEmailWarningSent = data().deepCopy(fields()[11].schema(), other.isEmailWarningSent);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.emails)) {
        this.emails = data().deepCopy(fields()[12].schema(), other.emails);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.mobileNumbers)) {
        this.mobileNumbers = data().deepCopy(fields()[13].schema(), other.mobileNumbers);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setOrgId(java.lang.String value) {
      validate(fields()[1], value);
      this.orgId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailAmount' field.
      * @return The value.
      */
    public java.lang.Long getEmailAmount() {
      return emailAmount;
    }

    /**
      * Sets the value of the 'emailAmount' field.
      * @param value The value of 'emailAmount'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setEmailAmount(java.lang.Long value) {
      validate(fields()[2], value);
      this.emailAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'emailAmount' field has been set.
      * @return True if the 'emailAmount' field has been set, false otherwise.
      */
    public boolean hasEmailAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'emailAmount' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearEmailAmount() {
      emailAmount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'smsAmount' field.
      * @return The value.
      */
    public java.lang.Long getSmsAmount() {
      return smsAmount;
    }

    /**
      * Sets the value of the 'smsAmount' field.
      * @param value The value of 'smsAmount'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setSmsAmount(java.lang.Long value) {
      validate(fields()[3], value);
      this.smsAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'smsAmount' field has been set.
      * @return True if the 'smsAmount' field has been set, false otherwise.
      */
    public boolean hasSmsAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'smsAmount' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearSmsAmount() {
      smsAmount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailCurrentUses' field.
      * @return The value.
      */
    public java.lang.Long getEmailCurrentUses() {
      return emailCurrentUses;
    }

    /**
      * Sets the value of the 'emailCurrentUses' field.
      * @param value The value of 'emailCurrentUses'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setEmailCurrentUses(java.lang.Long value) {
      validate(fields()[4], value);
      this.emailCurrentUses = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'emailCurrentUses' field has been set.
      * @return True if the 'emailCurrentUses' field has been set, false otherwise.
      */
    public boolean hasEmailCurrentUses() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'emailCurrentUses' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearEmailCurrentUses() {
      emailCurrentUses = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'smsCurrentUses' field.
      * @return The value.
      */
    public java.lang.Long getSmsCurrentUses() {
      return smsCurrentUses;
    }

    /**
      * Sets the value of the 'smsCurrentUses' field.
      * @param value The value of 'smsCurrentUses'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setSmsCurrentUses(java.lang.Long value) {
      validate(fields()[5], value);
      this.smsCurrentUses = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'smsCurrentUses' field has been set.
      * @return True if the 'smsCurrentUses' field has been set, false otherwise.
      */
    public boolean hasSmsCurrentUses() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'smsCurrentUses' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearSmsCurrentUses() {
      smsCurrentUses = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public java.lang.Long getFrom() {
      return from;
    }

    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setFrom(java.lang.Long value) {
      validate(fields()[6], value);
      this.from = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearFrom() {
      from = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'till' field.
      * @return The value.
      */
    public java.lang.Long getTill() {
      return till;
    }

    /**
      * Sets the value of the 'till' field.
      * @param value The value of 'till'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setTill(java.lang.Long value) {
      validate(fields()[7], value);
      this.till = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'till' field has been set.
      * @return True if the 'till' field has been set, false otherwise.
      */
    public boolean hasTill() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'till' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearTill() {
      till = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdate' field.
      * @return The value.
      */
    public java.lang.Long getLastUpdate() {
      return lastUpdate;
    }

    /**
      * Sets the value of the 'lastUpdate' field.
      * @param value The value of 'lastUpdate'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setLastUpdate(java.lang.Long value) {
      validate(fields()[8], value);
      this.lastUpdate = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdate' field has been set.
      * @return True if the 'lastUpdate' field has been set, false otherwise.
      */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'lastUpdate' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearLastUpdate() {
      lastUpdate = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setType(java.lang.String value) {
      validate(fields()[9], value);
      this.type = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearType() {
      type = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSmsWarningSent' field.
      * @return The value.
      */
    public java.lang.Boolean getIsSmsWarningSent() {
      return isSmsWarningSent;
    }

    /**
      * Sets the value of the 'isSmsWarningSent' field.
      * @param value The value of 'isSmsWarningSent'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setIsSmsWarningSent(java.lang.Boolean value) {
      validate(fields()[10], value);
      this.isSmsWarningSent = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'isSmsWarningSent' field has been set.
      * @return True if the 'isSmsWarningSent' field has been set, false otherwise.
      */
    public boolean hasIsSmsWarningSent() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'isSmsWarningSent' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearIsSmsWarningSent() {
      isSmsWarningSent = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'isEmailWarningSent' field.
      * @return The value.
      */
    public java.lang.Boolean getIsEmailWarningSent() {
      return isEmailWarningSent;
    }

    /**
      * Sets the value of the 'isEmailWarningSent' field.
      * @param value The value of 'isEmailWarningSent'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setIsEmailWarningSent(java.lang.Boolean value) {
      validate(fields()[11], value);
      this.isEmailWarningSent = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'isEmailWarningSent' field has been set.
      * @return True if the 'isEmailWarningSent' field has been set, false otherwise.
      */
    public boolean hasIsEmailWarningSent() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'isEmailWarningSent' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearIsEmailWarningSent() {
      isEmailWarningSent = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'emails' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getEmails() {
      return emails;
    }

    /**
      * Sets the value of the 'emails' field.
      * @param value The value of 'emails'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setEmails(java.util.List<java.lang.String> value) {
      validate(fields()[12], value);
      this.emails = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'emails' field has been set.
      * @return True if the 'emails' field has been set, false otherwise.
      */
    public boolean hasEmails() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'emails' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearEmails() {
      emails = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileNumbers' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getMobileNumbers() {
      return mobileNumbers;
    }

    /**
      * Sets the value of the 'mobileNumbers' field.
      * @param value The value of 'mobileNumbers'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder setMobileNumbers(java.util.List<java.lang.String> value) {
      validate(fields()[13], value);
      this.mobileNumbers = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileNumbers' field has been set.
      * @return True if the 'mobileNumbers' field has been set, false otherwise.
      */
    public boolean hasMobileNumbers() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'mobileNumbers' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationQuota.Builder clearMobileNumbers() {
      mobileNumbers = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public NotificationQuota build() {
      try {
        NotificationQuota record = new NotificationQuota();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.orgId = fieldSetFlags()[1] ? this.orgId : (java.lang.String) defaultValue(fields()[1]);
        record.emailAmount = fieldSetFlags()[2] ? this.emailAmount : (java.lang.Long) defaultValue(fields()[2]);
        record.smsAmount = fieldSetFlags()[3] ? this.smsAmount : (java.lang.Long) defaultValue(fields()[3]);
        record.emailCurrentUses = fieldSetFlags()[4] ? this.emailCurrentUses : (java.lang.Long) defaultValue(fields()[4]);
        record.smsCurrentUses = fieldSetFlags()[5] ? this.smsCurrentUses : (java.lang.Long) defaultValue(fields()[5]);
        record.from = fieldSetFlags()[6] ? this.from : (java.lang.Long) defaultValue(fields()[6]);
        record.till = fieldSetFlags()[7] ? this.till : (java.lang.Long) defaultValue(fields()[7]);
        record.lastUpdate = fieldSetFlags()[8] ? this.lastUpdate : (java.lang.Long) defaultValue(fields()[8]);
        record.type = fieldSetFlags()[9] ? this.type : (java.lang.String) defaultValue(fields()[9]);
        record.isSmsWarningSent = fieldSetFlags()[10] ? this.isSmsWarningSent : (java.lang.Boolean) defaultValue(fields()[10]);
        record.isEmailWarningSent = fieldSetFlags()[11] ? this.isEmailWarningSent : (java.lang.Boolean) defaultValue(fields()[11]);
        record.emails = fieldSetFlags()[12] ? this.emails : (java.util.List<java.lang.String>) defaultValue(fields()[12]);
        record.mobileNumbers = fieldSetFlags()[13] ? this.mobileNumbers : (java.util.List<java.lang.String>) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
