/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AuctionRound extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2036665727244493668L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuctionRound\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"startTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"endTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"roundNumber\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String status;
  @Deprecated public java.lang.Long startTime;
  @Deprecated public java.lang.Long endTime;
  @Deprecated public java.lang.Integer roundNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuctionRound() {}

  /**
   * All-args constructor.
   * @param status The new value for status
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   * @param roundNumber The new value for roundNumber
   */
  public AuctionRound(java.lang.String status, java.lang.Long startTime, java.lang.Long endTime, java.lang.Integer roundNumber) {
    this.status = status;
    this.startTime = startTime;
    this.endTime = endTime;
    this.roundNumber = roundNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return status;
    case 1: return startTime;
    case 2: return endTime;
    case 3: return roundNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: status = (java.lang.String)value$; break;
    case 1: startTime = (java.lang.Long)value$; break;
    case 2: endTime = (java.lang.Long)value$; break;
    case 3: roundNumber = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public java.lang.Long getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.Long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public java.lang.Long getEndTime() {
    return endTime;
  }

  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(java.lang.Long value) {
    this.endTime = value;
  }

  /**
   * Gets the value of the 'roundNumber' field.
   * @return The value of the 'roundNumber' field.
   */
  public java.lang.Integer getRoundNumber() {
    return roundNumber;
  }

  /**
   * Sets the value of the 'roundNumber' field.
   * @param value the value to set.
   */
  public void setRoundNumber(java.lang.Integer value) {
    this.roundNumber = value;
  }

  /**
   * Creates a new AuctionRound RecordBuilder.
   * @return A new AuctionRound RecordBuilder
   */
  public static com.fretron.Model.AuctionRound.Builder newBuilder() {
    return new com.fretron.Model.AuctionRound.Builder();
  }

  /**
   * Creates a new AuctionRound RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuctionRound RecordBuilder
   */
  public static com.fretron.Model.AuctionRound.Builder newBuilder(com.fretron.Model.AuctionRound.Builder other) {
    return new com.fretron.Model.AuctionRound.Builder(other);
  }

  /**
   * Creates a new AuctionRound RecordBuilder by copying an existing AuctionRound instance.
   * @param other The existing instance to copy.
   * @return A new AuctionRound RecordBuilder
   */
  public static com.fretron.Model.AuctionRound.Builder newBuilder(com.fretron.Model.AuctionRound other) {
    return new com.fretron.Model.AuctionRound.Builder(other);
  }

  /**
   * RecordBuilder for AuctionRound instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuctionRound>
    implements org.apache.avro.data.RecordBuilder<AuctionRound> {

    private java.lang.String status;
    private java.lang.Long startTime;
    private java.lang.Long endTime;
    private java.lang.Integer roundNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.AuctionRound.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.status)) {
        this.status = data().deepCopy(fields()[0].schema(), other.status);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startTime)) {
        this.startTime = data().deepCopy(fields()[1].schema(), other.startTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.endTime)) {
        this.endTime = data().deepCopy(fields()[2].schema(), other.endTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.roundNumber)) {
        this.roundNumber = data().deepCopy(fields()[3].schema(), other.roundNumber);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AuctionRound instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.AuctionRound other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.status)) {
        this.status = data().deepCopy(fields()[0].schema(), other.status);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startTime)) {
        this.startTime = data().deepCopy(fields()[1].schema(), other.startTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.endTime)) {
        this.endTime = data().deepCopy(fields()[2].schema(), other.endTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.roundNumber)) {
        this.roundNumber = data().deepCopy(fields()[3].schema(), other.roundNumber);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.fretron.Model.AuctionRound.Builder setStatus(java.lang.String value) {
      validate(fields()[0], value);
      this.status = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.fretron.Model.AuctionRound.Builder clearStatus() {
      status = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public java.lang.Long getStartTime() {
      return startTime;
    }

    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.fretron.Model.AuctionRound.Builder setStartTime(java.lang.Long value) {
      validate(fields()[1], value);
      this.startTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public com.fretron.Model.AuctionRound.Builder clearStartTime() {
      startTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public java.lang.Long getEndTime() {
      return endTime;
    }

    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public com.fretron.Model.AuctionRound.Builder setEndTime(java.lang.Long value) {
      validate(fields()[2], value);
      this.endTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public com.fretron.Model.AuctionRound.Builder clearEndTime() {
      endTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'roundNumber' field.
      * @return The value.
      */
    public java.lang.Integer getRoundNumber() {
      return roundNumber;
    }

    /**
      * Sets the value of the 'roundNumber' field.
      * @param value The value of 'roundNumber'.
      * @return This builder.
      */
    public com.fretron.Model.AuctionRound.Builder setRoundNumber(java.lang.Integer value) {
      validate(fields()[3], value);
      this.roundNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'roundNumber' field has been set.
      * @return True if the 'roundNumber' field has been set, false otherwise.
      */
    public boolean hasRoundNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'roundNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.AuctionRound.Builder clearRoundNumber() {
      roundNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AuctionRound build() {
      try {
        AuctionRound record = new AuctionRound();
        record.status = fieldSetFlags()[0] ? this.status : (java.lang.String) defaultValue(fields()[0]);
        record.startTime = fieldSetFlags()[1] ? this.startTime : (java.lang.Long) defaultValue(fields()[1]);
        record.endTime = fieldSetFlags()[2] ? this.endTime : (java.lang.Long) defaultValue(fields()[2]);
        record.roundNumber = fieldSetFlags()[3] ? this.roundNumber : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
