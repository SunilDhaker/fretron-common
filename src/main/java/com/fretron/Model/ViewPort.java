/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ViewPort extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3808676321679171200L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ViewPort\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"northeast\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"southwest\",\"type\":[\"null\",\"Location\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.Location northeast;
  @Deprecated public com.fretron.Model.Location southwest;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ViewPort() {}

  /**
   * All-args constructor.
   * @param northeast The new value for northeast
   * @param southwest The new value for southwest
   */
  public ViewPort(com.fretron.Model.Location northeast, com.fretron.Model.Location southwest) {
    this.northeast = northeast;
    this.southwest = southwest;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return northeast;
    case 1: return southwest;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: northeast = (com.fretron.Model.Location)value$; break;
    case 1: southwest = (com.fretron.Model.Location)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'northeast' field.
   * @return The value of the 'northeast' field.
   */
  public com.fretron.Model.Location getNortheast() {
    return northeast;
  }

  /**
   * Sets the value of the 'northeast' field.
   * @param value the value to set.
   */
  public void setNortheast(com.fretron.Model.Location value) {
    this.northeast = value;
  }

  /**
   * Gets the value of the 'southwest' field.
   * @return The value of the 'southwest' field.
   */
  public com.fretron.Model.Location getSouthwest() {
    return southwest;
  }

  /**
   * Sets the value of the 'southwest' field.
   * @param value the value to set.
   */
  public void setSouthwest(com.fretron.Model.Location value) {
    this.southwest = value;
  }

  /**
   * Creates a new ViewPort RecordBuilder.
   * @return A new ViewPort RecordBuilder
   */
  public static com.fretron.Model.ViewPort.Builder newBuilder() {
    return new com.fretron.Model.ViewPort.Builder();
  }

  /**
   * Creates a new ViewPort RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ViewPort RecordBuilder
   */
  public static com.fretron.Model.ViewPort.Builder newBuilder(com.fretron.Model.ViewPort.Builder other) {
    return new com.fretron.Model.ViewPort.Builder(other);
  }

  /**
   * Creates a new ViewPort RecordBuilder by copying an existing ViewPort instance.
   * @param other The existing instance to copy.
   * @return A new ViewPort RecordBuilder
   */
  public static com.fretron.Model.ViewPort.Builder newBuilder(com.fretron.Model.ViewPort other) {
    return new com.fretron.Model.ViewPort.Builder(other);
  }

  /**
   * RecordBuilder for ViewPort instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ViewPort>
    implements org.apache.avro.data.RecordBuilder<ViewPort> {

    private com.fretron.Model.Location northeast;
    private com.fretron.Model.Location.Builder northeastBuilder;
    private com.fretron.Model.Location southwest;
    private com.fretron.Model.Location.Builder southwestBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ViewPort.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.northeast)) {
        this.northeast = data().deepCopy(fields()[0].schema(), other.northeast);
        fieldSetFlags()[0] = true;
      }
      if (other.hasNortheastBuilder()) {
        this.northeastBuilder = com.fretron.Model.Location.newBuilder(other.getNortheastBuilder());
      }
      if (isValidValue(fields()[1], other.southwest)) {
        this.southwest = data().deepCopy(fields()[1].schema(), other.southwest);
        fieldSetFlags()[1] = true;
      }
      if (other.hasSouthwestBuilder()) {
        this.southwestBuilder = com.fretron.Model.Location.newBuilder(other.getSouthwestBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ViewPort instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ViewPort other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.northeast)) {
        this.northeast = data().deepCopy(fields()[0].schema(), other.northeast);
        fieldSetFlags()[0] = true;
      }
      this.northeastBuilder = null;
      if (isValidValue(fields()[1], other.southwest)) {
        this.southwest = data().deepCopy(fields()[1].schema(), other.southwest);
        fieldSetFlags()[1] = true;
      }
      this.southwestBuilder = null;
    }

    /**
      * Gets the value of the 'northeast' field.
      * @return The value.
      */
    public com.fretron.Model.Location getNortheast() {
      return northeast;
    }

    /**
      * Sets the value of the 'northeast' field.
      * @param value The value of 'northeast'.
      * @return This builder.
      */
    public com.fretron.Model.ViewPort.Builder setNortheast(com.fretron.Model.Location value) {
      validate(fields()[0], value);
      this.northeastBuilder = null;
      this.northeast = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'northeast' field has been set.
      * @return True if the 'northeast' field has been set, false otherwise.
      */
    public boolean hasNortheast() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'northeast' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Location.Builder getNortheastBuilder() {
      if (northeastBuilder == null) {
        if (hasNortheast()) {
          setNortheastBuilder(com.fretron.Model.Location.newBuilder(northeast));
        } else {
          setNortheastBuilder(com.fretron.Model.Location.newBuilder());
        }
      }
      return northeastBuilder;
    }

    /**
     * Sets the Builder instance for the 'northeast' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.ViewPort.Builder setNortheastBuilder(com.fretron.Model.Location.Builder value) {
      clearNortheast();
      northeastBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'northeast' field has an active Builder instance
     * @return True if the 'northeast' field has an active Builder instance
     */
    public boolean hasNortheastBuilder() {
      return northeastBuilder != null;
    }

    /**
      * Clears the value of the 'northeast' field.
      * @return This builder.
      */
    public com.fretron.Model.ViewPort.Builder clearNortheast() {
      northeast = null;
      northeastBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'southwest' field.
      * @return The value.
      */
    public com.fretron.Model.Location getSouthwest() {
      return southwest;
    }

    /**
      * Sets the value of the 'southwest' field.
      * @param value The value of 'southwest'.
      * @return This builder.
      */
    public com.fretron.Model.ViewPort.Builder setSouthwest(com.fretron.Model.Location value) {
      validate(fields()[1], value);
      this.southwestBuilder = null;
      this.southwest = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'southwest' field has been set.
      * @return True if the 'southwest' field has been set, false otherwise.
      */
    public boolean hasSouthwest() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'southwest' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Location.Builder getSouthwestBuilder() {
      if (southwestBuilder == null) {
        if (hasSouthwest()) {
          setSouthwestBuilder(com.fretron.Model.Location.newBuilder(southwest));
        } else {
          setSouthwestBuilder(com.fretron.Model.Location.newBuilder());
        }
      }
      return southwestBuilder;
    }

    /**
     * Sets the Builder instance for the 'southwest' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.ViewPort.Builder setSouthwestBuilder(com.fretron.Model.Location.Builder value) {
      clearSouthwest();
      southwestBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'southwest' field has an active Builder instance
     * @return True if the 'southwest' field has an active Builder instance
     */
    public boolean hasSouthwestBuilder() {
      return southwestBuilder != null;
    }

    /**
      * Clears the value of the 'southwest' field.
      * @return This builder.
      */
    public com.fretron.Model.ViewPort.Builder clearSouthwest() {
      southwest = null;
      southwestBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ViewPort build() {
      try {
        ViewPort record = new ViewPort();
        if (northeastBuilder != null) {
          record.northeast = this.northeastBuilder.build();
        } else {
          record.northeast = fieldSetFlags()[0] ? this.northeast : (com.fretron.Model.Location) defaultValue(fields()[0]);
        }
        if (southwestBuilder != null) {
          record.southwest = this.southwestBuilder.build();
        } else {
          record.southwest = fieldSetFlags()[1] ? this.southwest : (com.fretron.Model.Location) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
