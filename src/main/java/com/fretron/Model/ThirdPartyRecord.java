/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ThirdPartyRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5881700824183661632L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ThirdPartyRecord\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"registrationNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deviceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"tenancyName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.String registrationNumber;
  @Deprecated public java.lang.String deviceId;
  @Deprecated public java.lang.String vehicleName;
  @Deprecated public java.lang.String tenancyName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ThirdPartyRecord() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param registrationNumber The new value for registrationNumber
   * @param deviceId The new value for deviceId
   * @param vehicleName The new value for vehicleName
   * @param tenancyName The new value for tenancyName
   */
  public ThirdPartyRecord(java.lang.String id, java.lang.String registrationNumber, java.lang.String deviceId, java.lang.String vehicleName, java.lang.String tenancyName) {
    this.id = id;
    this.registrationNumber = registrationNumber;
    this.deviceId = deviceId;
    this.vehicleName = vehicleName;
    this.tenancyName = tenancyName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return registrationNumber;
    case 2: return deviceId;
    case 3: return vehicleName;
    case 4: return tenancyName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: registrationNumber = (java.lang.String)value$; break;
    case 2: deviceId = (java.lang.String)value$; break;
    case 3: vehicleName = (java.lang.String)value$; break;
    case 4: tenancyName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'registrationNumber' field.
   * @return The value of the 'registrationNumber' field.
   */
  public java.lang.String getRegistrationNumber() {
    return registrationNumber;
  }

  /**
   * Sets the value of the 'registrationNumber' field.
   * @param value the value to set.
   */
  public void setRegistrationNumber(java.lang.String value) {
    this.registrationNumber = value;
  }

  /**
   * Gets the value of the 'deviceId' field.
   * @return The value of the 'deviceId' field.
   */
  public java.lang.String getDeviceId() {
    return deviceId;
  }

  /**
   * Sets the value of the 'deviceId' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.String value) {
    this.deviceId = value;
  }

  /**
   * Gets the value of the 'vehicleName' field.
   * @return The value of the 'vehicleName' field.
   */
  public java.lang.String getVehicleName() {
    return vehicleName;
  }

  /**
   * Sets the value of the 'vehicleName' field.
   * @param value the value to set.
   */
  public void setVehicleName(java.lang.String value) {
    this.vehicleName = value;
  }

  /**
   * Gets the value of the 'tenancyName' field.
   * @return The value of the 'tenancyName' field.
   */
  public java.lang.String getTenancyName() {
    return tenancyName;
  }

  /**
   * Sets the value of the 'tenancyName' field.
   * @param value the value to set.
   */
  public void setTenancyName(java.lang.String value) {
    this.tenancyName = value;
  }

  /**
   * Creates a new ThirdPartyRecord RecordBuilder.
   * @return A new ThirdPartyRecord RecordBuilder
   */
  public static com.fretron.Model.ThirdPartyRecord.Builder newBuilder() {
    return new com.fretron.Model.ThirdPartyRecord.Builder();
  }

  /**
   * Creates a new ThirdPartyRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ThirdPartyRecord RecordBuilder
   */
  public static com.fretron.Model.ThirdPartyRecord.Builder newBuilder(com.fretron.Model.ThirdPartyRecord.Builder other) {
    return new com.fretron.Model.ThirdPartyRecord.Builder(other);
  }

  /**
   * Creates a new ThirdPartyRecord RecordBuilder by copying an existing ThirdPartyRecord instance.
   * @param other The existing instance to copy.
   * @return A new ThirdPartyRecord RecordBuilder
   */
  public static com.fretron.Model.ThirdPartyRecord.Builder newBuilder(com.fretron.Model.ThirdPartyRecord other) {
    return new com.fretron.Model.ThirdPartyRecord.Builder(other);
  }

  /**
   * RecordBuilder for ThirdPartyRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ThirdPartyRecord>
    implements org.apache.avro.data.RecordBuilder<ThirdPartyRecord> {

    private java.lang.String id;
    private java.lang.String registrationNumber;
    private java.lang.String deviceId;
    private java.lang.String vehicleName;
    private java.lang.String tenancyName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ThirdPartyRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.registrationNumber)) {
        this.registrationNumber = data().deepCopy(fields()[1].schema(), other.registrationNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[2].schema(), other.deviceId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicleName)) {
        this.vehicleName = data().deepCopy(fields()[3].schema(), other.vehicleName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tenancyName)) {
        this.tenancyName = data().deepCopy(fields()[4].schema(), other.tenancyName);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ThirdPartyRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ThirdPartyRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.registrationNumber)) {
        this.registrationNumber = data().deepCopy(fields()[1].schema(), other.registrationNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[2].schema(), other.deviceId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicleName)) {
        this.vehicleName = data().deepCopy(fields()[3].schema(), other.vehicleName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tenancyName)) {
        this.tenancyName = data().deepCopy(fields()[4].schema(), other.tenancyName);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'registrationNumber' field.
      * @return The value.
      */
    public java.lang.String getRegistrationNumber() {
      return registrationNumber;
    }

    /**
      * Sets the value of the 'registrationNumber' field.
      * @param value The value of 'registrationNumber'.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder setRegistrationNumber(java.lang.String value) {
      validate(fields()[1], value);
      this.registrationNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'registrationNumber' field has been set.
      * @return True if the 'registrationNumber' field has been set, false otherwise.
      */
    public boolean hasRegistrationNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'registrationNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder clearRegistrationNumber() {
      registrationNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceId' field.
      * @return The value.
      */
    public java.lang.String getDeviceId() {
      return deviceId;
    }

    /**
      * Sets the value of the 'deviceId' field.
      * @param value The value of 'deviceId'.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder setDeviceId(java.lang.String value) {
      validate(fields()[2], value);
      this.deviceId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceId' field has been set.
      * @return True if the 'deviceId' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'deviceId' field.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder clearDeviceId() {
      deviceId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleName' field.
      * @return The value.
      */
    public java.lang.String getVehicleName() {
      return vehicleName;
    }

    /**
      * Sets the value of the 'vehicleName' field.
      * @param value The value of 'vehicleName'.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder setVehicleName(java.lang.String value) {
      validate(fields()[3], value);
      this.vehicleName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleName' field has been set.
      * @return True if the 'vehicleName' field has been set, false otherwise.
      */
    public boolean hasVehicleName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vehicleName' field.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder clearVehicleName() {
      vehicleName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenancyName' field.
      * @return The value.
      */
    public java.lang.String getTenancyName() {
      return tenancyName;
    }

    /**
      * Sets the value of the 'tenancyName' field.
      * @param value The value of 'tenancyName'.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder setTenancyName(java.lang.String value) {
      validate(fields()[4], value);
      this.tenancyName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tenancyName' field has been set.
      * @return True if the 'tenancyName' field has been set, false otherwise.
      */
    public boolean hasTenancyName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tenancyName' field.
      * @return This builder.
      */
    public com.fretron.Model.ThirdPartyRecord.Builder clearTenancyName() {
      tenancyName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public ThirdPartyRecord build() {
      try {
        ThirdPartyRecord record = new ThirdPartyRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.registrationNumber = fieldSetFlags()[1] ? this.registrationNumber : (java.lang.String) defaultValue(fields()[1]);
        record.deviceId = fieldSetFlags()[2] ? this.deviceId : (java.lang.String) defaultValue(fields()[2]);
        record.vehicleName = fieldSetFlags()[3] ? this.vehicleName : (java.lang.String) defaultValue(fields()[3]);
        record.tenancyName = fieldSetFlags()[4] ? this.tenancyName : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
