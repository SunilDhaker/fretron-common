/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Reducible extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3109655987714802710L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Reducible\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"store\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"value\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"key\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"valueType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"action\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"schemaTopic\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String store;
  @Deprecated public java.nio.ByteBuffer value;
  @Deprecated public java.lang.String key;
  @Deprecated public java.lang.String valueType;
  @Deprecated public java.lang.String action;
  @Deprecated public java.lang.String schemaTopic;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Reducible() {}

  /**
   * All-args constructor.
   * @param store The new value for store
   * @param value The new value for value
   * @param key The new value for key
   * @param valueType The new value for valueType
   * @param action The new value for action
   * @param schemaTopic The new value for schemaTopic
   */
  public Reducible(java.lang.String store, java.nio.ByteBuffer value, java.lang.String key, java.lang.String valueType, java.lang.String action, java.lang.String schemaTopic) {
    this.store = store;
    this.value = value;
    this.key = key;
    this.valueType = valueType;
    this.action = action;
    this.schemaTopic = schemaTopic;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return store;
    case 1: return value;
    case 2: return key;
    case 3: return valueType;
    case 4: return action;
    case 5: return schemaTopic;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: store = (java.lang.String)value$; break;
    case 1: value = (java.nio.ByteBuffer)value$; break;
    case 2: key = (java.lang.String)value$; break;
    case 3: valueType = (java.lang.String)value$; break;
    case 4: action = (java.lang.String)value$; break;
    case 5: schemaTopic = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'store' field.
   * @return The value of the 'store' field.
   */
  public java.lang.String getStore() {
    return store;
  }

  /**
   * Sets the value of the 'store' field.
   * @param value the value to set.
   */
  public void setStore(java.lang.String value) {
    this.store = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.nio.ByteBuffer getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.nio.ByteBuffer value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'valueType' field.
   * @return The value of the 'valueType' field.
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * Sets the value of the 'valueType' field.
   * @param value the value to set.
   */
  public void setValueType(java.lang.String value) {
    this.valueType = value;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public java.lang.String getAction() {
    return action;
  }

  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public void setAction(java.lang.String value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'schemaTopic' field.
   * @return The value of the 'schemaTopic' field.
   */
  public java.lang.String getSchemaTopic() {
    return schemaTopic;
  }

  /**
   * Sets the value of the 'schemaTopic' field.
   * @param value the value to set.
   */
  public void setSchemaTopic(java.lang.String value) {
    this.schemaTopic = value;
  }

  /**
   * Creates a new Reducible RecordBuilder.
   * @return A new Reducible RecordBuilder
   */
  public static com.fretron.Model.Reducible.Builder newBuilder() {
    return new com.fretron.Model.Reducible.Builder();
  }

  /**
   * Creates a new Reducible RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Reducible RecordBuilder
   */
  public static com.fretron.Model.Reducible.Builder newBuilder(com.fretron.Model.Reducible.Builder other) {
    return new com.fretron.Model.Reducible.Builder(other);
  }

  /**
   * Creates a new Reducible RecordBuilder by copying an existing Reducible instance.
   * @param other The existing instance to copy.
   * @return A new Reducible RecordBuilder
   */
  public static com.fretron.Model.Reducible.Builder newBuilder(com.fretron.Model.Reducible other) {
    return new com.fretron.Model.Reducible.Builder(other);
  }

  /**
   * RecordBuilder for Reducible instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Reducible>
    implements org.apache.avro.data.RecordBuilder<Reducible> {

    private java.lang.String store;
    private java.nio.ByteBuffer value;
    private java.lang.String key;
    private java.lang.String valueType;
    private java.lang.String action;
    private java.lang.String schemaTopic;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Reducible.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.store)) {
        this.store = data().deepCopy(fields()[0].schema(), other.store);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.valueType)) {
        this.valueType = data().deepCopy(fields()[3].schema(), other.valueType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.action)) {
        this.action = data().deepCopy(fields()[4].schema(), other.action);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.schemaTopic)) {
        this.schemaTopic = data().deepCopy(fields()[5].schema(), other.schemaTopic);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Reducible instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Reducible other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.store)) {
        this.store = data().deepCopy(fields()[0].schema(), other.store);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.valueType)) {
        this.valueType = data().deepCopy(fields()[3].schema(), other.valueType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.action)) {
        this.action = data().deepCopy(fields()[4].schema(), other.action);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.schemaTopic)) {
        this.schemaTopic = data().deepCopy(fields()[5].schema(), other.schemaTopic);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'store' field.
      * @return The value.
      */
    public java.lang.String getStore() {
      return store;
    }

    /**
      * Sets the value of the 'store' field.
      * @param value The value of 'store'.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder setStore(java.lang.String value) {
      validate(fields()[0], value);
      this.store = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'store' field has been set.
      * @return True if the 'store' field has been set, false otherwise.
      */
    public boolean hasStore() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'store' field.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder clearStore() {
      store = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder setValue(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder setKey(java.lang.String value) {
      validate(fields()[2], value);
      this.key = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder clearKey() {
      key = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueType' field.
      * @return The value.
      */
    public java.lang.String getValueType() {
      return valueType;
    }

    /**
      * Sets the value of the 'valueType' field.
      * @param value The value of 'valueType'.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder setValueType(java.lang.String value) {
      validate(fields()[3], value);
      this.valueType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'valueType' field has been set.
      * @return True if the 'valueType' field has been set, false otherwise.
      */
    public boolean hasValueType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'valueType' field.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder clearValueType() {
      valueType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public java.lang.String getAction() {
      return action;
    }

    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder setAction(java.lang.String value) {
      validate(fields()[4], value);
      this.action = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder clearAction() {
      action = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'schemaTopic' field.
      * @return The value.
      */
    public java.lang.String getSchemaTopic() {
      return schemaTopic;
    }

    /**
      * Sets the value of the 'schemaTopic' field.
      * @param value The value of 'schemaTopic'.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder setSchemaTopic(java.lang.String value) {
      validate(fields()[5], value);
      this.schemaTopic = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'schemaTopic' field has been set.
      * @return True if the 'schemaTopic' field has been set, false otherwise.
      */
    public boolean hasSchemaTopic() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'schemaTopic' field.
      * @return This builder.
      */
    public com.fretron.Model.Reducible.Builder clearSchemaTopic() {
      schemaTopic = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Reducible build() {
      try {
        Reducible record = new Reducible();
        record.store = fieldSetFlags()[0] ? this.store : (java.lang.String) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.key = fieldSetFlags()[2] ? this.key : (java.lang.String) defaultValue(fields()[2]);
        record.valueType = fieldSetFlags()[3] ? this.valueType : (java.lang.String) defaultValue(fields()[3]);
        record.action = fieldSetFlags()[4] ? this.action : (java.lang.String) defaultValue(fields()[4]);
        record.schemaTopic = fieldSetFlags()[5] ? this.schemaTopic : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
