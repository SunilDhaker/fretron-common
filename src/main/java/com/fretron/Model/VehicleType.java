/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VehicleType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6401819644145666431L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VehicleType\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"externalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleTypeName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleTypeDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"caringCapacity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"variant\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String orgId;
  @Deprecated public java.lang.String externalId;
  @Deprecated public java.lang.String vehicleTypeName;
  @Deprecated public java.lang.String vehicleTypeDescription;
  @Deprecated public java.lang.Double caringCapacity;
  @Deprecated public java.util.List<java.lang.String> variant;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VehicleType() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param orgId The new value for orgId
   * @param externalId The new value for externalId
   * @param vehicleTypeName The new value for vehicleTypeName
   * @param vehicleTypeDescription The new value for vehicleTypeDescription
   * @param caringCapacity The new value for caringCapacity
   * @param variant The new value for variant
   */
  public VehicleType(java.lang.String uuid, java.lang.String orgId, java.lang.String externalId, java.lang.String vehicleTypeName, java.lang.String vehicleTypeDescription, java.lang.Double caringCapacity, java.util.List<java.lang.String> variant) {
    this.uuid = uuid;
    this.orgId = orgId;
    this.externalId = externalId;
    this.vehicleTypeName = vehicleTypeName;
    this.vehicleTypeDescription = vehicleTypeDescription;
    this.caringCapacity = caringCapacity;
    this.variant = variant;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return orgId;
    case 2: return externalId;
    case 3: return vehicleTypeName;
    case 4: return vehicleTypeDescription;
    case 5: return caringCapacity;
    case 6: return variant;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: orgId = (java.lang.String)value$; break;
    case 2: externalId = (java.lang.String)value$; break;
    case 3: vehicleTypeName = (java.lang.String)value$; break;
    case 4: vehicleTypeDescription = (java.lang.String)value$; break;
    case 5: caringCapacity = (java.lang.Double)value$; break;
    case 6: variant = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'externalId' field.
   * @return The value of the 'externalId' field.
   */
  public java.lang.String getExternalId() {
    return externalId;
  }

  /**
   * Sets the value of the 'externalId' field.
   * @param value the value to set.
   */
  public void setExternalId(java.lang.String value) {
    this.externalId = value;
  }

  /**
   * Gets the value of the 'vehicleTypeName' field.
   * @return The value of the 'vehicleTypeName' field.
   */
  public java.lang.String getVehicleTypeName() {
    return vehicleTypeName;
  }

  /**
   * Sets the value of the 'vehicleTypeName' field.
   * @param value the value to set.
   */
  public void setVehicleTypeName(java.lang.String value) {
    this.vehicleTypeName = value;
  }

  /**
   * Gets the value of the 'vehicleTypeDescription' field.
   * @return The value of the 'vehicleTypeDescription' field.
   */
  public java.lang.String getVehicleTypeDescription() {
    return vehicleTypeDescription;
  }

  /**
   * Sets the value of the 'vehicleTypeDescription' field.
   * @param value the value to set.
   */
  public void setVehicleTypeDescription(java.lang.String value) {
    this.vehicleTypeDescription = value;
  }

  /**
   * Gets the value of the 'caringCapacity' field.
   * @return The value of the 'caringCapacity' field.
   */
  public java.lang.Double getCaringCapacity() {
    return caringCapacity;
  }

  /**
   * Sets the value of the 'caringCapacity' field.
   * @param value the value to set.
   */
  public void setCaringCapacity(java.lang.Double value) {
    this.caringCapacity = value;
  }

  /**
   * Gets the value of the 'variant' field.
   * @return The value of the 'variant' field.
   */
  public java.util.List<java.lang.String> getVariant() {
    return variant;
  }

  /**
   * Sets the value of the 'variant' field.
   * @param value the value to set.
   */
  public void setVariant(java.util.List<java.lang.String> value) {
    this.variant = value;
  }

  /**
   * Creates a new VehicleType RecordBuilder.
   * @return A new VehicleType RecordBuilder
   */
  public static com.fretron.Model.VehicleType.Builder newBuilder() {
    return new com.fretron.Model.VehicleType.Builder();
  }

  /**
   * Creates a new VehicleType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VehicleType RecordBuilder
   */
  public static com.fretron.Model.VehicleType.Builder newBuilder(com.fretron.Model.VehicleType.Builder other) {
    return new com.fretron.Model.VehicleType.Builder(other);
  }

  /**
   * Creates a new VehicleType RecordBuilder by copying an existing VehicleType instance.
   * @param other The existing instance to copy.
   * @return A new VehicleType RecordBuilder
   */
  public static com.fretron.Model.VehicleType.Builder newBuilder(com.fretron.Model.VehicleType other) {
    return new com.fretron.Model.VehicleType.Builder(other);
  }

  /**
   * RecordBuilder for VehicleType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VehicleType>
    implements org.apache.avro.data.RecordBuilder<VehicleType> {

    private java.lang.String uuid;
    private java.lang.String orgId;
    private java.lang.String externalId;
    private java.lang.String vehicleTypeName;
    private java.lang.String vehicleTypeDescription;
    private java.lang.Double caringCapacity;
    private java.util.List<java.lang.String> variant;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.VehicleType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.externalId)) {
        this.externalId = data().deepCopy(fields()[2].schema(), other.externalId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicleTypeName)) {
        this.vehicleTypeName = data().deepCopy(fields()[3].schema(), other.vehicleTypeName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.vehicleTypeDescription)) {
        this.vehicleTypeDescription = data().deepCopy(fields()[4].schema(), other.vehicleTypeDescription);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.caringCapacity)) {
        this.caringCapacity = data().deepCopy(fields()[5].schema(), other.caringCapacity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.variant)) {
        this.variant = data().deepCopy(fields()[6].schema(), other.variant);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VehicleType instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.VehicleType other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.externalId)) {
        this.externalId = data().deepCopy(fields()[2].schema(), other.externalId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicleTypeName)) {
        this.vehicleTypeName = data().deepCopy(fields()[3].schema(), other.vehicleTypeName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.vehicleTypeDescription)) {
        this.vehicleTypeDescription = data().deepCopy(fields()[4].schema(), other.vehicleTypeDescription);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.caringCapacity)) {
        this.caringCapacity = data().deepCopy(fields()[5].schema(), other.caringCapacity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.variant)) {
        this.variant = data().deepCopy(fields()[6].schema(), other.variant);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder setOrgId(java.lang.String value) {
      validate(fields()[1], value);
      this.orgId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalId' field.
      * @return The value.
      */
    public java.lang.String getExternalId() {
      return externalId;
    }

    /**
      * Sets the value of the 'externalId' field.
      * @param value The value of 'externalId'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder setExternalId(java.lang.String value) {
      validate(fields()[2], value);
      this.externalId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'externalId' field has been set.
      * @return True if the 'externalId' field has been set, false otherwise.
      */
    public boolean hasExternalId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'externalId' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder clearExternalId() {
      externalId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleTypeName' field.
      * @return The value.
      */
    public java.lang.String getVehicleTypeName() {
      return vehicleTypeName;
    }

    /**
      * Sets the value of the 'vehicleTypeName' field.
      * @param value The value of 'vehicleTypeName'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder setVehicleTypeName(java.lang.String value) {
      validate(fields()[3], value);
      this.vehicleTypeName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleTypeName' field has been set.
      * @return True if the 'vehicleTypeName' field has been set, false otherwise.
      */
    public boolean hasVehicleTypeName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vehicleTypeName' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder clearVehicleTypeName() {
      vehicleTypeName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleTypeDescription' field.
      * @return The value.
      */
    public java.lang.String getVehicleTypeDescription() {
      return vehicleTypeDescription;
    }

    /**
      * Sets the value of the 'vehicleTypeDescription' field.
      * @param value The value of 'vehicleTypeDescription'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder setVehicleTypeDescription(java.lang.String value) {
      validate(fields()[4], value);
      this.vehicleTypeDescription = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleTypeDescription' field has been set.
      * @return True if the 'vehicleTypeDescription' field has been set, false otherwise.
      */
    public boolean hasVehicleTypeDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'vehicleTypeDescription' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder clearVehicleTypeDescription() {
      vehicleTypeDescription = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'caringCapacity' field.
      * @return The value.
      */
    public java.lang.Double getCaringCapacity() {
      return caringCapacity;
    }

    /**
      * Sets the value of the 'caringCapacity' field.
      * @param value The value of 'caringCapacity'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder setCaringCapacity(java.lang.Double value) {
      validate(fields()[5], value);
      this.caringCapacity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'caringCapacity' field has been set.
      * @return True if the 'caringCapacity' field has been set, false otherwise.
      */
    public boolean hasCaringCapacity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'caringCapacity' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder clearCaringCapacity() {
      caringCapacity = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'variant' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getVariant() {
      return variant;
    }

    /**
      * Sets the value of the 'variant' field.
      * @param value The value of 'variant'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder setVariant(java.util.List<java.lang.String> value) {
      validate(fields()[6], value);
      this.variant = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'variant' field has been set.
      * @return True if the 'variant' field has been set, false otherwise.
      */
    public boolean hasVariant() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'variant' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleType.Builder clearVariant() {
      variant = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public VehicleType build() {
      try {
        VehicleType record = new VehicleType();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.orgId = fieldSetFlags()[1] ? this.orgId : (java.lang.String) defaultValue(fields()[1]);
        record.externalId = fieldSetFlags()[2] ? this.externalId : (java.lang.String) defaultValue(fields()[2]);
        record.vehicleTypeName = fieldSetFlags()[3] ? this.vehicleTypeName : (java.lang.String) defaultValue(fields()[3]);
        record.vehicleTypeDescription = fieldSetFlags()[4] ? this.vehicleTypeDescription : (java.lang.String) defaultValue(fields()[4]);
        record.caringCapacity = fieldSetFlags()[5] ? this.caringCapacity : (java.lang.Double) defaultValue(fields()[5]);
        record.variant = fieldSetFlags()[6] ? this.variant : (java.util.List<java.lang.String>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
