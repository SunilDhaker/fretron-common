/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LiteCustomFields extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2522891779522562079L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LiteCustomFields\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"fieldType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fieldKey\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"indexedValue\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"valueType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"definitionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String fieldType;
  @Deprecated public java.lang.String fieldKey;
  @Deprecated public java.lang.String value;
  @Deprecated public java.util.List<java.lang.String> indexedValue;
  @Deprecated public java.lang.String valueType;
  @Deprecated public java.lang.String definitionId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LiteCustomFields() {}

  /**
   * All-args constructor.
   * @param fieldType The new value for fieldType
   * @param fieldKey The new value for fieldKey
   * @param value The new value for value
   * @param indexedValue The new value for indexedValue
   * @param valueType The new value for valueType
   * @param definitionId The new value for definitionId
   */
  public LiteCustomFields(java.lang.String fieldType, java.lang.String fieldKey, java.lang.String value, java.util.List<java.lang.String> indexedValue, java.lang.String valueType, java.lang.String definitionId) {
    this.fieldType = fieldType;
    this.fieldKey = fieldKey;
    this.value = value;
    this.indexedValue = indexedValue;
    this.valueType = valueType;
    this.definitionId = definitionId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fieldType;
    case 1: return fieldKey;
    case 2: return value;
    case 3: return indexedValue;
    case 4: return valueType;
    case 5: return definitionId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fieldType = (java.lang.String)value$; break;
    case 1: fieldKey = (java.lang.String)value$; break;
    case 2: value = (java.lang.String)value$; break;
    case 3: indexedValue = (java.util.List<java.lang.String>)value$; break;
    case 4: valueType = (java.lang.String)value$; break;
    case 5: definitionId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fieldType' field.
   * @return The value of the 'fieldType' field.
   */
  public java.lang.String getFieldType() {
    return fieldType;
  }

  /**
   * Sets the value of the 'fieldType' field.
   * @param value the value to set.
   */
  public void setFieldType(java.lang.String value) {
    this.fieldType = value;
  }

  /**
   * Gets the value of the 'fieldKey' field.
   * @return The value of the 'fieldKey' field.
   */
  public java.lang.String getFieldKey() {
    return fieldKey;
  }

  /**
   * Sets the value of the 'fieldKey' field.
   * @param value the value to set.
   */
  public void setFieldKey(java.lang.String value) {
    this.fieldKey = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'indexedValue' field.
   * @return The value of the 'indexedValue' field.
   */
  public java.util.List<java.lang.String> getIndexedValue() {
    return indexedValue;
  }

  /**
   * Sets the value of the 'indexedValue' field.
   * @param value the value to set.
   */
  public void setIndexedValue(java.util.List<java.lang.String> value) {
    this.indexedValue = value;
  }

  /**
   * Gets the value of the 'valueType' field.
   * @return The value of the 'valueType' field.
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * Sets the value of the 'valueType' field.
   * @param value the value to set.
   */
  public void setValueType(java.lang.String value) {
    this.valueType = value;
  }

  /**
   * Gets the value of the 'definitionId' field.
   * @return The value of the 'definitionId' field.
   */
  public java.lang.String getDefinitionId() {
    return definitionId;
  }

  /**
   * Sets the value of the 'definitionId' field.
   * @param value the value to set.
   */
  public void setDefinitionId(java.lang.String value) {
    this.definitionId = value;
  }

  /**
   * Creates a new LiteCustomFields RecordBuilder.
   * @return A new LiteCustomFields RecordBuilder
   */
  public static com.fretron.Model.LiteCustomFields.Builder newBuilder() {
    return new com.fretron.Model.LiteCustomFields.Builder();
  }

  /**
   * Creates a new LiteCustomFields RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LiteCustomFields RecordBuilder
   */
  public static com.fretron.Model.LiteCustomFields.Builder newBuilder(com.fretron.Model.LiteCustomFields.Builder other) {
    return new com.fretron.Model.LiteCustomFields.Builder(other);
  }

  /**
   * Creates a new LiteCustomFields RecordBuilder by copying an existing LiteCustomFields instance.
   * @param other The existing instance to copy.
   * @return A new LiteCustomFields RecordBuilder
   */
  public static com.fretron.Model.LiteCustomFields.Builder newBuilder(com.fretron.Model.LiteCustomFields other) {
    return new com.fretron.Model.LiteCustomFields.Builder(other);
  }

  /**
   * RecordBuilder for LiteCustomFields instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LiteCustomFields>
    implements org.apache.avro.data.RecordBuilder<LiteCustomFields> {

    private java.lang.String fieldType;
    private java.lang.String fieldKey;
    private java.lang.String value;
    private java.util.List<java.lang.String> indexedValue;
    private java.lang.String valueType;
    private java.lang.String definitionId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.LiteCustomFields.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fieldType)) {
        this.fieldType = data().deepCopy(fields()[0].schema(), other.fieldType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldKey)) {
        this.fieldKey = data().deepCopy(fields()[1].schema(), other.fieldKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.indexedValue)) {
        this.indexedValue = data().deepCopy(fields()[3].schema(), other.indexedValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.valueType)) {
        this.valueType = data().deepCopy(fields()[4].schema(), other.valueType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.definitionId)) {
        this.definitionId = data().deepCopy(fields()[5].schema(), other.definitionId);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LiteCustomFields instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.LiteCustomFields other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fieldType)) {
        this.fieldType = data().deepCopy(fields()[0].schema(), other.fieldType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldKey)) {
        this.fieldKey = data().deepCopy(fields()[1].schema(), other.fieldKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.indexedValue)) {
        this.indexedValue = data().deepCopy(fields()[3].schema(), other.indexedValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.valueType)) {
        this.valueType = data().deepCopy(fields()[4].schema(), other.valueType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.definitionId)) {
        this.definitionId = data().deepCopy(fields()[5].schema(), other.definitionId);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'fieldType' field.
      * @return The value.
      */
    public java.lang.String getFieldType() {
      return fieldType;
    }

    /**
      * Sets the value of the 'fieldType' field.
      * @param value The value of 'fieldType'.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder setFieldType(java.lang.String value) {
      validate(fields()[0], value);
      this.fieldType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldType' field has been set.
      * @return True if the 'fieldType' field has been set, false otherwise.
      */
    public boolean hasFieldType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fieldType' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder clearFieldType() {
      fieldType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldKey' field.
      * @return The value.
      */
    public java.lang.String getFieldKey() {
      return fieldKey;
    }

    /**
      * Sets the value of the 'fieldKey' field.
      * @param value The value of 'fieldKey'.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder setFieldKey(java.lang.String value) {
      validate(fields()[1], value);
      this.fieldKey = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldKey' field has been set.
      * @return True if the 'fieldKey' field has been set, false otherwise.
      */
    public boolean hasFieldKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fieldKey' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder clearFieldKey() {
      fieldKey = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder setValue(java.lang.String value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'indexedValue' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getIndexedValue() {
      return indexedValue;
    }

    /**
      * Sets the value of the 'indexedValue' field.
      * @param value The value of 'indexedValue'.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder setIndexedValue(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.indexedValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'indexedValue' field has been set.
      * @return True if the 'indexedValue' field has been set, false otherwise.
      */
    public boolean hasIndexedValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'indexedValue' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder clearIndexedValue() {
      indexedValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueType' field.
      * @return The value.
      */
    public java.lang.String getValueType() {
      return valueType;
    }

    /**
      * Sets the value of the 'valueType' field.
      * @param value The value of 'valueType'.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder setValueType(java.lang.String value) {
      validate(fields()[4], value);
      this.valueType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'valueType' field has been set.
      * @return True if the 'valueType' field has been set, false otherwise.
      */
    public boolean hasValueType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'valueType' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder clearValueType() {
      valueType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'definitionId' field.
      * @return The value.
      */
    public java.lang.String getDefinitionId() {
      return definitionId;
    }

    /**
      * Sets the value of the 'definitionId' field.
      * @param value The value of 'definitionId'.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder setDefinitionId(java.lang.String value) {
      validate(fields()[5], value);
      this.definitionId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'definitionId' field has been set.
      * @return True if the 'definitionId' field has been set, false otherwise.
      */
    public boolean hasDefinitionId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'definitionId' field.
      * @return This builder.
      */
    public com.fretron.Model.LiteCustomFields.Builder clearDefinitionId() {
      definitionId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public LiteCustomFields build() {
      try {
        LiteCustomFields record = new LiteCustomFields();
        record.fieldType = fieldSetFlags()[0] ? this.fieldType : (java.lang.String) defaultValue(fields()[0]);
        record.fieldKey = fieldSetFlags()[1] ? this.fieldKey : (java.lang.String) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.String) defaultValue(fields()[2]);
        record.indexedValue = fieldSetFlags()[3] ? this.indexedValue : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        record.valueType = fieldSetFlags()[4] ? this.valueType : (java.lang.String) defaultValue(fields()[4]);
        record.definitionId = fieldSetFlags()[5] ? this.definitionId : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
