/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Trip extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5798858228300397870L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trip\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"distance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"quantityOfMaterial\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"unitOfQuantity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"driverName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"driverMobNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"remarks\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"origin\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TripLocation\",\"fields\":[{\"name\":\"freightLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FreightLocation\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"geofence\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geofence\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundry\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Circle\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"radius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GeofenceType\",\"symbols\":[\"Proximity\",\"Polygon\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"favouriteOf\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"FreightLocType\",\"symbols\":[\"Private\",\"Public\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"fromTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"tillTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"firstGpsLogId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastGpsLogId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ignoredVehicleGpsLogs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TripLocation\"}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"tripId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"actualStartTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"actualEndTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"plannedStartTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"plannedEndTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"lane\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Lane\",\"fields\":[{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"FreightLocation\"}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"FreightLocation\"}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"baseSource\",\"type\":[\"null\",\"FreightLocation\"],\"default\":null},{\"name\":\"baseDestination\",\"type\":[\"null\",\"FreightLocation\"],\"default\":null},{\"name\":\"baseMaterial\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"baseRate\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"sourceOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"destinationOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"materialOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"baseTransitDays\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"tripState\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TripState\",\"symbols\":[\"Created\",\"Started\",\"Completed\"]}],\"default\":null},{\"name\":\"deviceImei\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"shipmentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"trackingType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TrackingType\",\"symbols\":[\"Tracker\",\"Trip\",\"Manual\"]}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Double distance;
  @Deprecated public java.lang.Double quantityOfMaterial;
  @Deprecated public java.lang.String unitOfQuantity;
  @Deprecated public java.lang.String driverName;
  @Deprecated public java.lang.String driverMobNumber;
  @Deprecated public java.lang.String remarks;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.util.List<com.fretron.Model.TripLocation> origin;
  @Deprecated public java.util.List<com.fretron.Model.TripLocation> destination;
  @Deprecated public java.lang.String material;
  @Deprecated public java.lang.String tripId;
  @Deprecated public java.lang.Long actualStartTime;
  @Deprecated public java.lang.Long actualEndTime;
  @Deprecated public java.lang.Long plannedStartTime;
  @Deprecated public java.lang.Long plannedEndTime;
  @Deprecated public com.fretron.Model.Lane lane;
  @Deprecated public com.fretron.Model.TripState tripState;
  @Deprecated public java.lang.String deviceImei;
  @Deprecated public java.lang.String shipmentId;
  @Deprecated public com.fretron.Model.TrackingType trackingType;
  @Deprecated public java.lang.String orgId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trip() {}

  /**
   * All-args constructor.
   * @param distance The new value for distance
   * @param quantityOfMaterial The new value for quantityOfMaterial
   * @param unitOfQuantity The new value for unitOfQuantity
   * @param driverName The new value for driverName
   * @param driverMobNumber The new value for driverMobNumber
   * @param remarks The new value for remarks
   * @param vehicleId The new value for vehicleId
   * @param origin The new value for origin
   * @param destination The new value for destination
   * @param material The new value for material
   * @param tripId The new value for tripId
   * @param actualStartTime The new value for actualStartTime
   * @param actualEndTime The new value for actualEndTime
   * @param plannedStartTime The new value for plannedStartTime
   * @param plannedEndTime The new value for plannedEndTime
   * @param lane The new value for lane
   * @param tripState The new value for tripState
   * @param deviceImei The new value for deviceImei
   * @param shipmentId The new value for shipmentId
   * @param trackingType The new value for trackingType
   * @param orgId The new value for orgId
   */
  public Trip(java.lang.Double distance, java.lang.Double quantityOfMaterial, java.lang.String unitOfQuantity, java.lang.String driverName, java.lang.String driverMobNumber, java.lang.String remarks, java.lang.String vehicleId, java.util.List<com.fretron.Model.TripLocation> origin, java.util.List<com.fretron.Model.TripLocation> destination, java.lang.String material, java.lang.String tripId, java.lang.Long actualStartTime, java.lang.Long actualEndTime, java.lang.Long plannedStartTime, java.lang.Long plannedEndTime, com.fretron.Model.Lane lane, com.fretron.Model.TripState tripState, java.lang.String deviceImei, java.lang.String shipmentId, com.fretron.Model.TrackingType trackingType, java.lang.String orgId) {
    this.distance = distance;
    this.quantityOfMaterial = quantityOfMaterial;
    this.unitOfQuantity = unitOfQuantity;
    this.driverName = driverName;
    this.driverMobNumber = driverMobNumber;
    this.remarks = remarks;
    this.vehicleId = vehicleId;
    this.origin = origin;
    this.destination = destination;
    this.material = material;
    this.tripId = tripId;
    this.actualStartTime = actualStartTime;
    this.actualEndTime = actualEndTime;
    this.plannedStartTime = plannedStartTime;
    this.plannedEndTime = plannedEndTime;
    this.lane = lane;
    this.tripState = tripState;
    this.deviceImei = deviceImei;
    this.shipmentId = shipmentId;
    this.trackingType = trackingType;
    this.orgId = orgId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return distance;
    case 1: return quantityOfMaterial;
    case 2: return unitOfQuantity;
    case 3: return driverName;
    case 4: return driverMobNumber;
    case 5: return remarks;
    case 6: return vehicleId;
    case 7: return origin;
    case 8: return destination;
    case 9: return material;
    case 10: return tripId;
    case 11: return actualStartTime;
    case 12: return actualEndTime;
    case 13: return plannedStartTime;
    case 14: return plannedEndTime;
    case 15: return lane;
    case 16: return tripState;
    case 17: return deviceImei;
    case 18: return shipmentId;
    case 19: return trackingType;
    case 20: return orgId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: distance = (java.lang.Double)value$; break;
    case 1: quantityOfMaterial = (java.lang.Double)value$; break;
    case 2: unitOfQuantity = (java.lang.String)value$; break;
    case 3: driverName = (java.lang.String)value$; break;
    case 4: driverMobNumber = (java.lang.String)value$; break;
    case 5: remarks = (java.lang.String)value$; break;
    case 6: vehicleId = (java.lang.String)value$; break;
    case 7: origin = (java.util.List<com.fretron.Model.TripLocation>)value$; break;
    case 8: destination = (java.util.List<com.fretron.Model.TripLocation>)value$; break;
    case 9: material = (java.lang.String)value$; break;
    case 10: tripId = (java.lang.String)value$; break;
    case 11: actualStartTime = (java.lang.Long)value$; break;
    case 12: actualEndTime = (java.lang.Long)value$; break;
    case 13: plannedStartTime = (java.lang.Long)value$; break;
    case 14: plannedEndTime = (java.lang.Long)value$; break;
    case 15: lane = (com.fretron.Model.Lane)value$; break;
    case 16: tripState = (com.fretron.Model.TripState)value$; break;
    case 17: deviceImei = (java.lang.String)value$; break;
    case 18: shipmentId = (java.lang.String)value$; break;
    case 19: trackingType = (com.fretron.Model.TrackingType)value$; break;
    case 20: orgId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'distance' field.
   * @return The value of the 'distance' field.
   */
  public java.lang.Double getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(java.lang.Double value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'quantityOfMaterial' field.
   * @return The value of the 'quantityOfMaterial' field.
   */
  public java.lang.Double getQuantityOfMaterial() {
    return quantityOfMaterial;
  }

  /**
   * Sets the value of the 'quantityOfMaterial' field.
   * @param value the value to set.
   */
  public void setQuantityOfMaterial(java.lang.Double value) {
    this.quantityOfMaterial = value;
  }

  /**
   * Gets the value of the 'unitOfQuantity' field.
   * @return The value of the 'unitOfQuantity' field.
   */
  public java.lang.String getUnitOfQuantity() {
    return unitOfQuantity;
  }

  /**
   * Sets the value of the 'unitOfQuantity' field.
   * @param value the value to set.
   */
  public void setUnitOfQuantity(java.lang.String value) {
    this.unitOfQuantity = value;
  }

  /**
   * Gets the value of the 'driverName' field.
   * @return The value of the 'driverName' field.
   */
  public java.lang.String getDriverName() {
    return driverName;
  }

  /**
   * Sets the value of the 'driverName' field.
   * @param value the value to set.
   */
  public void setDriverName(java.lang.String value) {
    this.driverName = value;
  }

  /**
   * Gets the value of the 'driverMobNumber' field.
   * @return The value of the 'driverMobNumber' field.
   */
  public java.lang.String getDriverMobNumber() {
    return driverMobNumber;
  }

  /**
   * Sets the value of the 'driverMobNumber' field.
   * @param value the value to set.
   */
  public void setDriverMobNumber(java.lang.String value) {
    this.driverMobNumber = value;
  }

  /**
   * Gets the value of the 'remarks' field.
   * @return The value of the 'remarks' field.
   */
  public java.lang.String getRemarks() {
    return remarks;
  }

  /**
   * Sets the value of the 'remarks' field.
   * @param value the value to set.
   */
  public void setRemarks(java.lang.String value) {
    this.remarks = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'origin' field.
   * @return The value of the 'origin' field.
   */
  public java.util.List<com.fretron.Model.TripLocation> getOrigin() {
    return origin;
  }

  /**
   * Sets the value of the 'origin' field.
   * @param value the value to set.
   */
  public void setOrigin(java.util.List<com.fretron.Model.TripLocation> value) {
    this.origin = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public java.util.List<com.fretron.Model.TripLocation> getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(java.util.List<com.fretron.Model.TripLocation> value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'material' field.
   * @return The value of the 'material' field.
   */
  public java.lang.String getMaterial() {
    return material;
  }

  /**
   * Sets the value of the 'material' field.
   * @param value the value to set.
   */
  public void setMaterial(java.lang.String value) {
    this.material = value;
  }

  /**
   * Gets the value of the 'tripId' field.
   * @return The value of the 'tripId' field.
   */
  public java.lang.String getTripId() {
    return tripId;
  }

  /**
   * Sets the value of the 'tripId' field.
   * @param value the value to set.
   */
  public void setTripId(java.lang.String value) {
    this.tripId = value;
  }

  /**
   * Gets the value of the 'actualStartTime' field.
   * @return The value of the 'actualStartTime' field.
   */
  public java.lang.Long getActualStartTime() {
    return actualStartTime;
  }

  /**
   * Sets the value of the 'actualStartTime' field.
   * @param value the value to set.
   */
  public void setActualStartTime(java.lang.Long value) {
    this.actualStartTime = value;
  }

  /**
   * Gets the value of the 'actualEndTime' field.
   * @return The value of the 'actualEndTime' field.
   */
  public java.lang.Long getActualEndTime() {
    return actualEndTime;
  }

  /**
   * Sets the value of the 'actualEndTime' field.
   * @param value the value to set.
   */
  public void setActualEndTime(java.lang.Long value) {
    this.actualEndTime = value;
  }

  /**
   * Gets the value of the 'plannedStartTime' field.
   * @return The value of the 'plannedStartTime' field.
   */
  public java.lang.Long getPlannedStartTime() {
    return plannedStartTime;
  }

  /**
   * Sets the value of the 'plannedStartTime' field.
   * @param value the value to set.
   */
  public void setPlannedStartTime(java.lang.Long value) {
    this.plannedStartTime = value;
  }

  /**
   * Gets the value of the 'plannedEndTime' field.
   * @return The value of the 'plannedEndTime' field.
   */
  public java.lang.Long getPlannedEndTime() {
    return plannedEndTime;
  }

  /**
   * Sets the value of the 'plannedEndTime' field.
   * @param value the value to set.
   */
  public void setPlannedEndTime(java.lang.Long value) {
    this.plannedEndTime = value;
  }

  /**
   * Gets the value of the 'lane' field.
   * @return The value of the 'lane' field.
   */
  public com.fretron.Model.Lane getLane() {
    return lane;
  }

  /**
   * Sets the value of the 'lane' field.
   * @param value the value to set.
   */
  public void setLane(com.fretron.Model.Lane value) {
    this.lane = value;
  }

  /**
   * Gets the value of the 'tripState' field.
   * @return The value of the 'tripState' field.
   */
  public com.fretron.Model.TripState getTripState() {
    return tripState;
  }

  /**
   * Sets the value of the 'tripState' field.
   * @param value the value to set.
   */
  public void setTripState(com.fretron.Model.TripState value) {
    this.tripState = value;
  }

  /**
   * Gets the value of the 'deviceImei' field.
   * @return The value of the 'deviceImei' field.
   */
  public java.lang.String getDeviceImei() {
    return deviceImei;
  }

  /**
   * Sets the value of the 'deviceImei' field.
   * @param value the value to set.
   */
  public void setDeviceImei(java.lang.String value) {
    this.deviceImei = value;
  }

  /**
   * Gets the value of the 'shipmentId' field.
   * @return The value of the 'shipmentId' field.
   */
  public java.lang.String getShipmentId() {
    return shipmentId;
  }

  /**
   * Sets the value of the 'shipmentId' field.
   * @param value the value to set.
   */
  public void setShipmentId(java.lang.String value) {
    this.shipmentId = value;
  }

  /**
   * Gets the value of the 'trackingType' field.
   * @return The value of the 'trackingType' field.
   */
  public com.fretron.Model.TrackingType getTrackingType() {
    return trackingType;
  }

  /**
   * Sets the value of the 'trackingType' field.
   * @param value the value to set.
   */
  public void setTrackingType(com.fretron.Model.TrackingType value) {
    this.trackingType = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Creates a new Trip RecordBuilder.
   * @return A new Trip RecordBuilder
   */
  public static com.fretron.Model.Trip.Builder newBuilder() {
    return new com.fretron.Model.Trip.Builder();
  }

  /**
   * Creates a new Trip RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trip RecordBuilder
   */
  public static com.fretron.Model.Trip.Builder newBuilder(com.fretron.Model.Trip.Builder other) {
    return new com.fretron.Model.Trip.Builder(other);
  }

  /**
   * Creates a new Trip RecordBuilder by copying an existing Trip instance.
   * @param other The existing instance to copy.
   * @return A new Trip RecordBuilder
   */
  public static com.fretron.Model.Trip.Builder newBuilder(com.fretron.Model.Trip other) {
    return new com.fretron.Model.Trip.Builder(other);
  }

  /**
   * RecordBuilder for Trip instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trip>
    implements org.apache.avro.data.RecordBuilder<Trip> {

    private java.lang.Double distance;
    private java.lang.Double quantityOfMaterial;
    private java.lang.String unitOfQuantity;
    private java.lang.String driverName;
    private java.lang.String driverMobNumber;
    private java.lang.String remarks;
    private java.lang.String vehicleId;
    private java.util.List<com.fretron.Model.TripLocation> origin;
    private java.util.List<com.fretron.Model.TripLocation> destination;
    private java.lang.String material;
    private java.lang.String tripId;
    private java.lang.Long actualStartTime;
    private java.lang.Long actualEndTime;
    private java.lang.Long plannedStartTime;
    private java.lang.Long plannedEndTime;
    private com.fretron.Model.Lane lane;
    private com.fretron.Model.Lane.Builder laneBuilder;
    private com.fretron.Model.TripState tripState;
    private java.lang.String deviceImei;
    private java.lang.String shipmentId;
    private com.fretron.Model.TrackingType trackingType;
    private java.lang.String orgId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Trip.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.distance)) {
        this.distance = data().deepCopy(fields()[0].schema(), other.distance);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantityOfMaterial)) {
        this.quantityOfMaterial = data().deepCopy(fields()[1].schema(), other.quantityOfMaterial);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitOfQuantity)) {
        this.unitOfQuantity = data().deepCopy(fields()[2].schema(), other.unitOfQuantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.driverName)) {
        this.driverName = data().deepCopy(fields()[3].schema(), other.driverName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.driverMobNumber)) {
        this.driverMobNumber = data().deepCopy(fields()[4].schema(), other.driverMobNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.remarks)) {
        this.remarks = data().deepCopy(fields()[5].schema(), other.remarks);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[6].schema(), other.vehicleId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.origin)) {
        this.origin = data().deepCopy(fields()[7].schema(), other.origin);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.destination)) {
        this.destination = data().deepCopy(fields()[8].schema(), other.destination);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.material)) {
        this.material = data().deepCopy(fields()[9].schema(), other.material);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.tripId)) {
        this.tripId = data().deepCopy(fields()[10].schema(), other.tripId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.actualStartTime)) {
        this.actualStartTime = data().deepCopy(fields()[11].schema(), other.actualStartTime);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.actualEndTime)) {
        this.actualEndTime = data().deepCopy(fields()[12].schema(), other.actualEndTime);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.plannedStartTime)) {
        this.plannedStartTime = data().deepCopy(fields()[13].schema(), other.plannedStartTime);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.plannedEndTime)) {
        this.plannedEndTime = data().deepCopy(fields()[14].schema(), other.plannedEndTime);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.lane)) {
        this.lane = data().deepCopy(fields()[15].schema(), other.lane);
        fieldSetFlags()[15] = true;
      }
      if (other.hasLaneBuilder()) {
        this.laneBuilder = com.fretron.Model.Lane.newBuilder(other.getLaneBuilder());
      }
      if (isValidValue(fields()[16], other.tripState)) {
        this.tripState = data().deepCopy(fields()[16].schema(), other.tripState);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.deviceImei)) {
        this.deviceImei = data().deepCopy(fields()[17].schema(), other.deviceImei);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.shipmentId)) {
        this.shipmentId = data().deepCopy(fields()[18].schema(), other.shipmentId);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.trackingType)) {
        this.trackingType = data().deepCopy(fields()[19].schema(), other.trackingType);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.orgId)) {
        this.orgId = data().deepCopy(fields()[20].schema(), other.orgId);
        fieldSetFlags()[20] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Trip instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Trip other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.distance)) {
        this.distance = data().deepCopy(fields()[0].schema(), other.distance);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantityOfMaterial)) {
        this.quantityOfMaterial = data().deepCopy(fields()[1].schema(), other.quantityOfMaterial);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitOfQuantity)) {
        this.unitOfQuantity = data().deepCopy(fields()[2].schema(), other.unitOfQuantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.driverName)) {
        this.driverName = data().deepCopy(fields()[3].schema(), other.driverName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.driverMobNumber)) {
        this.driverMobNumber = data().deepCopy(fields()[4].schema(), other.driverMobNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.remarks)) {
        this.remarks = data().deepCopy(fields()[5].schema(), other.remarks);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[6].schema(), other.vehicleId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.origin)) {
        this.origin = data().deepCopy(fields()[7].schema(), other.origin);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.destination)) {
        this.destination = data().deepCopy(fields()[8].schema(), other.destination);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.material)) {
        this.material = data().deepCopy(fields()[9].schema(), other.material);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.tripId)) {
        this.tripId = data().deepCopy(fields()[10].schema(), other.tripId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.actualStartTime)) {
        this.actualStartTime = data().deepCopy(fields()[11].schema(), other.actualStartTime);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.actualEndTime)) {
        this.actualEndTime = data().deepCopy(fields()[12].schema(), other.actualEndTime);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.plannedStartTime)) {
        this.plannedStartTime = data().deepCopy(fields()[13].schema(), other.plannedStartTime);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.plannedEndTime)) {
        this.plannedEndTime = data().deepCopy(fields()[14].schema(), other.plannedEndTime);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.lane)) {
        this.lane = data().deepCopy(fields()[15].schema(), other.lane);
        fieldSetFlags()[15] = true;
      }
      this.laneBuilder = null;
      if (isValidValue(fields()[16], other.tripState)) {
        this.tripState = data().deepCopy(fields()[16].schema(), other.tripState);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.deviceImei)) {
        this.deviceImei = data().deepCopy(fields()[17].schema(), other.deviceImei);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.shipmentId)) {
        this.shipmentId = data().deepCopy(fields()[18].schema(), other.shipmentId);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.trackingType)) {
        this.trackingType = data().deepCopy(fields()[19].schema(), other.trackingType);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.orgId)) {
        this.orgId = data().deepCopy(fields()[20].schema(), other.orgId);
        fieldSetFlags()[20] = true;
      }
    }

    /**
      * Gets the value of the 'distance' field.
      * @return The value.
      */
    public java.lang.Double getDistance() {
      return distance;
    }

    /**
      * Sets the value of the 'distance' field.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setDistance(java.lang.Double value) {
      validate(fields()[0], value);
      this.distance = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'distance' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearDistance() {
      distance = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantityOfMaterial' field.
      * @return The value.
      */
    public java.lang.Double getQuantityOfMaterial() {
      return quantityOfMaterial;
    }

    /**
      * Sets the value of the 'quantityOfMaterial' field.
      * @param value The value of 'quantityOfMaterial'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setQuantityOfMaterial(java.lang.Double value) {
      validate(fields()[1], value);
      this.quantityOfMaterial = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityOfMaterial' field has been set.
      * @return True if the 'quantityOfMaterial' field has been set, false otherwise.
      */
    public boolean hasQuantityOfMaterial() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantityOfMaterial' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearQuantityOfMaterial() {
      quantityOfMaterial = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitOfQuantity' field.
      * @return The value.
      */
    public java.lang.String getUnitOfQuantity() {
      return unitOfQuantity;
    }

    /**
      * Sets the value of the 'unitOfQuantity' field.
      * @param value The value of 'unitOfQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setUnitOfQuantity(java.lang.String value) {
      validate(fields()[2], value);
      this.unitOfQuantity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unitOfQuantity' field has been set.
      * @return True if the 'unitOfQuantity' field has been set, false otherwise.
      */
    public boolean hasUnitOfQuantity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unitOfQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearUnitOfQuantity() {
      unitOfQuantity = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'driverName' field.
      * @return The value.
      */
    public java.lang.String getDriverName() {
      return driverName;
    }

    /**
      * Sets the value of the 'driverName' field.
      * @param value The value of 'driverName'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setDriverName(java.lang.String value) {
      validate(fields()[3], value);
      this.driverName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'driverName' field has been set.
      * @return True if the 'driverName' field has been set, false otherwise.
      */
    public boolean hasDriverName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'driverName' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearDriverName() {
      driverName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'driverMobNumber' field.
      * @return The value.
      */
    public java.lang.String getDriverMobNumber() {
      return driverMobNumber;
    }

    /**
      * Sets the value of the 'driverMobNumber' field.
      * @param value The value of 'driverMobNumber'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setDriverMobNumber(java.lang.String value) {
      validate(fields()[4], value);
      this.driverMobNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'driverMobNumber' field has been set.
      * @return True if the 'driverMobNumber' field has been set, false otherwise.
      */
    public boolean hasDriverMobNumber() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'driverMobNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearDriverMobNumber() {
      driverMobNumber = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'remarks' field.
      * @return The value.
      */
    public java.lang.String getRemarks() {
      return remarks;
    }

    /**
      * Sets the value of the 'remarks' field.
      * @param value The value of 'remarks'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setRemarks(java.lang.String value) {
      validate(fields()[5], value);
      this.remarks = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'remarks' field has been set.
      * @return True if the 'remarks' field has been set, false otherwise.
      */
    public boolean hasRemarks() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'remarks' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearRemarks() {
      remarks = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setVehicleId(java.lang.String value) {
      validate(fields()[6], value);
      this.vehicleId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'origin' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.TripLocation> getOrigin() {
      return origin;
    }

    /**
      * Sets the value of the 'origin' field.
      * @param value The value of 'origin'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setOrigin(java.util.List<com.fretron.Model.TripLocation> value) {
      validate(fields()[7], value);
      this.origin = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'origin' field has been set.
      * @return True if the 'origin' field has been set, false otherwise.
      */
    public boolean hasOrigin() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'origin' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearOrigin() {
      origin = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.TripLocation> getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setDestination(java.util.List<com.fretron.Model.TripLocation> value) {
      validate(fields()[8], value);
      this.destination = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearDestination() {
      destination = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'material' field.
      * @return The value.
      */
    public java.lang.String getMaterial() {
      return material;
    }

    /**
      * Sets the value of the 'material' field.
      * @param value The value of 'material'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setMaterial(java.lang.String value) {
      validate(fields()[9], value);
      this.material = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'material' field has been set.
      * @return True if the 'material' field has been set, false otherwise.
      */
    public boolean hasMaterial() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'material' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearMaterial() {
      material = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'tripId' field.
      * @return The value.
      */
    public java.lang.String getTripId() {
      return tripId;
    }

    /**
      * Sets the value of the 'tripId' field.
      * @param value The value of 'tripId'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setTripId(java.lang.String value) {
      validate(fields()[10], value);
      this.tripId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'tripId' field has been set.
      * @return True if the 'tripId' field has been set, false otherwise.
      */
    public boolean hasTripId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'tripId' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearTripId() {
      tripId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualStartTime' field.
      * @return The value.
      */
    public java.lang.Long getActualStartTime() {
      return actualStartTime;
    }

    /**
      * Sets the value of the 'actualStartTime' field.
      * @param value The value of 'actualStartTime'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setActualStartTime(java.lang.Long value) {
      validate(fields()[11], value);
      this.actualStartTime = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'actualStartTime' field has been set.
      * @return True if the 'actualStartTime' field has been set, false otherwise.
      */
    public boolean hasActualStartTime() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'actualStartTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearActualStartTime() {
      actualStartTime = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualEndTime' field.
      * @return The value.
      */
    public java.lang.Long getActualEndTime() {
      return actualEndTime;
    }

    /**
      * Sets the value of the 'actualEndTime' field.
      * @param value The value of 'actualEndTime'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setActualEndTime(java.lang.Long value) {
      validate(fields()[12], value);
      this.actualEndTime = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'actualEndTime' field has been set.
      * @return True if the 'actualEndTime' field has been set, false otherwise.
      */
    public boolean hasActualEndTime() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'actualEndTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearActualEndTime() {
      actualEndTime = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'plannedStartTime' field.
      * @return The value.
      */
    public java.lang.Long getPlannedStartTime() {
      return plannedStartTime;
    }

    /**
      * Sets the value of the 'plannedStartTime' field.
      * @param value The value of 'plannedStartTime'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setPlannedStartTime(java.lang.Long value) {
      validate(fields()[13], value);
      this.plannedStartTime = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'plannedStartTime' field has been set.
      * @return True if the 'plannedStartTime' field has been set, false otherwise.
      */
    public boolean hasPlannedStartTime() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'plannedStartTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearPlannedStartTime() {
      plannedStartTime = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'plannedEndTime' field.
      * @return The value.
      */
    public java.lang.Long getPlannedEndTime() {
      return plannedEndTime;
    }

    /**
      * Sets the value of the 'plannedEndTime' field.
      * @param value The value of 'plannedEndTime'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setPlannedEndTime(java.lang.Long value) {
      validate(fields()[14], value);
      this.plannedEndTime = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'plannedEndTime' field has been set.
      * @return True if the 'plannedEndTime' field has been set, false otherwise.
      */
    public boolean hasPlannedEndTime() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'plannedEndTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearPlannedEndTime() {
      plannedEndTime = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'lane' field.
      * @return The value.
      */
    public com.fretron.Model.Lane getLane() {
      return lane;
    }

    /**
      * Sets the value of the 'lane' field.
      * @param value The value of 'lane'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setLane(com.fretron.Model.Lane value) {
      validate(fields()[15], value);
      this.laneBuilder = null;
      this.lane = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'lane' field has been set.
      * @return True if the 'lane' field has been set, false otherwise.
      */
    public boolean hasLane() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'lane' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Lane.Builder getLaneBuilder() {
      if (laneBuilder == null) {
        if (hasLane()) {
          setLaneBuilder(com.fretron.Model.Lane.newBuilder(lane));
        } else {
          setLaneBuilder(com.fretron.Model.Lane.newBuilder());
        }
      }
      return laneBuilder;
    }

    /**
     * Sets the Builder instance for the 'lane' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Trip.Builder setLaneBuilder(com.fretron.Model.Lane.Builder value) {
      clearLane();
      laneBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lane' field has an active Builder instance
     * @return True if the 'lane' field has an active Builder instance
     */
    public boolean hasLaneBuilder() {
      return laneBuilder != null;
    }

    /**
      * Clears the value of the 'lane' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearLane() {
      lane = null;
      laneBuilder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'tripState' field.
      * @return The value.
      */
    public com.fretron.Model.TripState getTripState() {
      return tripState;
    }

    /**
      * Sets the value of the 'tripState' field.
      * @param value The value of 'tripState'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setTripState(com.fretron.Model.TripState value) {
      validate(fields()[16], value);
      this.tripState = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'tripState' field has been set.
      * @return True if the 'tripState' field has been set, false otherwise.
      */
    public boolean hasTripState() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'tripState' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearTripState() {
      tripState = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceImei' field.
      * @return The value.
      */
    public java.lang.String getDeviceImei() {
      return deviceImei;
    }

    /**
      * Sets the value of the 'deviceImei' field.
      * @param value The value of 'deviceImei'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setDeviceImei(java.lang.String value) {
      validate(fields()[17], value);
      this.deviceImei = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceImei' field has been set.
      * @return True if the 'deviceImei' field has been set, false otherwise.
      */
    public boolean hasDeviceImei() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'deviceImei' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearDeviceImei() {
      deviceImei = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipmentId' field.
      * @return The value.
      */
    public java.lang.String getShipmentId() {
      return shipmentId;
    }

    /**
      * Sets the value of the 'shipmentId' field.
      * @param value The value of 'shipmentId'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setShipmentId(java.lang.String value) {
      validate(fields()[18], value);
      this.shipmentId = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'shipmentId' field has been set.
      * @return True if the 'shipmentId' field has been set, false otherwise.
      */
    public boolean hasShipmentId() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'shipmentId' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearShipmentId() {
      shipmentId = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackingType' field.
      * @return The value.
      */
    public com.fretron.Model.TrackingType getTrackingType() {
      return trackingType;
    }

    /**
      * Sets the value of the 'trackingType' field.
      * @param value The value of 'trackingType'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setTrackingType(com.fretron.Model.TrackingType value) {
      validate(fields()[19], value);
      this.trackingType = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'trackingType' field has been set.
      * @return True if the 'trackingType' field has been set, false otherwise.
      */
    public boolean hasTrackingType() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'trackingType' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearTrackingType() {
      trackingType = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder setOrgId(java.lang.String value) {
      validate(fields()[20], value);
      this.orgId = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.Trip.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    public Trip build() {
      try {
        Trip record = new Trip();
        record.distance = fieldSetFlags()[0] ? this.distance : (java.lang.Double) defaultValue(fields()[0]);
        record.quantityOfMaterial = fieldSetFlags()[1] ? this.quantityOfMaterial : (java.lang.Double) defaultValue(fields()[1]);
        record.unitOfQuantity = fieldSetFlags()[2] ? this.unitOfQuantity : (java.lang.String) defaultValue(fields()[2]);
        record.driverName = fieldSetFlags()[3] ? this.driverName : (java.lang.String) defaultValue(fields()[3]);
        record.driverMobNumber = fieldSetFlags()[4] ? this.driverMobNumber : (java.lang.String) defaultValue(fields()[4]);
        record.remarks = fieldSetFlags()[5] ? this.remarks : (java.lang.String) defaultValue(fields()[5]);
        record.vehicleId = fieldSetFlags()[6] ? this.vehicleId : (java.lang.String) defaultValue(fields()[6]);
        record.origin = fieldSetFlags()[7] ? this.origin : (java.util.List<com.fretron.Model.TripLocation>) defaultValue(fields()[7]);
        record.destination = fieldSetFlags()[8] ? this.destination : (java.util.List<com.fretron.Model.TripLocation>) defaultValue(fields()[8]);
        record.material = fieldSetFlags()[9] ? this.material : (java.lang.String) defaultValue(fields()[9]);
        record.tripId = fieldSetFlags()[10] ? this.tripId : (java.lang.String) defaultValue(fields()[10]);
        record.actualStartTime = fieldSetFlags()[11] ? this.actualStartTime : (java.lang.Long) defaultValue(fields()[11]);
        record.actualEndTime = fieldSetFlags()[12] ? this.actualEndTime : (java.lang.Long) defaultValue(fields()[12]);
        record.plannedStartTime = fieldSetFlags()[13] ? this.plannedStartTime : (java.lang.Long) defaultValue(fields()[13]);
        record.plannedEndTime = fieldSetFlags()[14] ? this.plannedEndTime : (java.lang.Long) defaultValue(fields()[14]);
        if (laneBuilder != null) {
          record.lane = this.laneBuilder.build();
        } else {
          record.lane = fieldSetFlags()[15] ? this.lane : (com.fretron.Model.Lane) defaultValue(fields()[15]);
        }
        record.tripState = fieldSetFlags()[16] ? this.tripState : (com.fretron.Model.TripState) defaultValue(fields()[16]);
        record.deviceImei = fieldSetFlags()[17] ? this.deviceImei : (java.lang.String) defaultValue(fields()[17]);
        record.shipmentId = fieldSetFlags()[18] ? this.shipmentId : (java.lang.String) defaultValue(fields()[18]);
        record.trackingType = fieldSetFlags()[19] ? this.trackingType : (com.fretron.Model.TrackingType) defaultValue(fields()[19]);
        record.orgId = fieldSetFlags()[20] ? this.orgId : (java.lang.String) defaultValue(fields()[20]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
