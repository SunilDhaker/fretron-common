/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GpsWindowState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5922163713326196454L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GpsWindowState\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"vehicleGpsState\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"VehicleGpsState\",\"fields\":[{\"name\":\"isManuallyAdded\",\"type\":\"boolean\",\"default\":false},{\"name\":\"isIgnore\",\"type\":\"boolean\",\"default\":false},{\"name\":\"startTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"endTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"startLocation\",\"type\":{\"type\":\"record\",\"name\":\"LitePosition\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null}]}},{\"name\":\"endLocation\",\"type\":\"LitePosition\"},{\"name\":\"sigmasq\",\"type\":\"double\"},{\"name\":\"mean\",\"type\":\"LitePosition\"},{\"name\":\"totalDistance\",\"type\":\"double\"},{\"name\":\"totalTime\",\"type\":\"long\"},{\"name\":\"averageOfSpeed\",\"type\":\"double\"},{\"name\":\"averageSpeeds\",\"type\":\"double\"},{\"name\":\"numberOfRecord\",\"type\":\"int\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GPSState\",\"symbols\":[\"Stopped\",\"Moving\",\"Overspeeding\",\"Disconnected\",\"Unknown\"]}]},{\"name\":\"encodedPolyline\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timeAwarePolyline\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TimeAwarePolyline\",\"fields\":[{\"name\":\"polyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"compressedPolyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastPoint\",\"type\":{\"type\":\"record\",\"name\":\"PointAtTime\",\"fields\":[{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null}]}}]}],\"default\":null},{\"name\":\"eventType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"previousPoints\",\"type\":{\"type\":\"array\",\"items\":\"PointAtTime\"},\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isDirty\",\"type\":\"boolean\",\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.VehicleGpsState vehicleGpsState;
  @Deprecated public java.util.List<com.fretron.Model.PointAtTime> previousPoints;
  @Deprecated public long timestamp;
  @Deprecated public boolean isDirty;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GpsWindowState() {}

  /**
   * All-args constructor.
   * @param vehicleGpsState The new value for vehicleGpsState
   * @param previousPoints The new value for previousPoints
   * @param timestamp The new value for timestamp
   * @param isDirty The new value for isDirty
   */
  public GpsWindowState(com.fretron.Model.VehicleGpsState vehicleGpsState, java.util.List<com.fretron.Model.PointAtTime> previousPoints, java.lang.Long timestamp, java.lang.Boolean isDirty) {
    this.vehicleGpsState = vehicleGpsState;
    this.previousPoints = previousPoints;
    this.timestamp = timestamp;
    this.isDirty = isDirty;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vehicleGpsState;
    case 1: return previousPoints;
    case 2: return timestamp;
    case 3: return isDirty;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vehicleGpsState = (com.fretron.Model.VehicleGpsState)value$; break;
    case 1: previousPoints = (java.util.List<com.fretron.Model.PointAtTime>)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: isDirty = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vehicleGpsState' field.
   * @return The value of the 'vehicleGpsState' field.
   */
  public com.fretron.Model.VehicleGpsState getVehicleGpsState() {
    return vehicleGpsState;
  }

  /**
   * Sets the value of the 'vehicleGpsState' field.
   * @param value the value to set.
   */
  public void setVehicleGpsState(com.fretron.Model.VehicleGpsState value) {
    this.vehicleGpsState = value;
  }

  /**
   * Gets the value of the 'previousPoints' field.
   * @return The value of the 'previousPoints' field.
   */
  public java.util.List<com.fretron.Model.PointAtTime> getPreviousPoints() {
    return previousPoints;
  }

  /**
   * Sets the value of the 'previousPoints' field.
   * @param value the value to set.
   */
  public void setPreviousPoints(java.util.List<com.fretron.Model.PointAtTime> value) {
    this.previousPoints = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'isDirty' field.
   * @return The value of the 'isDirty' field.
   */
  public java.lang.Boolean getIsDirty() {
    return isDirty;
  }

  /**
   * Sets the value of the 'isDirty' field.
   * @param value the value to set.
   */
  public void setIsDirty(java.lang.Boolean value) {
    this.isDirty = value;
  }

  /**
   * Creates a new GpsWindowState RecordBuilder.
   * @return A new GpsWindowState RecordBuilder
   */
  public static com.fretron.Model.GpsWindowState.Builder newBuilder() {
    return new com.fretron.Model.GpsWindowState.Builder();
  }

  /**
   * Creates a new GpsWindowState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GpsWindowState RecordBuilder
   */
  public static com.fretron.Model.GpsWindowState.Builder newBuilder(com.fretron.Model.GpsWindowState.Builder other) {
    return new com.fretron.Model.GpsWindowState.Builder(other);
  }

  /**
   * Creates a new GpsWindowState RecordBuilder by copying an existing GpsWindowState instance.
   * @param other The existing instance to copy.
   * @return A new GpsWindowState RecordBuilder
   */
  public static com.fretron.Model.GpsWindowState.Builder newBuilder(com.fretron.Model.GpsWindowState other) {
    return new com.fretron.Model.GpsWindowState.Builder(other);
  }

  /**
   * RecordBuilder for GpsWindowState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GpsWindowState>
    implements org.apache.avro.data.RecordBuilder<GpsWindowState> {

    private com.fretron.Model.VehicleGpsState vehicleGpsState;
    private com.fretron.Model.VehicleGpsState.Builder vehicleGpsStateBuilder;
    private java.util.List<com.fretron.Model.PointAtTime> previousPoints;
    private long timestamp;
    private boolean isDirty;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.GpsWindowState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vehicleGpsState)) {
        this.vehicleGpsState = data().deepCopy(fields()[0].schema(), other.vehicleGpsState);
        fieldSetFlags()[0] = true;
      }
      if (other.hasVehicleGpsStateBuilder()) {
        this.vehicleGpsStateBuilder = com.fretron.Model.VehicleGpsState.newBuilder(other.getVehicleGpsStateBuilder());
      }
      if (isValidValue(fields()[1], other.previousPoints)) {
        this.previousPoints = data().deepCopy(fields()[1].schema(), other.previousPoints);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isDirty)) {
        this.isDirty = data().deepCopy(fields()[3].schema(), other.isDirty);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GpsWindowState instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.GpsWindowState other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.vehicleGpsState)) {
        this.vehicleGpsState = data().deepCopy(fields()[0].schema(), other.vehicleGpsState);
        fieldSetFlags()[0] = true;
      }
      this.vehicleGpsStateBuilder = null;
      if (isValidValue(fields()[1], other.previousPoints)) {
        this.previousPoints = data().deepCopy(fields()[1].schema(), other.previousPoints);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isDirty)) {
        this.isDirty = data().deepCopy(fields()[3].schema(), other.isDirty);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'vehicleGpsState' field.
      * @return The value.
      */
    public com.fretron.Model.VehicleGpsState getVehicleGpsState() {
      return vehicleGpsState;
    }

    /**
      * Sets the value of the 'vehicleGpsState' field.
      * @param value The value of 'vehicleGpsState'.
      * @return This builder.
      */
    public com.fretron.Model.GpsWindowState.Builder setVehicleGpsState(com.fretron.Model.VehicleGpsState value) {
      validate(fields()[0], value);
      this.vehicleGpsStateBuilder = null;
      this.vehicleGpsState = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleGpsState' field has been set.
      * @return True if the 'vehicleGpsState' field has been set, false otherwise.
      */
    public boolean hasVehicleGpsState() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'vehicleGpsState' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.VehicleGpsState.Builder getVehicleGpsStateBuilder() {
      if (vehicleGpsStateBuilder == null) {
        if (hasVehicleGpsState()) {
          setVehicleGpsStateBuilder(com.fretron.Model.VehicleGpsState.newBuilder(vehicleGpsState));
        } else {
          setVehicleGpsStateBuilder(com.fretron.Model.VehicleGpsState.newBuilder());
        }
      }
      return vehicleGpsStateBuilder;
    }

    /**
     * Sets the Builder instance for the 'vehicleGpsState' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.GpsWindowState.Builder setVehicleGpsStateBuilder(com.fretron.Model.VehicleGpsState.Builder value) {
      clearVehicleGpsState();
      vehicleGpsStateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'vehicleGpsState' field has an active Builder instance
     * @return True if the 'vehicleGpsState' field has an active Builder instance
     */
    public boolean hasVehicleGpsStateBuilder() {
      return vehicleGpsStateBuilder != null;
    }

    /**
      * Clears the value of the 'vehicleGpsState' field.
      * @return This builder.
      */
    public com.fretron.Model.GpsWindowState.Builder clearVehicleGpsState() {
      vehicleGpsState = null;
      vehicleGpsStateBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'previousPoints' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.PointAtTime> getPreviousPoints() {
      return previousPoints;
    }

    /**
      * Sets the value of the 'previousPoints' field.
      * @param value The value of 'previousPoints'.
      * @return This builder.
      */
    public com.fretron.Model.GpsWindowState.Builder setPreviousPoints(java.util.List<com.fretron.Model.PointAtTime> value) {
      validate(fields()[1], value);
      this.previousPoints = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'previousPoints' field has been set.
      * @return True if the 'previousPoints' field has been set, false otherwise.
      */
    public boolean hasPreviousPoints() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'previousPoints' field.
      * @return This builder.
      */
    public com.fretron.Model.GpsWindowState.Builder clearPreviousPoints() {
      previousPoints = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.fretron.Model.GpsWindowState.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.fretron.Model.GpsWindowState.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isDirty' field.
      * @return The value.
      */
    public java.lang.Boolean getIsDirty() {
      return isDirty;
    }

    /**
      * Sets the value of the 'isDirty' field.
      * @param value The value of 'isDirty'.
      * @return This builder.
      */
    public com.fretron.Model.GpsWindowState.Builder setIsDirty(boolean value) {
      validate(fields()[3], value);
      this.isDirty = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isDirty' field has been set.
      * @return True if the 'isDirty' field has been set, false otherwise.
      */
    public boolean hasIsDirty() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isDirty' field.
      * @return This builder.
      */
    public com.fretron.Model.GpsWindowState.Builder clearIsDirty() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GpsWindowState build() {
      try {
        GpsWindowState record = new GpsWindowState();
        if (vehicleGpsStateBuilder != null) {
          record.vehicleGpsState = this.vehicleGpsStateBuilder.build();
        } else {
          record.vehicleGpsState = fieldSetFlags()[0] ? this.vehicleGpsState : (com.fretron.Model.VehicleGpsState) defaultValue(fields()[0]);
        }
        record.previousPoints = fieldSetFlags()[1] ? this.previousPoints : (java.util.List<com.fretron.Model.PointAtTime>) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.isDirty = fieldSetFlags()[3] ? this.isDirty : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
