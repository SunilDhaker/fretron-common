/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VehicleTripStateEvents extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7973629874160734156L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VehicleTripStateEvents\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"eventName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tripId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eventTime\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String eventName;
  @Deprecated public java.lang.String tripId;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.lang.Long eventTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VehicleTripStateEvents() {}

  /**
   * All-args constructor.
   * @param eventName The new value for eventName
   * @param tripId The new value for tripId
   * @param vehicleId The new value for vehicleId
   * @param eventTime The new value for eventTime
   */
  public VehicleTripStateEvents(java.lang.String eventName, java.lang.String tripId, java.lang.String vehicleId, java.lang.Long eventTime) {
    this.eventName = eventName;
    this.tripId = tripId;
    this.vehicleId = vehicleId;
    this.eventTime = eventTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventName;
    case 1: return tripId;
    case 2: return vehicleId;
    case 3: return eventTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventName = (java.lang.String)value$; break;
    case 1: tripId = (java.lang.String)value$; break;
    case 2: vehicleId = (java.lang.String)value$; break;
    case 3: eventTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventName' field.
   * @return The value of the 'eventName' field.
   */
  public java.lang.String getEventName() {
    return eventName;
  }

  /**
   * Sets the value of the 'eventName' field.
   * @param value the value to set.
   */
  public void setEventName(java.lang.String value) {
    this.eventName = value;
  }

  /**
   * Gets the value of the 'tripId' field.
   * @return The value of the 'tripId' field.
   */
  public java.lang.String getTripId() {
    return tripId;
  }

  /**
   * Sets the value of the 'tripId' field.
   * @param value the value to set.
   */
  public void setTripId(java.lang.String value) {
    this.tripId = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public java.lang.Long getEventTime() {
    return eventTime;
  }

  /**
   * Sets the value of the 'eventTime' field.
   * @param value the value to set.
   */
  public void setEventTime(java.lang.Long value) {
    this.eventTime = value;
  }

  /**
   * Creates a new VehicleTripStateEvents RecordBuilder.
   * @return A new VehicleTripStateEvents RecordBuilder
   */
  public static com.fretron.Model.VehicleTripStateEvents.Builder newBuilder() {
    return new com.fretron.Model.VehicleTripStateEvents.Builder();
  }

  /**
   * Creates a new VehicleTripStateEvents RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VehicleTripStateEvents RecordBuilder
   */
  public static com.fretron.Model.VehicleTripStateEvents.Builder newBuilder(com.fretron.Model.VehicleTripStateEvents.Builder other) {
    return new com.fretron.Model.VehicleTripStateEvents.Builder(other);
  }

  /**
   * Creates a new VehicleTripStateEvents RecordBuilder by copying an existing VehicleTripStateEvents instance.
   * @param other The existing instance to copy.
   * @return A new VehicleTripStateEvents RecordBuilder
   */
  public static com.fretron.Model.VehicleTripStateEvents.Builder newBuilder(com.fretron.Model.VehicleTripStateEvents other) {
    return new com.fretron.Model.VehicleTripStateEvents.Builder(other);
  }

  /**
   * RecordBuilder for VehicleTripStateEvents instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VehicleTripStateEvents>
    implements org.apache.avro.data.RecordBuilder<VehicleTripStateEvents> {

    private java.lang.String eventName;
    private java.lang.String tripId;
    private java.lang.String vehicleId;
    private java.lang.Long eventTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.VehicleTripStateEvents.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventName)) {
        this.eventName = data().deepCopy(fields()[0].schema(), other.eventName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tripId)) {
        this.tripId = data().deepCopy(fields()[1].schema(), other.tripId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[2].schema(), other.vehicleId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[3].schema(), other.eventTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VehicleTripStateEvents instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.VehicleTripStateEvents other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventName)) {
        this.eventName = data().deepCopy(fields()[0].schema(), other.eventName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tripId)) {
        this.tripId = data().deepCopy(fields()[1].schema(), other.tripId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[2].schema(), other.vehicleId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[3].schema(), other.eventTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'eventName' field.
      * @return The value.
      */
    public java.lang.String getEventName() {
      return eventName;
    }

    /**
      * Sets the value of the 'eventName' field.
      * @param value The value of 'eventName'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleTripStateEvents.Builder setEventName(java.lang.String value) {
      validate(fields()[0], value);
      this.eventName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventName' field has been set.
      * @return True if the 'eventName' field has been set, false otherwise.
      */
    public boolean hasEventName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventName' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleTripStateEvents.Builder clearEventName() {
      eventName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tripId' field.
      * @return The value.
      */
    public java.lang.String getTripId() {
      return tripId;
    }

    /**
      * Sets the value of the 'tripId' field.
      * @param value The value of 'tripId'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleTripStateEvents.Builder setTripId(java.lang.String value) {
      validate(fields()[1], value);
      this.tripId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tripId' field has been set.
      * @return True if the 'tripId' field has been set, false otherwise.
      */
    public boolean hasTripId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tripId' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleTripStateEvents.Builder clearTripId() {
      tripId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleTripStateEvents.Builder setVehicleId(java.lang.String value) {
      validate(fields()[2], value);
      this.vehicleId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleTripStateEvents.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public java.lang.Long getEventTime() {
      return eventTime;
    }

    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleTripStateEvents.Builder setEventTime(java.lang.Long value) {
      validate(fields()[3], value);
      this.eventTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleTripStateEvents.Builder clearEventTime() {
      eventTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public VehicleTripStateEvents build() {
      try {
        VehicleTripStateEvents record = new VehicleTripStateEvents();
        record.eventName = fieldSetFlags()[0] ? this.eventName : (java.lang.String) defaultValue(fields()[0]);
        record.tripId = fieldSetFlags()[1] ? this.tripId : (java.lang.String) defaultValue(fields()[1]);
        record.vehicleId = fieldSetFlags()[2] ? this.vehicleId : (java.lang.String) defaultValue(fields()[2]);
        record.eventTime = fieldSetFlags()[3] ? this.eventTime : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
