/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Route extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 236053519807704210L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Route\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"origin\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Place\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"category\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"center\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"centerCoordinates\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"suggestedRadius\",\"type\":\"double\",\"default\":null},{\"name\":\"viewport\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ViewPort\",\"fields\":[{\"name\":\"northeast\",\"type\":[\"null\",\"Location\"],\"default\":null},{\"name\":\"southwest\",\"type\":[\"null\",\"Location\"],\"default\":null}]}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"externalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"hubId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"district\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"subDistrict\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"boundary\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}],\"default\":null},{\"name\":\"places\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Place\"}],\"default\":null},{\"name\":\"accessibility\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isOwned\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"geoJsonBoundry\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geometry\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"coordinates\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}],\"default\":null}]}],\"default\":null}]}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",\"Place\"],\"default\":null},{\"name\":\"wayPoints\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Place\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"distance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"totalTime\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"polyline\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"tollCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"tollCost\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"petrolPumps\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"hospitals\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"serviceCenters\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"tollDetails\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Toll\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"costs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Cost\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}}],\"default\":null},{\"name\":\"isCustom\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}],\"default\":null},{\"name\":\"customCosts\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Cost\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String name;
  @Deprecated public com.fretron.Model.Place origin;
  @Deprecated public com.fretron.Model.Place destination;
  @Deprecated public java.util.List<com.fretron.Model.Place> wayPoints;
  @Deprecated public java.lang.String orgId;
  @Deprecated public java.lang.Double distance;
  @Deprecated public java.lang.Long totalTime;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.lang.String polyline;
  @Deprecated public java.lang.Integer tollCount;
  @Deprecated public java.lang.Double tollCost;
  @Deprecated public java.lang.Integer petrolPumps;
  @Deprecated public java.lang.Integer hospitals;
  @Deprecated public java.lang.Integer serviceCenters;
  @Deprecated public java.util.List<com.fretron.Model.Toll> tollDetails;
  @Deprecated public java.util.List<com.fretron.Model.Cost> customCosts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Route() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param name The new value for name
   * @param origin The new value for origin
   * @param destination The new value for destination
   * @param wayPoints The new value for wayPoints
   * @param orgId The new value for orgId
   * @param distance The new value for distance
   * @param totalTime The new value for totalTime
   * @param vehicleId The new value for vehicleId
   * @param polyline The new value for polyline
   * @param tollCount The new value for tollCount
   * @param tollCost The new value for tollCost
   * @param petrolPumps The new value for petrolPumps
   * @param hospitals The new value for hospitals
   * @param serviceCenters The new value for serviceCenters
   * @param tollDetails The new value for tollDetails
   * @param customCosts The new value for customCosts
   */
  public Route(java.lang.String uuid, java.lang.String name, com.fretron.Model.Place origin, com.fretron.Model.Place destination, java.util.List<com.fretron.Model.Place> wayPoints, java.lang.String orgId, java.lang.Double distance, java.lang.Long totalTime, java.lang.String vehicleId, java.lang.String polyline, java.lang.Integer tollCount, java.lang.Double tollCost, java.lang.Integer petrolPumps, java.lang.Integer hospitals, java.lang.Integer serviceCenters, java.util.List<com.fretron.Model.Toll> tollDetails, java.util.List<com.fretron.Model.Cost> customCosts) {
    this.uuid = uuid;
    this.name = name;
    this.origin = origin;
    this.destination = destination;
    this.wayPoints = wayPoints;
    this.orgId = orgId;
    this.distance = distance;
    this.totalTime = totalTime;
    this.vehicleId = vehicleId;
    this.polyline = polyline;
    this.tollCount = tollCount;
    this.tollCost = tollCost;
    this.petrolPumps = petrolPumps;
    this.hospitals = hospitals;
    this.serviceCenters = serviceCenters;
    this.tollDetails = tollDetails;
    this.customCosts = customCosts;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return name;
    case 2: return origin;
    case 3: return destination;
    case 4: return wayPoints;
    case 5: return orgId;
    case 6: return distance;
    case 7: return totalTime;
    case 8: return vehicleId;
    case 9: return polyline;
    case 10: return tollCount;
    case 11: return tollCost;
    case 12: return petrolPumps;
    case 13: return hospitals;
    case 14: return serviceCenters;
    case 15: return tollDetails;
    case 16: return customCosts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: origin = (com.fretron.Model.Place)value$; break;
    case 3: destination = (com.fretron.Model.Place)value$; break;
    case 4: wayPoints = (java.util.List<com.fretron.Model.Place>)value$; break;
    case 5: orgId = (java.lang.String)value$; break;
    case 6: distance = (java.lang.Double)value$; break;
    case 7: totalTime = (java.lang.Long)value$; break;
    case 8: vehicleId = (java.lang.String)value$; break;
    case 9: polyline = (java.lang.String)value$; break;
    case 10: tollCount = (java.lang.Integer)value$; break;
    case 11: tollCost = (java.lang.Double)value$; break;
    case 12: petrolPumps = (java.lang.Integer)value$; break;
    case 13: hospitals = (java.lang.Integer)value$; break;
    case 14: serviceCenters = (java.lang.Integer)value$; break;
    case 15: tollDetails = (java.util.List<com.fretron.Model.Toll>)value$; break;
    case 16: customCosts = (java.util.List<com.fretron.Model.Cost>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'origin' field.
   * @return The value of the 'origin' field.
   */
  public com.fretron.Model.Place getOrigin() {
    return origin;
  }

  /**
   * Sets the value of the 'origin' field.
   * @param value the value to set.
   */
  public void setOrigin(com.fretron.Model.Place value) {
    this.origin = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public com.fretron.Model.Place getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(com.fretron.Model.Place value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'wayPoints' field.
   * @return The value of the 'wayPoints' field.
   */
  public java.util.List<com.fretron.Model.Place> getWayPoints() {
    return wayPoints;
  }

  /**
   * Sets the value of the 'wayPoints' field.
   * @param value the value to set.
   */
  public void setWayPoints(java.util.List<com.fretron.Model.Place> value) {
    this.wayPoints = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'distance' field.
   * @return The value of the 'distance' field.
   */
  public java.lang.Double getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(java.lang.Double value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'totalTime' field.
   * @return The value of the 'totalTime' field.
   */
  public java.lang.Long getTotalTime() {
    return totalTime;
  }

  /**
   * Sets the value of the 'totalTime' field.
   * @param value the value to set.
   */
  public void setTotalTime(java.lang.Long value) {
    this.totalTime = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'polyline' field.
   * @return The value of the 'polyline' field.
   */
  public java.lang.String getPolyline() {
    return polyline;
  }

  /**
   * Sets the value of the 'polyline' field.
   * @param value the value to set.
   */
  public void setPolyline(java.lang.String value) {
    this.polyline = value;
  }

  /**
   * Gets the value of the 'tollCount' field.
   * @return The value of the 'tollCount' field.
   */
  public java.lang.Integer getTollCount() {
    return tollCount;
  }

  /**
   * Sets the value of the 'tollCount' field.
   * @param value the value to set.
   */
  public void setTollCount(java.lang.Integer value) {
    this.tollCount = value;
  }

  /**
   * Gets the value of the 'tollCost' field.
   * @return The value of the 'tollCost' field.
   */
  public java.lang.Double getTollCost() {
    return tollCost;
  }

  /**
   * Sets the value of the 'tollCost' field.
   * @param value the value to set.
   */
  public void setTollCost(java.lang.Double value) {
    this.tollCost = value;
  }

  /**
   * Gets the value of the 'petrolPumps' field.
   * @return The value of the 'petrolPumps' field.
   */
  public java.lang.Integer getPetrolPumps() {
    return petrolPumps;
  }

  /**
   * Sets the value of the 'petrolPumps' field.
   * @param value the value to set.
   */
  public void setPetrolPumps(java.lang.Integer value) {
    this.petrolPumps = value;
  }

  /**
   * Gets the value of the 'hospitals' field.
   * @return The value of the 'hospitals' field.
   */
  public java.lang.Integer getHospitals() {
    return hospitals;
  }

  /**
   * Sets the value of the 'hospitals' field.
   * @param value the value to set.
   */
  public void setHospitals(java.lang.Integer value) {
    this.hospitals = value;
  }

  /**
   * Gets the value of the 'serviceCenters' field.
   * @return The value of the 'serviceCenters' field.
   */
  public java.lang.Integer getServiceCenters() {
    return serviceCenters;
  }

  /**
   * Sets the value of the 'serviceCenters' field.
   * @param value the value to set.
   */
  public void setServiceCenters(java.lang.Integer value) {
    this.serviceCenters = value;
  }

  /**
   * Gets the value of the 'tollDetails' field.
   * @return The value of the 'tollDetails' field.
   */
  public java.util.List<com.fretron.Model.Toll> getTollDetails() {
    return tollDetails;
  }

  /**
   * Sets the value of the 'tollDetails' field.
   * @param value the value to set.
   */
  public void setTollDetails(java.util.List<com.fretron.Model.Toll> value) {
    this.tollDetails = value;
  }

  /**
   * Gets the value of the 'customCosts' field.
   * @return The value of the 'customCosts' field.
   */
  public java.util.List<com.fretron.Model.Cost> getCustomCosts() {
    return customCosts;
  }

  /**
   * Sets the value of the 'customCosts' field.
   * @param value the value to set.
   */
  public void setCustomCosts(java.util.List<com.fretron.Model.Cost> value) {
    this.customCosts = value;
  }

  /**
   * Creates a new Route RecordBuilder.
   * @return A new Route RecordBuilder
   */
  public static com.fretron.Model.Route.Builder newBuilder() {
    return new com.fretron.Model.Route.Builder();
  }

  /**
   * Creates a new Route RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Route RecordBuilder
   */
  public static com.fretron.Model.Route.Builder newBuilder(com.fretron.Model.Route.Builder other) {
    return new com.fretron.Model.Route.Builder(other);
  }

  /**
   * Creates a new Route RecordBuilder by copying an existing Route instance.
   * @param other The existing instance to copy.
   * @return A new Route RecordBuilder
   */
  public static com.fretron.Model.Route.Builder newBuilder(com.fretron.Model.Route other) {
    return new com.fretron.Model.Route.Builder(other);
  }

  /**
   * RecordBuilder for Route instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Route>
    implements org.apache.avro.data.RecordBuilder<Route> {

    private java.lang.String uuid;
    private java.lang.String name;
    private com.fretron.Model.Place origin;
    private com.fretron.Model.Place.Builder originBuilder;
    private com.fretron.Model.Place destination;
    private com.fretron.Model.Place.Builder destinationBuilder;
    private java.util.List<com.fretron.Model.Place> wayPoints;
    private java.lang.String orgId;
    private java.lang.Double distance;
    private java.lang.Long totalTime;
    private java.lang.String vehicleId;
    private java.lang.String polyline;
    private java.lang.Integer tollCount;
    private java.lang.Double tollCost;
    private java.lang.Integer petrolPumps;
    private java.lang.Integer hospitals;
    private java.lang.Integer serviceCenters;
    private java.util.List<com.fretron.Model.Toll> tollDetails;
    private java.util.List<com.fretron.Model.Cost> customCosts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Route.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.origin)) {
        this.origin = data().deepCopy(fields()[2].schema(), other.origin);
        fieldSetFlags()[2] = true;
      }
      if (other.hasOriginBuilder()) {
        this.originBuilder = com.fretron.Model.Place.newBuilder(other.getOriginBuilder());
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      if (other.hasDestinationBuilder()) {
        this.destinationBuilder = com.fretron.Model.Place.newBuilder(other.getDestinationBuilder());
      }
      if (isValidValue(fields()[4], other.wayPoints)) {
        this.wayPoints = data().deepCopy(fields()[4].schema(), other.wayPoints);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.orgId)) {
        this.orgId = data().deepCopy(fields()[5].schema(), other.orgId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.distance)) {
        this.distance = data().deepCopy(fields()[6].schema(), other.distance);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.totalTime)) {
        this.totalTime = data().deepCopy(fields()[7].schema(), other.totalTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[8].schema(), other.vehicleId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.polyline)) {
        this.polyline = data().deepCopy(fields()[9].schema(), other.polyline);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.tollCount)) {
        this.tollCount = data().deepCopy(fields()[10].schema(), other.tollCount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.tollCost)) {
        this.tollCost = data().deepCopy(fields()[11].schema(), other.tollCost);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.petrolPumps)) {
        this.petrolPumps = data().deepCopy(fields()[12].schema(), other.petrolPumps);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.hospitals)) {
        this.hospitals = data().deepCopy(fields()[13].schema(), other.hospitals);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.serviceCenters)) {
        this.serviceCenters = data().deepCopy(fields()[14].schema(), other.serviceCenters);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.tollDetails)) {
        this.tollDetails = data().deepCopy(fields()[15].schema(), other.tollDetails);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.customCosts)) {
        this.customCosts = data().deepCopy(fields()[16].schema(), other.customCosts);
        fieldSetFlags()[16] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Route instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Route other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.origin)) {
        this.origin = data().deepCopy(fields()[2].schema(), other.origin);
        fieldSetFlags()[2] = true;
      }
      this.originBuilder = null;
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      this.destinationBuilder = null;
      if (isValidValue(fields()[4], other.wayPoints)) {
        this.wayPoints = data().deepCopy(fields()[4].schema(), other.wayPoints);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.orgId)) {
        this.orgId = data().deepCopy(fields()[5].schema(), other.orgId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.distance)) {
        this.distance = data().deepCopy(fields()[6].schema(), other.distance);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.totalTime)) {
        this.totalTime = data().deepCopy(fields()[7].schema(), other.totalTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[8].schema(), other.vehicleId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.polyline)) {
        this.polyline = data().deepCopy(fields()[9].schema(), other.polyline);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.tollCount)) {
        this.tollCount = data().deepCopy(fields()[10].schema(), other.tollCount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.tollCost)) {
        this.tollCost = data().deepCopy(fields()[11].schema(), other.tollCost);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.petrolPumps)) {
        this.petrolPumps = data().deepCopy(fields()[12].schema(), other.petrolPumps);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.hospitals)) {
        this.hospitals = data().deepCopy(fields()[13].schema(), other.hospitals);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.serviceCenters)) {
        this.serviceCenters = data().deepCopy(fields()[14].schema(), other.serviceCenters);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.tollDetails)) {
        this.tollDetails = data().deepCopy(fields()[15].schema(), other.tollDetails);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.customCosts)) {
        this.customCosts = data().deepCopy(fields()[16].schema(), other.customCosts);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'origin' field.
      * @return The value.
      */
    public com.fretron.Model.Place getOrigin() {
      return origin;
    }

    /**
      * Sets the value of the 'origin' field.
      * @param value The value of 'origin'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setOrigin(com.fretron.Model.Place value) {
      validate(fields()[2], value);
      this.originBuilder = null;
      this.origin = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'origin' field has been set.
      * @return True if the 'origin' field has been set, false otherwise.
      */
    public boolean hasOrigin() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'origin' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Place.Builder getOriginBuilder() {
      if (originBuilder == null) {
        if (hasOrigin()) {
          setOriginBuilder(com.fretron.Model.Place.newBuilder(origin));
        } else {
          setOriginBuilder(com.fretron.Model.Place.newBuilder());
        }
      }
      return originBuilder;
    }

    /**
     * Sets the Builder instance for the 'origin' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Route.Builder setOriginBuilder(com.fretron.Model.Place.Builder value) {
      clearOrigin();
      originBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'origin' field has an active Builder instance
     * @return True if the 'origin' field has an active Builder instance
     */
    public boolean hasOriginBuilder() {
      return originBuilder != null;
    }

    /**
      * Clears the value of the 'origin' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearOrigin() {
      origin = null;
      originBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public com.fretron.Model.Place getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setDestination(com.fretron.Model.Place value) {
      validate(fields()[3], value);
      this.destinationBuilder = null;
      this.destination = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'destination' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Place.Builder getDestinationBuilder() {
      if (destinationBuilder == null) {
        if (hasDestination()) {
          setDestinationBuilder(com.fretron.Model.Place.newBuilder(destination));
        } else {
          setDestinationBuilder(com.fretron.Model.Place.newBuilder());
        }
      }
      return destinationBuilder;
    }

    /**
     * Sets the Builder instance for the 'destination' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Route.Builder setDestinationBuilder(com.fretron.Model.Place.Builder value) {
      clearDestination();
      destinationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'destination' field has an active Builder instance
     * @return True if the 'destination' field has an active Builder instance
     */
    public boolean hasDestinationBuilder() {
      return destinationBuilder != null;
    }

    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearDestination() {
      destination = null;
      destinationBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'wayPoints' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.Place> getWayPoints() {
      return wayPoints;
    }

    /**
      * Sets the value of the 'wayPoints' field.
      * @param value The value of 'wayPoints'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setWayPoints(java.util.List<com.fretron.Model.Place> value) {
      validate(fields()[4], value);
      this.wayPoints = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'wayPoints' field has been set.
      * @return True if the 'wayPoints' field has been set, false otherwise.
      */
    public boolean hasWayPoints() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'wayPoints' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearWayPoints() {
      wayPoints = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setOrgId(java.lang.String value) {
      validate(fields()[5], value);
      this.orgId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * @return The value.
      */
    public java.lang.Double getDistance() {
      return distance;
    }

    /**
      * Sets the value of the 'distance' field.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setDistance(java.lang.Double value) {
      validate(fields()[6], value);
      this.distance = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'distance' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearDistance() {
      distance = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTime' field.
      * @return The value.
      */
    public java.lang.Long getTotalTime() {
      return totalTime;
    }

    /**
      * Sets the value of the 'totalTime' field.
      * @param value The value of 'totalTime'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setTotalTime(java.lang.Long value) {
      validate(fields()[7], value);
      this.totalTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTime' field has been set.
      * @return True if the 'totalTime' field has been set, false otherwise.
      */
    public boolean hasTotalTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'totalTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearTotalTime() {
      totalTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setVehicleId(java.lang.String value) {
      validate(fields()[8], value);
      this.vehicleId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'polyline' field.
      * @return The value.
      */
    public java.lang.String getPolyline() {
      return polyline;
    }

    /**
      * Sets the value of the 'polyline' field.
      * @param value The value of 'polyline'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setPolyline(java.lang.String value) {
      validate(fields()[9], value);
      this.polyline = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'polyline' field has been set.
      * @return True if the 'polyline' field has been set, false otherwise.
      */
    public boolean hasPolyline() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'polyline' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearPolyline() {
      polyline = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'tollCount' field.
      * @return The value.
      */
    public java.lang.Integer getTollCount() {
      return tollCount;
    }

    /**
      * Sets the value of the 'tollCount' field.
      * @param value The value of 'tollCount'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setTollCount(java.lang.Integer value) {
      validate(fields()[10], value);
      this.tollCount = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'tollCount' field has been set.
      * @return True if the 'tollCount' field has been set, false otherwise.
      */
    public boolean hasTollCount() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'tollCount' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearTollCount() {
      tollCount = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'tollCost' field.
      * @return The value.
      */
    public java.lang.Double getTollCost() {
      return tollCost;
    }

    /**
      * Sets the value of the 'tollCost' field.
      * @param value The value of 'tollCost'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setTollCost(java.lang.Double value) {
      validate(fields()[11], value);
      this.tollCost = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'tollCost' field has been set.
      * @return True if the 'tollCost' field has been set, false otherwise.
      */
    public boolean hasTollCost() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'tollCost' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearTollCost() {
      tollCost = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'petrolPumps' field.
      * @return The value.
      */
    public java.lang.Integer getPetrolPumps() {
      return petrolPumps;
    }

    /**
      * Sets the value of the 'petrolPumps' field.
      * @param value The value of 'petrolPumps'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setPetrolPumps(java.lang.Integer value) {
      validate(fields()[12], value);
      this.petrolPumps = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'petrolPumps' field has been set.
      * @return True if the 'petrolPumps' field has been set, false otherwise.
      */
    public boolean hasPetrolPumps() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'petrolPumps' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearPetrolPumps() {
      petrolPumps = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'hospitals' field.
      * @return The value.
      */
    public java.lang.Integer getHospitals() {
      return hospitals;
    }

    /**
      * Sets the value of the 'hospitals' field.
      * @param value The value of 'hospitals'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setHospitals(java.lang.Integer value) {
      validate(fields()[13], value);
      this.hospitals = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'hospitals' field has been set.
      * @return True if the 'hospitals' field has been set, false otherwise.
      */
    public boolean hasHospitals() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'hospitals' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearHospitals() {
      hospitals = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceCenters' field.
      * @return The value.
      */
    public java.lang.Integer getServiceCenters() {
      return serviceCenters;
    }

    /**
      * Sets the value of the 'serviceCenters' field.
      * @param value The value of 'serviceCenters'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setServiceCenters(java.lang.Integer value) {
      validate(fields()[14], value);
      this.serviceCenters = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceCenters' field has been set.
      * @return True if the 'serviceCenters' field has been set, false otherwise.
      */
    public boolean hasServiceCenters() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'serviceCenters' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearServiceCenters() {
      serviceCenters = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'tollDetails' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.Toll> getTollDetails() {
      return tollDetails;
    }

    /**
      * Sets the value of the 'tollDetails' field.
      * @param value The value of 'tollDetails'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setTollDetails(java.util.List<com.fretron.Model.Toll> value) {
      validate(fields()[15], value);
      this.tollDetails = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'tollDetails' field has been set.
      * @return True if the 'tollDetails' field has been set, false otherwise.
      */
    public boolean hasTollDetails() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'tollDetails' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearTollDetails() {
      tollDetails = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'customCosts' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.Cost> getCustomCosts() {
      return customCosts;
    }

    /**
      * Sets the value of the 'customCosts' field.
      * @param value The value of 'customCosts'.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder setCustomCosts(java.util.List<com.fretron.Model.Cost> value) {
      validate(fields()[16], value);
      this.customCosts = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'customCosts' field has been set.
      * @return True if the 'customCosts' field has been set, false otherwise.
      */
    public boolean hasCustomCosts() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'customCosts' field.
      * @return This builder.
      */
    public com.fretron.Model.Route.Builder clearCustomCosts() {
      customCosts = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    public Route build() {
      try {
        Route record = new Route();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        if (originBuilder != null) {
          record.origin = this.originBuilder.build();
        } else {
          record.origin = fieldSetFlags()[2] ? this.origin : (com.fretron.Model.Place) defaultValue(fields()[2]);
        }
        if (destinationBuilder != null) {
          record.destination = this.destinationBuilder.build();
        } else {
          record.destination = fieldSetFlags()[3] ? this.destination : (com.fretron.Model.Place) defaultValue(fields()[3]);
        }
        record.wayPoints = fieldSetFlags()[4] ? this.wayPoints : (java.util.List<com.fretron.Model.Place>) defaultValue(fields()[4]);
        record.orgId = fieldSetFlags()[5] ? this.orgId : (java.lang.String) defaultValue(fields()[5]);
        record.distance = fieldSetFlags()[6] ? this.distance : (java.lang.Double) defaultValue(fields()[6]);
        record.totalTime = fieldSetFlags()[7] ? this.totalTime : (java.lang.Long) defaultValue(fields()[7]);
        record.vehicleId = fieldSetFlags()[8] ? this.vehicleId : (java.lang.String) defaultValue(fields()[8]);
        record.polyline = fieldSetFlags()[9] ? this.polyline : (java.lang.String) defaultValue(fields()[9]);
        record.tollCount = fieldSetFlags()[10] ? this.tollCount : (java.lang.Integer) defaultValue(fields()[10]);
        record.tollCost = fieldSetFlags()[11] ? this.tollCost : (java.lang.Double) defaultValue(fields()[11]);
        record.petrolPumps = fieldSetFlags()[12] ? this.petrolPumps : (java.lang.Integer) defaultValue(fields()[12]);
        record.hospitals = fieldSetFlags()[13] ? this.hospitals : (java.lang.Integer) defaultValue(fields()[13]);
        record.serviceCenters = fieldSetFlags()[14] ? this.serviceCenters : (java.lang.Integer) defaultValue(fields()[14]);
        record.tollDetails = fieldSetFlags()[15] ? this.tollDetails : (java.util.List<com.fretron.Model.Toll>) defaultValue(fields()[15]);
        record.customCosts = fieldSetFlags()[16] ? this.customCosts : (java.util.List<com.fretron.Model.Cost>) defaultValue(fields()[16]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
