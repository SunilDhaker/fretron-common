/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class QueueToken extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2326631846016444106L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"QueueToken\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"issueTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"tokenNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"queueId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"expireTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":\"requested\"},{\"name\":\"calledTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.Long issueTime;
  @Deprecated public java.lang.String tokenNumber;
  @Deprecated public java.lang.String queueId;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.lang.Long expireTime;
  @Deprecated public java.lang.String status;
  @Deprecated public java.lang.Long calledTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public QueueToken() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param issueTime The new value for issueTime
   * @param tokenNumber The new value for tokenNumber
   * @param queueId The new value for queueId
   * @param vehicleId The new value for vehicleId
   * @param expireTime The new value for expireTime
   * @param status The new value for status
   * @param calledTime The new value for calledTime
   */
  public QueueToken(java.lang.String uuid, java.lang.Long issueTime, java.lang.String tokenNumber, java.lang.String queueId, java.lang.String vehicleId, java.lang.Long expireTime, java.lang.String status, java.lang.Long calledTime) {
    this.uuid = uuid;
    this.issueTime = issueTime;
    this.tokenNumber = tokenNumber;
    this.queueId = queueId;
    this.vehicleId = vehicleId;
    this.expireTime = expireTime;
    this.status = status;
    this.calledTime = calledTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return issueTime;
    case 2: return tokenNumber;
    case 3: return queueId;
    case 4: return vehicleId;
    case 5: return expireTime;
    case 6: return status;
    case 7: return calledTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: issueTime = (java.lang.Long)value$; break;
    case 2: tokenNumber = (java.lang.String)value$; break;
    case 3: queueId = (java.lang.String)value$; break;
    case 4: vehicleId = (java.lang.String)value$; break;
    case 5: expireTime = (java.lang.Long)value$; break;
    case 6: status = (java.lang.String)value$; break;
    case 7: calledTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'issueTime' field.
   * @return The value of the 'issueTime' field.
   */
  public java.lang.Long getIssueTime() {
    return issueTime;
  }

  /**
   * Sets the value of the 'issueTime' field.
   * @param value the value to set.
   */
  public void setIssueTime(java.lang.Long value) {
    this.issueTime = value;
  }

  /**
   * Gets the value of the 'tokenNumber' field.
   * @return The value of the 'tokenNumber' field.
   */
  public java.lang.String getTokenNumber() {
    return tokenNumber;
  }

  /**
   * Sets the value of the 'tokenNumber' field.
   * @param value the value to set.
   */
  public void setTokenNumber(java.lang.String value) {
    this.tokenNumber = value;
  }

  /**
   * Gets the value of the 'queueId' field.
   * @return The value of the 'queueId' field.
   */
  public java.lang.String getQueueId() {
    return queueId;
  }

  /**
   * Sets the value of the 'queueId' field.
   * @param value the value to set.
   */
  public void setQueueId(java.lang.String value) {
    this.queueId = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'expireTime' field.
   * @return The value of the 'expireTime' field.
   */
  public java.lang.Long getExpireTime() {
    return expireTime;
  }

  /**
   * Sets the value of the 'expireTime' field.
   * @param value the value to set.
   */
  public void setExpireTime(java.lang.Long value) {
    this.expireTime = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'calledTime' field.
   * @return The value of the 'calledTime' field.
   */
  public java.lang.Long getCalledTime() {
    return calledTime;
  }

  /**
   * Sets the value of the 'calledTime' field.
   * @param value the value to set.
   */
  public void setCalledTime(java.lang.Long value) {
    this.calledTime = value;
  }

  /**
   * Creates a new QueueToken RecordBuilder.
   * @return A new QueueToken RecordBuilder
   */
  public static com.fretron.Model.QueueToken.Builder newBuilder() {
    return new com.fretron.Model.QueueToken.Builder();
  }

  /**
   * Creates a new QueueToken RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new QueueToken RecordBuilder
   */
  public static com.fretron.Model.QueueToken.Builder newBuilder(com.fretron.Model.QueueToken.Builder other) {
    return new com.fretron.Model.QueueToken.Builder(other);
  }

  /**
   * Creates a new QueueToken RecordBuilder by copying an existing QueueToken instance.
   * @param other The existing instance to copy.
   * @return A new QueueToken RecordBuilder
   */
  public static com.fretron.Model.QueueToken.Builder newBuilder(com.fretron.Model.QueueToken other) {
    return new com.fretron.Model.QueueToken.Builder(other);
  }

  /**
   * RecordBuilder for QueueToken instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<QueueToken>
    implements org.apache.avro.data.RecordBuilder<QueueToken> {

    private java.lang.String uuid;
    private java.lang.Long issueTime;
    private java.lang.String tokenNumber;
    private java.lang.String queueId;
    private java.lang.String vehicleId;
    private java.lang.Long expireTime;
    private java.lang.String status;
    private java.lang.Long calledTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.QueueToken.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.issueTime)) {
        this.issueTime = data().deepCopy(fields()[1].schema(), other.issueTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tokenNumber)) {
        this.tokenNumber = data().deepCopy(fields()[2].schema(), other.tokenNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.queueId)) {
        this.queueId = data().deepCopy(fields()[3].schema(), other.queueId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[4].schema(), other.vehicleId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.expireTime)) {
        this.expireTime = data().deepCopy(fields()[5].schema(), other.expireTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.calledTime)) {
        this.calledTime = data().deepCopy(fields()[7].schema(), other.calledTime);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing QueueToken instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.QueueToken other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.issueTime)) {
        this.issueTime = data().deepCopy(fields()[1].schema(), other.issueTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tokenNumber)) {
        this.tokenNumber = data().deepCopy(fields()[2].schema(), other.tokenNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.queueId)) {
        this.queueId = data().deepCopy(fields()[3].schema(), other.queueId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[4].schema(), other.vehicleId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.expireTime)) {
        this.expireTime = data().deepCopy(fields()[5].schema(), other.expireTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.calledTime)) {
        this.calledTime = data().deepCopy(fields()[7].schema(), other.calledTime);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'issueTime' field.
      * @return The value.
      */
    public java.lang.Long getIssueTime() {
      return issueTime;
    }

    /**
      * Sets the value of the 'issueTime' field.
      * @param value The value of 'issueTime'.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder setIssueTime(java.lang.Long value) {
      validate(fields()[1], value);
      this.issueTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'issueTime' field has been set.
      * @return True if the 'issueTime' field has been set, false otherwise.
      */
    public boolean hasIssueTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'issueTime' field.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder clearIssueTime() {
      issueTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokenNumber' field.
      * @return The value.
      */
    public java.lang.String getTokenNumber() {
      return tokenNumber;
    }

    /**
      * Sets the value of the 'tokenNumber' field.
      * @param value The value of 'tokenNumber'.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder setTokenNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.tokenNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenNumber' field has been set.
      * @return True if the 'tokenNumber' field has been set, false otherwise.
      */
    public boolean hasTokenNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tokenNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder clearTokenNumber() {
      tokenNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'queueId' field.
      * @return The value.
      */
    public java.lang.String getQueueId() {
      return queueId;
    }

    /**
      * Sets the value of the 'queueId' field.
      * @param value The value of 'queueId'.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder setQueueId(java.lang.String value) {
      validate(fields()[3], value);
      this.queueId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'queueId' field has been set.
      * @return True if the 'queueId' field has been set, false otherwise.
      */
    public boolean hasQueueId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'queueId' field.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder clearQueueId() {
      queueId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder setVehicleId(java.lang.String value) {
      validate(fields()[4], value);
      this.vehicleId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'expireTime' field.
      * @return The value.
      */
    public java.lang.Long getExpireTime() {
      return expireTime;
    }

    /**
      * Sets the value of the 'expireTime' field.
      * @param value The value of 'expireTime'.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder setExpireTime(java.lang.Long value) {
      validate(fields()[5], value);
      this.expireTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'expireTime' field has been set.
      * @return True if the 'expireTime' field has been set, false otherwise.
      */
    public boolean hasExpireTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'expireTime' field.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder clearExpireTime() {
      expireTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder setStatus(java.lang.String value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'calledTime' field.
      * @return The value.
      */
    public java.lang.Long getCalledTime() {
      return calledTime;
    }

    /**
      * Sets the value of the 'calledTime' field.
      * @param value The value of 'calledTime'.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder setCalledTime(java.lang.Long value) {
      validate(fields()[7], value);
      this.calledTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'calledTime' field has been set.
      * @return True if the 'calledTime' field has been set, false otherwise.
      */
    public boolean hasCalledTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'calledTime' field.
      * @return This builder.
      */
    public com.fretron.Model.QueueToken.Builder clearCalledTime() {
      calledTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public QueueToken build() {
      try {
        QueueToken record = new QueueToken();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.issueTime = fieldSetFlags()[1] ? this.issueTime : (java.lang.Long) defaultValue(fields()[1]);
        record.tokenNumber = fieldSetFlags()[2] ? this.tokenNumber : (java.lang.String) defaultValue(fields()[2]);
        record.queueId = fieldSetFlags()[3] ? this.queueId : (java.lang.String) defaultValue(fields()[3]);
        record.vehicleId = fieldSetFlags()[4] ? this.vehicleId : (java.lang.String) defaultValue(fields()[4]);
        record.expireTime = fieldSetFlags()[5] ? this.expireTime : (java.lang.Long) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (java.lang.String) defaultValue(fields()[6]);
        record.calledTime = fieldSetFlags()[7] ? this.calledTime : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
