/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EmailForExistingCustomers extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2959572878676544218L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmailForExistingCustomers\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"emailAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"emailFormat\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"token\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String emailAddress;
  @Deprecated public java.lang.String emailFormat;
  @Deprecated public java.lang.String token;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmailForExistingCustomers() {}

  /**
   * All-args constructor.
   * @param emailAddress The new value for emailAddress
   * @param emailFormat The new value for emailFormat
   * @param token The new value for token
   */
  public EmailForExistingCustomers(java.lang.String emailAddress, java.lang.String emailFormat, java.lang.String token) {
    this.emailAddress = emailAddress;
    this.emailFormat = emailFormat;
    this.token = token;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return emailAddress;
    case 1: return emailFormat;
    case 2: return token;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: emailAddress = (java.lang.String)value$; break;
    case 1: emailFormat = (java.lang.String)value$; break;
    case 2: token = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'emailAddress' field.
   * @return The value of the 'emailAddress' field.
   */
  public java.lang.String getEmailAddress() {
    return emailAddress;
  }

  /**
   * Sets the value of the 'emailAddress' field.
   * @param value the value to set.
   */
  public void setEmailAddress(java.lang.String value) {
    this.emailAddress = value;
  }

  /**
   * Gets the value of the 'emailFormat' field.
   * @return The value of the 'emailFormat' field.
   */
  public java.lang.String getEmailFormat() {
    return emailFormat;
  }

  /**
   * Sets the value of the 'emailFormat' field.
   * @param value the value to set.
   */
  public void setEmailFormat(java.lang.String value) {
    this.emailFormat = value;
  }

  /**
   * Gets the value of the 'token' field.
   * @return The value of the 'token' field.
   */
  public java.lang.String getToken() {
    return token;
  }

  /**
   * Sets the value of the 'token' field.
   * @param value the value to set.
   */
  public void setToken(java.lang.String value) {
    this.token = value;
  }

  /**
   * Creates a new EmailForExistingCustomers RecordBuilder.
   * @return A new EmailForExistingCustomers RecordBuilder
   */
  public static com.fretron.Model.EmailForExistingCustomers.Builder newBuilder() {
    return new com.fretron.Model.EmailForExistingCustomers.Builder();
  }

  /**
   * Creates a new EmailForExistingCustomers RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmailForExistingCustomers RecordBuilder
   */
  public static com.fretron.Model.EmailForExistingCustomers.Builder newBuilder(com.fretron.Model.EmailForExistingCustomers.Builder other) {
    return new com.fretron.Model.EmailForExistingCustomers.Builder(other);
  }

  /**
   * Creates a new EmailForExistingCustomers RecordBuilder by copying an existing EmailForExistingCustomers instance.
   * @param other The existing instance to copy.
   * @return A new EmailForExistingCustomers RecordBuilder
   */
  public static com.fretron.Model.EmailForExistingCustomers.Builder newBuilder(com.fretron.Model.EmailForExistingCustomers other) {
    return new com.fretron.Model.EmailForExistingCustomers.Builder(other);
  }

  /**
   * RecordBuilder for EmailForExistingCustomers instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmailForExistingCustomers>
    implements org.apache.avro.data.RecordBuilder<EmailForExistingCustomers> {

    private java.lang.String emailAddress;
    private java.lang.String emailFormat;
    private java.lang.String token;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.EmailForExistingCustomers.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[0].schema(), other.emailAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.emailFormat)) {
        this.emailFormat = data().deepCopy(fields()[1].schema(), other.emailFormat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.token)) {
        this.token = data().deepCopy(fields()[2].schema(), other.token);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EmailForExistingCustomers instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.EmailForExistingCustomers other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[0].schema(), other.emailAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.emailFormat)) {
        this.emailFormat = data().deepCopy(fields()[1].schema(), other.emailFormat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.token)) {
        this.token = data().deepCopy(fields()[2].schema(), other.token);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'emailAddress' field.
      * @return The value.
      */
    public java.lang.String getEmailAddress() {
      return emailAddress;
    }

    /**
      * Sets the value of the 'emailAddress' field.
      * @param value The value of 'emailAddress'.
      * @return This builder.
      */
    public com.fretron.Model.EmailForExistingCustomers.Builder setEmailAddress(java.lang.String value) {
      validate(fields()[0], value);
      this.emailAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'emailAddress' field has been set.
      * @return True if the 'emailAddress' field has been set, false otherwise.
      */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'emailAddress' field.
      * @return This builder.
      */
    public com.fretron.Model.EmailForExistingCustomers.Builder clearEmailAddress() {
      emailAddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailFormat' field.
      * @return The value.
      */
    public java.lang.String getEmailFormat() {
      return emailFormat;
    }

    /**
      * Sets the value of the 'emailFormat' field.
      * @param value The value of 'emailFormat'.
      * @return This builder.
      */
    public com.fretron.Model.EmailForExistingCustomers.Builder setEmailFormat(java.lang.String value) {
      validate(fields()[1], value);
      this.emailFormat = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'emailFormat' field has been set.
      * @return True if the 'emailFormat' field has been set, false otherwise.
      */
    public boolean hasEmailFormat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'emailFormat' field.
      * @return This builder.
      */
    public com.fretron.Model.EmailForExistingCustomers.Builder clearEmailFormat() {
      emailFormat = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'token' field.
      * @return The value.
      */
    public java.lang.String getToken() {
      return token;
    }

    /**
      * Sets the value of the 'token' field.
      * @param value The value of 'token'.
      * @return This builder.
      */
    public com.fretron.Model.EmailForExistingCustomers.Builder setToken(java.lang.String value) {
      validate(fields()[2], value);
      this.token = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'token' field has been set.
      * @return True if the 'token' field has been set, false otherwise.
      */
    public boolean hasToken() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'token' field.
      * @return This builder.
      */
    public com.fretron.Model.EmailForExistingCustomers.Builder clearToken() {
      token = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public EmailForExistingCustomers build() {
      try {
        EmailForExistingCustomers record = new EmailForExistingCustomers();
        record.emailAddress = fieldSetFlags()[0] ? this.emailAddress : (java.lang.String) defaultValue(fields()[0]);
        record.emailFormat = fieldSetFlags()[1] ? this.emailFormat : (java.lang.String) defaultValue(fields()[1]);
        record.token = fieldSetFlags()[2] ? this.token : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
