/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CostRule extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3940791892878325481L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CostRule\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"uom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isApplicable\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String type;
  @Deprecated public java.lang.Double value;
  @Deprecated public java.lang.String uom;
  @Deprecated public java.lang.String description;
  @Deprecated public java.lang.Boolean isApplicable;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CostRule() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param value The new value for value
   * @param uom The new value for uom
   * @param description The new value for description
   * @param isApplicable The new value for isApplicable
   */
  public CostRule(java.lang.String type, java.lang.Double value, java.lang.String uom, java.lang.String description, java.lang.Boolean isApplicable) {
    this.type = type;
    this.value = value;
    this.uom = uom;
    this.description = description;
    this.isApplicable = isApplicable;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return value;
    case 2: return uom;
    case 3: return description;
    case 4: return isApplicable;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.String)value$; break;
    case 1: value = (java.lang.Double)value$; break;
    case 2: uom = (java.lang.String)value$; break;
    case 3: description = (java.lang.String)value$; break;
    case 4: isApplicable = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.Double getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'uom' field.
   * @return The value of the 'uom' field.
   */
  public java.lang.String getUom() {
    return uom;
  }

  /**
   * Sets the value of the 'uom' field.
   * @param value the value to set.
   */
  public void setUom(java.lang.String value) {
    this.uom = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'isApplicable' field.
   * @return The value of the 'isApplicable' field.
   */
  public java.lang.Boolean getIsApplicable() {
    return isApplicable;
  }

  /**
   * Sets the value of the 'isApplicable' field.
   * @param value the value to set.
   */
  public void setIsApplicable(java.lang.Boolean value) {
    this.isApplicable = value;
  }

  /**
   * Creates a new CostRule RecordBuilder.
   * @return A new CostRule RecordBuilder
   */
  public static com.fretron.Model.CostRule.Builder newBuilder() {
    return new com.fretron.Model.CostRule.Builder();
  }

  /**
   * Creates a new CostRule RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CostRule RecordBuilder
   */
  public static com.fretron.Model.CostRule.Builder newBuilder(com.fretron.Model.CostRule.Builder other) {
    return new com.fretron.Model.CostRule.Builder(other);
  }

  /**
   * Creates a new CostRule RecordBuilder by copying an existing CostRule instance.
   * @param other The existing instance to copy.
   * @return A new CostRule RecordBuilder
   */
  public static com.fretron.Model.CostRule.Builder newBuilder(com.fretron.Model.CostRule other) {
    return new com.fretron.Model.CostRule.Builder(other);
  }

  /**
   * RecordBuilder for CostRule instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CostRule>
    implements org.apache.avro.data.RecordBuilder<CostRule> {

    private java.lang.String type;
    private java.lang.Double value;
    private java.lang.String uom;
    private java.lang.String description;
    private java.lang.Boolean isApplicable;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.CostRule.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uom)) {
        this.uom = data().deepCopy(fields()[2].schema(), other.uom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isApplicable)) {
        this.isApplicable = data().deepCopy(fields()[4].schema(), other.isApplicable);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CostRule instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.CostRule other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uom)) {
        this.uom = data().deepCopy(fields()[2].schema(), other.uom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isApplicable)) {
        this.isApplicable = data().deepCopy(fields()[4].schema(), other.isApplicable);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.Double getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder setValue(java.lang.Double value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'uom' field.
      * @return The value.
      */
    public java.lang.String getUom() {
      return uom;
    }

    /**
      * Sets the value of the 'uom' field.
      * @param value The value of 'uom'.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder setUom(java.lang.String value) {
      validate(fields()[2], value);
      this.uom = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'uom' field has been set.
      * @return True if the 'uom' field has been set, false otherwise.
      */
    public boolean hasUom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'uom' field.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder clearUom() {
      uom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder setDescription(java.lang.String value) {
      validate(fields()[3], value);
      this.description = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder clearDescription() {
      description = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isApplicable' field.
      * @return The value.
      */
    public java.lang.Boolean getIsApplicable() {
      return isApplicable;
    }

    /**
      * Sets the value of the 'isApplicable' field.
      * @param value The value of 'isApplicable'.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder setIsApplicable(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.isApplicable = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'isApplicable' field has been set.
      * @return True if the 'isApplicable' field has been set, false otherwise.
      */
    public boolean hasIsApplicable() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isApplicable' field.
      * @return This builder.
      */
    public com.fretron.Model.CostRule.Builder clearIsApplicable() {
      isApplicable = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public CostRule build() {
      try {
        CostRule record = new CostRule();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.Double) defaultValue(fields()[1]);
        record.uom = fieldSetFlags()[2] ? this.uom : (java.lang.String) defaultValue(fields()[2]);
        record.description = fieldSetFlags()[3] ? this.description : (java.lang.String) defaultValue(fields()[3]);
        record.isApplicable = fieldSetFlags()[4] ? this.isApplicable : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
