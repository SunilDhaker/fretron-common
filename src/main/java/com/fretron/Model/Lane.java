/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Lane extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3106930357277974564L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Lane\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FreightLocation\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"geofence\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geofence\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundry\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Circle\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"radius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GeofenceType\",\"symbols\":[\"Proximity\",\"Polygon\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"favouriteOf\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"FreightLocType\",\"symbols\":[\"Private\",\"Public\"]}],\"default\":null}]}}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"FreightLocation\"}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"baseSource\",\"type\":[\"null\",\"FreightLocation\"],\"default\":null},{\"name\":\"baseDestination\",\"type\":[\"null\",\"FreightLocation\"],\"default\":null},{\"name\":\"baseMaterial\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"baseRate\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"sourceOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"destinationOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"materialOffSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"baseTransitDays\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<com.fretron.Model.FreightLocation> sources;
  @Deprecated public java.util.List<com.fretron.Model.FreightLocation> destination;
  @Deprecated public java.util.List<java.lang.String> material;
  @Deprecated public com.fretron.Model.FreightLocation baseSource;
  @Deprecated public com.fretron.Model.FreightLocation baseDestination;
  @Deprecated public java.lang.String baseMaterial;
  @Deprecated public java.lang.Double baseRate;
  @Deprecated public java.util.List<java.lang.Double> sourceOffSet;
  @Deprecated public java.util.List<java.lang.Double> destinationOffSet;
  @Deprecated public java.util.List<java.lang.Double> materialOffSet;
  @Deprecated public java.lang.Integer baseTransitDays;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Lane() {}

  /**
   * All-args constructor.
   * @param sources The new value for sources
   * @param destination The new value for destination
   * @param material The new value for material
   * @param baseSource The new value for baseSource
   * @param baseDestination The new value for baseDestination
   * @param baseMaterial The new value for baseMaterial
   * @param baseRate The new value for baseRate
   * @param sourceOffSet The new value for sourceOffSet
   * @param destinationOffSet The new value for destinationOffSet
   * @param materialOffSet The new value for materialOffSet
   * @param baseTransitDays The new value for baseTransitDays
   */
  public Lane(java.util.List<com.fretron.Model.FreightLocation> sources, java.util.List<com.fretron.Model.FreightLocation> destination, java.util.List<java.lang.String> material, com.fretron.Model.FreightLocation baseSource, com.fretron.Model.FreightLocation baseDestination, java.lang.String baseMaterial, java.lang.Double baseRate, java.util.List<java.lang.Double> sourceOffSet, java.util.List<java.lang.Double> destinationOffSet, java.util.List<java.lang.Double> materialOffSet, java.lang.Integer baseTransitDays) {
    this.sources = sources;
    this.destination = destination;
    this.material = material;
    this.baseSource = baseSource;
    this.baseDestination = baseDestination;
    this.baseMaterial = baseMaterial;
    this.baseRate = baseRate;
    this.sourceOffSet = sourceOffSet;
    this.destinationOffSet = destinationOffSet;
    this.materialOffSet = materialOffSet;
    this.baseTransitDays = baseTransitDays;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sources;
    case 1: return destination;
    case 2: return material;
    case 3: return baseSource;
    case 4: return baseDestination;
    case 5: return baseMaterial;
    case 6: return baseRate;
    case 7: return sourceOffSet;
    case 8: return destinationOffSet;
    case 9: return materialOffSet;
    case 10: return baseTransitDays;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sources = (java.util.List<com.fretron.Model.FreightLocation>)value$; break;
    case 1: destination = (java.util.List<com.fretron.Model.FreightLocation>)value$; break;
    case 2: material = (java.util.List<java.lang.String>)value$; break;
    case 3: baseSource = (com.fretron.Model.FreightLocation)value$; break;
    case 4: baseDestination = (com.fretron.Model.FreightLocation)value$; break;
    case 5: baseMaterial = (java.lang.String)value$; break;
    case 6: baseRate = (java.lang.Double)value$; break;
    case 7: sourceOffSet = (java.util.List<java.lang.Double>)value$; break;
    case 8: destinationOffSet = (java.util.List<java.lang.Double>)value$; break;
    case 9: materialOffSet = (java.util.List<java.lang.Double>)value$; break;
    case 10: baseTransitDays = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sources' field.
   * @return The value of the 'sources' field.
   */
  public java.util.List<com.fretron.Model.FreightLocation> getSources() {
    return sources;
  }

  /**
   * Sets the value of the 'sources' field.
   * @param value the value to set.
   */
  public void setSources(java.util.List<com.fretron.Model.FreightLocation> value) {
    this.sources = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public java.util.List<com.fretron.Model.FreightLocation> getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(java.util.List<com.fretron.Model.FreightLocation> value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'material' field.
   * @return The value of the 'material' field.
   */
  public java.util.List<java.lang.String> getMaterial() {
    return material;
  }

  /**
   * Sets the value of the 'material' field.
   * @param value the value to set.
   */
  public void setMaterial(java.util.List<java.lang.String> value) {
    this.material = value;
  }

  /**
   * Gets the value of the 'baseSource' field.
   * @return The value of the 'baseSource' field.
   */
  public com.fretron.Model.FreightLocation getBaseSource() {
    return baseSource;
  }

  /**
   * Sets the value of the 'baseSource' field.
   * @param value the value to set.
   */
  public void setBaseSource(com.fretron.Model.FreightLocation value) {
    this.baseSource = value;
  }

  /**
   * Gets the value of the 'baseDestination' field.
   * @return The value of the 'baseDestination' field.
   */
  public com.fretron.Model.FreightLocation getBaseDestination() {
    return baseDestination;
  }

  /**
   * Sets the value of the 'baseDestination' field.
   * @param value the value to set.
   */
  public void setBaseDestination(com.fretron.Model.FreightLocation value) {
    this.baseDestination = value;
  }

  /**
   * Gets the value of the 'baseMaterial' field.
   * @return The value of the 'baseMaterial' field.
   */
  public java.lang.String getBaseMaterial() {
    return baseMaterial;
  }

  /**
   * Sets the value of the 'baseMaterial' field.
   * @param value the value to set.
   */
  public void setBaseMaterial(java.lang.String value) {
    this.baseMaterial = value;
  }

  /**
   * Gets the value of the 'baseRate' field.
   * @return The value of the 'baseRate' field.
   */
  public java.lang.Double getBaseRate() {
    return baseRate;
  }

  /**
   * Sets the value of the 'baseRate' field.
   * @param value the value to set.
   */
  public void setBaseRate(java.lang.Double value) {
    this.baseRate = value;
  }

  /**
   * Gets the value of the 'sourceOffSet' field.
   * @return The value of the 'sourceOffSet' field.
   */
  public java.util.List<java.lang.Double> getSourceOffSet() {
    return sourceOffSet;
  }

  /**
   * Sets the value of the 'sourceOffSet' field.
   * @param value the value to set.
   */
  public void setSourceOffSet(java.util.List<java.lang.Double> value) {
    this.sourceOffSet = value;
  }

  /**
   * Gets the value of the 'destinationOffSet' field.
   * @return The value of the 'destinationOffSet' field.
   */
  public java.util.List<java.lang.Double> getDestinationOffSet() {
    return destinationOffSet;
  }

  /**
   * Sets the value of the 'destinationOffSet' field.
   * @param value the value to set.
   */
  public void setDestinationOffSet(java.util.List<java.lang.Double> value) {
    this.destinationOffSet = value;
  }

  /**
   * Gets the value of the 'materialOffSet' field.
   * @return The value of the 'materialOffSet' field.
   */
  public java.util.List<java.lang.Double> getMaterialOffSet() {
    return materialOffSet;
  }

  /**
   * Sets the value of the 'materialOffSet' field.
   * @param value the value to set.
   */
  public void setMaterialOffSet(java.util.List<java.lang.Double> value) {
    this.materialOffSet = value;
  }

  /**
   * Gets the value of the 'baseTransitDays' field.
   * @return The value of the 'baseTransitDays' field.
   */
  public java.lang.Integer getBaseTransitDays() {
    return baseTransitDays;
  }

  /**
   * Sets the value of the 'baseTransitDays' field.
   * @param value the value to set.
   */
  public void setBaseTransitDays(java.lang.Integer value) {
    this.baseTransitDays = value;
  }

  /**
   * Creates a new Lane RecordBuilder.
   * @return A new Lane RecordBuilder
   */
  public static com.fretron.Model.Lane.Builder newBuilder() {
    return new com.fretron.Model.Lane.Builder();
  }

  /**
   * Creates a new Lane RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Lane RecordBuilder
   */
  public static com.fretron.Model.Lane.Builder newBuilder(com.fretron.Model.Lane.Builder other) {
    return new com.fretron.Model.Lane.Builder(other);
  }

  /**
   * Creates a new Lane RecordBuilder by copying an existing Lane instance.
   * @param other The existing instance to copy.
   * @return A new Lane RecordBuilder
   */
  public static com.fretron.Model.Lane.Builder newBuilder(com.fretron.Model.Lane other) {
    return new com.fretron.Model.Lane.Builder(other);
  }

  /**
   * RecordBuilder for Lane instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Lane>
    implements org.apache.avro.data.RecordBuilder<Lane> {

    private java.util.List<com.fretron.Model.FreightLocation> sources;
    private java.util.List<com.fretron.Model.FreightLocation> destination;
    private java.util.List<java.lang.String> material;
    private com.fretron.Model.FreightLocation baseSource;
    private com.fretron.Model.FreightLocation.Builder baseSourceBuilder;
    private com.fretron.Model.FreightLocation baseDestination;
    private com.fretron.Model.FreightLocation.Builder baseDestinationBuilder;
    private java.lang.String baseMaterial;
    private java.lang.Double baseRate;
    private java.util.List<java.lang.Double> sourceOffSet;
    private java.util.List<java.lang.Double> destinationOffSet;
    private java.util.List<java.lang.Double> materialOffSet;
    private java.lang.Integer baseTransitDays;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Lane.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sources)) {
        this.sources = data().deepCopy(fields()[0].schema(), other.sources);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.destination)) {
        this.destination = data().deepCopy(fields()[1].schema(), other.destination);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.material)) {
        this.material = data().deepCopy(fields()[2].schema(), other.material);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.baseSource)) {
        this.baseSource = data().deepCopy(fields()[3].schema(), other.baseSource);
        fieldSetFlags()[3] = true;
      }
      if (other.hasBaseSourceBuilder()) {
        this.baseSourceBuilder = com.fretron.Model.FreightLocation.newBuilder(other.getBaseSourceBuilder());
      }
      if (isValidValue(fields()[4], other.baseDestination)) {
        this.baseDestination = data().deepCopy(fields()[4].schema(), other.baseDestination);
        fieldSetFlags()[4] = true;
      }
      if (other.hasBaseDestinationBuilder()) {
        this.baseDestinationBuilder = com.fretron.Model.FreightLocation.newBuilder(other.getBaseDestinationBuilder());
      }
      if (isValidValue(fields()[5], other.baseMaterial)) {
        this.baseMaterial = data().deepCopy(fields()[5].schema(), other.baseMaterial);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.baseRate)) {
        this.baseRate = data().deepCopy(fields()[6].schema(), other.baseRate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sourceOffSet)) {
        this.sourceOffSet = data().deepCopy(fields()[7].schema(), other.sourceOffSet);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.destinationOffSet)) {
        this.destinationOffSet = data().deepCopy(fields()[8].schema(), other.destinationOffSet);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.materialOffSet)) {
        this.materialOffSet = data().deepCopy(fields()[9].schema(), other.materialOffSet);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.baseTransitDays)) {
        this.baseTransitDays = data().deepCopy(fields()[10].schema(), other.baseTransitDays);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Lane instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Lane other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sources)) {
        this.sources = data().deepCopy(fields()[0].schema(), other.sources);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.destination)) {
        this.destination = data().deepCopy(fields()[1].schema(), other.destination);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.material)) {
        this.material = data().deepCopy(fields()[2].schema(), other.material);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.baseSource)) {
        this.baseSource = data().deepCopy(fields()[3].schema(), other.baseSource);
        fieldSetFlags()[3] = true;
      }
      this.baseSourceBuilder = null;
      if (isValidValue(fields()[4], other.baseDestination)) {
        this.baseDestination = data().deepCopy(fields()[4].schema(), other.baseDestination);
        fieldSetFlags()[4] = true;
      }
      this.baseDestinationBuilder = null;
      if (isValidValue(fields()[5], other.baseMaterial)) {
        this.baseMaterial = data().deepCopy(fields()[5].schema(), other.baseMaterial);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.baseRate)) {
        this.baseRate = data().deepCopy(fields()[6].schema(), other.baseRate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sourceOffSet)) {
        this.sourceOffSet = data().deepCopy(fields()[7].schema(), other.sourceOffSet);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.destinationOffSet)) {
        this.destinationOffSet = data().deepCopy(fields()[8].schema(), other.destinationOffSet);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.materialOffSet)) {
        this.materialOffSet = data().deepCopy(fields()[9].schema(), other.materialOffSet);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.baseTransitDays)) {
        this.baseTransitDays = data().deepCopy(fields()[10].schema(), other.baseTransitDays);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'sources' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.FreightLocation> getSources() {
      return sources;
    }

    /**
      * Sets the value of the 'sources' field.
      * @param value The value of 'sources'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setSources(java.util.List<com.fretron.Model.FreightLocation> value) {
      validate(fields()[0], value);
      this.sources = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sources' field has been set.
      * @return True if the 'sources' field has been set, false otherwise.
      */
    public boolean hasSources() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sources' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearSources() {
      sources = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.FreightLocation> getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setDestination(java.util.List<com.fretron.Model.FreightLocation> value) {
      validate(fields()[1], value);
      this.destination = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearDestination() {
      destination = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'material' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getMaterial() {
      return material;
    }

    /**
      * Sets the value of the 'material' field.
      * @param value The value of 'material'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setMaterial(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.material = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'material' field has been set.
      * @return True if the 'material' field has been set, false otherwise.
      */
    public boolean hasMaterial() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'material' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearMaterial() {
      material = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseSource' field.
      * @return The value.
      */
    public com.fretron.Model.FreightLocation getBaseSource() {
      return baseSource;
    }

    /**
      * Sets the value of the 'baseSource' field.
      * @param value The value of 'baseSource'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setBaseSource(com.fretron.Model.FreightLocation value) {
      validate(fields()[3], value);
      this.baseSourceBuilder = null;
      this.baseSource = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'baseSource' field has been set.
      * @return True if the 'baseSource' field has been set, false otherwise.
      */
    public boolean hasBaseSource() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'baseSource' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.FreightLocation.Builder getBaseSourceBuilder() {
      if (baseSourceBuilder == null) {
        if (hasBaseSource()) {
          setBaseSourceBuilder(com.fretron.Model.FreightLocation.newBuilder(baseSource));
        } else {
          setBaseSourceBuilder(com.fretron.Model.FreightLocation.newBuilder());
        }
      }
      return baseSourceBuilder;
    }

    /**
     * Sets the Builder instance for the 'baseSource' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Lane.Builder setBaseSourceBuilder(com.fretron.Model.FreightLocation.Builder value) {
      clearBaseSource();
      baseSourceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'baseSource' field has an active Builder instance
     * @return True if the 'baseSource' field has an active Builder instance
     */
    public boolean hasBaseSourceBuilder() {
      return baseSourceBuilder != null;
    }

    /**
      * Clears the value of the 'baseSource' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearBaseSource() {
      baseSource = null;
      baseSourceBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseDestination' field.
      * @return The value.
      */
    public com.fretron.Model.FreightLocation getBaseDestination() {
      return baseDestination;
    }

    /**
      * Sets the value of the 'baseDestination' field.
      * @param value The value of 'baseDestination'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setBaseDestination(com.fretron.Model.FreightLocation value) {
      validate(fields()[4], value);
      this.baseDestinationBuilder = null;
      this.baseDestination = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'baseDestination' field has been set.
      * @return True if the 'baseDestination' field has been set, false otherwise.
      */
    public boolean hasBaseDestination() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'baseDestination' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.FreightLocation.Builder getBaseDestinationBuilder() {
      if (baseDestinationBuilder == null) {
        if (hasBaseDestination()) {
          setBaseDestinationBuilder(com.fretron.Model.FreightLocation.newBuilder(baseDestination));
        } else {
          setBaseDestinationBuilder(com.fretron.Model.FreightLocation.newBuilder());
        }
      }
      return baseDestinationBuilder;
    }

    /**
     * Sets the Builder instance for the 'baseDestination' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Lane.Builder setBaseDestinationBuilder(com.fretron.Model.FreightLocation.Builder value) {
      clearBaseDestination();
      baseDestinationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'baseDestination' field has an active Builder instance
     * @return True if the 'baseDestination' field has an active Builder instance
     */
    public boolean hasBaseDestinationBuilder() {
      return baseDestinationBuilder != null;
    }

    /**
      * Clears the value of the 'baseDestination' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearBaseDestination() {
      baseDestination = null;
      baseDestinationBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseMaterial' field.
      * @return The value.
      */
    public java.lang.String getBaseMaterial() {
      return baseMaterial;
    }

    /**
      * Sets the value of the 'baseMaterial' field.
      * @param value The value of 'baseMaterial'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setBaseMaterial(java.lang.String value) {
      validate(fields()[5], value);
      this.baseMaterial = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'baseMaterial' field has been set.
      * @return True if the 'baseMaterial' field has been set, false otherwise.
      */
    public boolean hasBaseMaterial() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'baseMaterial' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearBaseMaterial() {
      baseMaterial = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseRate' field.
      * @return The value.
      */
    public java.lang.Double getBaseRate() {
      return baseRate;
    }

    /**
      * Sets the value of the 'baseRate' field.
      * @param value The value of 'baseRate'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setBaseRate(java.lang.Double value) {
      validate(fields()[6], value);
      this.baseRate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'baseRate' field has been set.
      * @return True if the 'baseRate' field has been set, false otherwise.
      */
    public boolean hasBaseRate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'baseRate' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearBaseRate() {
      baseRate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceOffSet' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSourceOffSet() {
      return sourceOffSet;
    }

    /**
      * Sets the value of the 'sourceOffSet' field.
      * @param value The value of 'sourceOffSet'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setSourceOffSet(java.util.List<java.lang.Double> value) {
      validate(fields()[7], value);
      this.sourceOffSet = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceOffSet' field has been set.
      * @return True if the 'sourceOffSet' field has been set, false otherwise.
      */
    public boolean hasSourceOffSet() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sourceOffSet' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearSourceOffSet() {
      sourceOffSet = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationOffSet' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getDestinationOffSet() {
      return destinationOffSet;
    }

    /**
      * Sets the value of the 'destinationOffSet' field.
      * @param value The value of 'destinationOffSet'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setDestinationOffSet(java.util.List<java.lang.Double> value) {
      validate(fields()[8], value);
      this.destinationOffSet = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationOffSet' field has been set.
      * @return True if the 'destinationOffSet' field has been set, false otherwise.
      */
    public boolean hasDestinationOffSet() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'destinationOffSet' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearDestinationOffSet() {
      destinationOffSet = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialOffSet' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getMaterialOffSet() {
      return materialOffSet;
    }

    /**
      * Sets the value of the 'materialOffSet' field.
      * @param value The value of 'materialOffSet'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setMaterialOffSet(java.util.List<java.lang.Double> value) {
      validate(fields()[9], value);
      this.materialOffSet = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'materialOffSet' field has been set.
      * @return True if the 'materialOffSet' field has been set, false otherwise.
      */
    public boolean hasMaterialOffSet() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'materialOffSet' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearMaterialOffSet() {
      materialOffSet = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseTransitDays' field.
      * @return The value.
      */
    public java.lang.Integer getBaseTransitDays() {
      return baseTransitDays;
    }

    /**
      * Sets the value of the 'baseTransitDays' field.
      * @param value The value of 'baseTransitDays'.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder setBaseTransitDays(java.lang.Integer value) {
      validate(fields()[10], value);
      this.baseTransitDays = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'baseTransitDays' field has been set.
      * @return True if the 'baseTransitDays' field has been set, false otherwise.
      */
    public boolean hasBaseTransitDays() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'baseTransitDays' field.
      * @return This builder.
      */
    public com.fretron.Model.Lane.Builder clearBaseTransitDays() {
      baseTransitDays = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public Lane build() {
      try {
        Lane record = new Lane();
        record.sources = fieldSetFlags()[0] ? this.sources : (java.util.List<com.fretron.Model.FreightLocation>) defaultValue(fields()[0]);
        record.destination = fieldSetFlags()[1] ? this.destination : (java.util.List<com.fretron.Model.FreightLocation>) defaultValue(fields()[1]);
        record.material = fieldSetFlags()[2] ? this.material : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        if (baseSourceBuilder != null) {
          record.baseSource = this.baseSourceBuilder.build();
        } else {
          record.baseSource = fieldSetFlags()[3] ? this.baseSource : (com.fretron.Model.FreightLocation) defaultValue(fields()[3]);
        }
        if (baseDestinationBuilder != null) {
          record.baseDestination = this.baseDestinationBuilder.build();
        } else {
          record.baseDestination = fieldSetFlags()[4] ? this.baseDestination : (com.fretron.Model.FreightLocation) defaultValue(fields()[4]);
        }
        record.baseMaterial = fieldSetFlags()[5] ? this.baseMaterial : (java.lang.String) defaultValue(fields()[5]);
        record.baseRate = fieldSetFlags()[6] ? this.baseRate : (java.lang.Double) defaultValue(fields()[6]);
        record.sourceOffSet = fieldSetFlags()[7] ? this.sourceOffSet : (java.util.List<java.lang.Double>) defaultValue(fields()[7]);
        record.destinationOffSet = fieldSetFlags()[8] ? this.destinationOffSet : (java.util.List<java.lang.Double>) defaultValue(fields()[8]);
        record.materialOffSet = fieldSetFlags()[9] ? this.materialOffSet : (java.util.List<java.lang.Double>) defaultValue(fields()[9]);
        record.baseTransitDays = fieldSetFlags()[10] ? this.baseTransitDays : (java.lang.Integer) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
