/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LoadInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6870826827060389732L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoadInfo\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"measurmentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unitOfMeasurment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plannedQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"loadedQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"deliveredQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"shortage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"frieghtDeductableQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"claimQuantity\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String measurmentType;
  @Deprecated public java.lang.String unitOfMeasurment;
  @Deprecated public java.lang.Double plannedQuantity;
  @Deprecated public java.lang.Double loadedQuantity;
  @Deprecated public java.lang.Double deliveredQuantity;
  @Deprecated public java.lang.Double shortage;
  @Deprecated public java.lang.Double frieghtDeductableQuantity;
  @Deprecated public java.lang.Double claimQuantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoadInfo() {}

  /**
   * All-args constructor.
   * @param measurmentType The new value for measurmentType
   * @param unitOfMeasurment The new value for unitOfMeasurment
   * @param plannedQuantity The new value for plannedQuantity
   * @param loadedQuantity The new value for loadedQuantity
   * @param deliveredQuantity The new value for deliveredQuantity
   * @param shortage The new value for shortage
   * @param frieghtDeductableQuantity The new value for frieghtDeductableQuantity
   * @param claimQuantity The new value for claimQuantity
   */
  public LoadInfo(java.lang.String measurmentType, java.lang.String unitOfMeasurment, java.lang.Double plannedQuantity, java.lang.Double loadedQuantity, java.lang.Double deliveredQuantity, java.lang.Double shortage, java.lang.Double frieghtDeductableQuantity, java.lang.Double claimQuantity) {
    this.measurmentType = measurmentType;
    this.unitOfMeasurment = unitOfMeasurment;
    this.plannedQuantity = plannedQuantity;
    this.loadedQuantity = loadedQuantity;
    this.deliveredQuantity = deliveredQuantity;
    this.shortage = shortage;
    this.frieghtDeductableQuantity = frieghtDeductableQuantity;
    this.claimQuantity = claimQuantity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return measurmentType;
    case 1: return unitOfMeasurment;
    case 2: return plannedQuantity;
    case 3: return loadedQuantity;
    case 4: return deliveredQuantity;
    case 5: return shortage;
    case 6: return frieghtDeductableQuantity;
    case 7: return claimQuantity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: measurmentType = (java.lang.String)value$; break;
    case 1: unitOfMeasurment = (java.lang.String)value$; break;
    case 2: plannedQuantity = (java.lang.Double)value$; break;
    case 3: loadedQuantity = (java.lang.Double)value$; break;
    case 4: deliveredQuantity = (java.lang.Double)value$; break;
    case 5: shortage = (java.lang.Double)value$; break;
    case 6: frieghtDeductableQuantity = (java.lang.Double)value$; break;
    case 7: claimQuantity = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'measurmentType' field.
   * @return The value of the 'measurmentType' field.
   */
  public java.lang.String getMeasurmentType() {
    return measurmentType;
  }

  /**
   * Sets the value of the 'measurmentType' field.
   * @param value the value to set.
   */
  public void setMeasurmentType(java.lang.String value) {
    this.measurmentType = value;
  }

  /**
   * Gets the value of the 'unitOfMeasurment' field.
   * @return The value of the 'unitOfMeasurment' field.
   */
  public java.lang.String getUnitOfMeasurment() {
    return unitOfMeasurment;
  }

  /**
   * Sets the value of the 'unitOfMeasurment' field.
   * @param value the value to set.
   */
  public void setUnitOfMeasurment(java.lang.String value) {
    this.unitOfMeasurment = value;
  }

  /**
   * Gets the value of the 'plannedQuantity' field.
   * @return The value of the 'plannedQuantity' field.
   */
  public java.lang.Double getPlannedQuantity() {
    return plannedQuantity;
  }

  /**
   * Sets the value of the 'plannedQuantity' field.
   * @param value the value to set.
   */
  public void setPlannedQuantity(java.lang.Double value) {
    this.plannedQuantity = value;
  }

  /**
   * Gets the value of the 'loadedQuantity' field.
   * @return The value of the 'loadedQuantity' field.
   */
  public java.lang.Double getLoadedQuantity() {
    return loadedQuantity;
  }

  /**
   * Sets the value of the 'loadedQuantity' field.
   * @param value the value to set.
   */
  public void setLoadedQuantity(java.lang.Double value) {
    this.loadedQuantity = value;
  }

  /**
   * Gets the value of the 'deliveredQuantity' field.
   * @return The value of the 'deliveredQuantity' field.
   */
  public java.lang.Double getDeliveredQuantity() {
    return deliveredQuantity;
  }

  /**
   * Sets the value of the 'deliveredQuantity' field.
   * @param value the value to set.
   */
  public void setDeliveredQuantity(java.lang.Double value) {
    this.deliveredQuantity = value;
  }

  /**
   * Gets the value of the 'shortage' field.
   * @return The value of the 'shortage' field.
   */
  public java.lang.Double getShortage() {
    return shortage;
  }

  /**
   * Sets the value of the 'shortage' field.
   * @param value the value to set.
   */
  public void setShortage(java.lang.Double value) {
    this.shortage = value;
  }

  /**
   * Gets the value of the 'frieghtDeductableQuantity' field.
   * @return The value of the 'frieghtDeductableQuantity' field.
   */
  public java.lang.Double getFrieghtDeductableQuantity() {
    return frieghtDeductableQuantity;
  }

  /**
   * Sets the value of the 'frieghtDeductableQuantity' field.
   * @param value the value to set.
   */
  public void setFrieghtDeductableQuantity(java.lang.Double value) {
    this.frieghtDeductableQuantity = value;
  }

  /**
   * Gets the value of the 'claimQuantity' field.
   * @return The value of the 'claimQuantity' field.
   */
  public java.lang.Double getClaimQuantity() {
    return claimQuantity;
  }

  /**
   * Sets the value of the 'claimQuantity' field.
   * @param value the value to set.
   */
  public void setClaimQuantity(java.lang.Double value) {
    this.claimQuantity = value;
  }

  /**
   * Creates a new LoadInfo RecordBuilder.
   * @return A new LoadInfo RecordBuilder
   */
  public static com.fretron.Model.LoadInfo.Builder newBuilder() {
    return new com.fretron.Model.LoadInfo.Builder();
  }

  /**
   * Creates a new LoadInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoadInfo RecordBuilder
   */
  public static com.fretron.Model.LoadInfo.Builder newBuilder(com.fretron.Model.LoadInfo.Builder other) {
    return new com.fretron.Model.LoadInfo.Builder(other);
  }

  /**
   * Creates a new LoadInfo RecordBuilder by copying an existing LoadInfo instance.
   * @param other The existing instance to copy.
   * @return A new LoadInfo RecordBuilder
   */
  public static com.fretron.Model.LoadInfo.Builder newBuilder(com.fretron.Model.LoadInfo other) {
    return new com.fretron.Model.LoadInfo.Builder(other);
  }

  /**
   * RecordBuilder for LoadInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoadInfo>
    implements org.apache.avro.data.RecordBuilder<LoadInfo> {

    private java.lang.String measurmentType;
    private java.lang.String unitOfMeasurment;
    private java.lang.Double plannedQuantity;
    private java.lang.Double loadedQuantity;
    private java.lang.Double deliveredQuantity;
    private java.lang.Double shortage;
    private java.lang.Double frieghtDeductableQuantity;
    private java.lang.Double claimQuantity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.LoadInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.measurmentType)) {
        this.measurmentType = data().deepCopy(fields()[0].schema(), other.measurmentType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unitOfMeasurment)) {
        this.unitOfMeasurment = data().deepCopy(fields()[1].schema(), other.unitOfMeasurment);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.plannedQuantity)) {
        this.plannedQuantity = data().deepCopy(fields()[2].schema(), other.plannedQuantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.loadedQuantity)) {
        this.loadedQuantity = data().deepCopy(fields()[3].schema(), other.loadedQuantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.deliveredQuantity)) {
        this.deliveredQuantity = data().deepCopy(fields()[4].schema(), other.deliveredQuantity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.shortage)) {
        this.shortage = data().deepCopy(fields()[5].schema(), other.shortage);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.frieghtDeductableQuantity)) {
        this.frieghtDeductableQuantity = data().deepCopy(fields()[6].schema(), other.frieghtDeductableQuantity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.claimQuantity)) {
        this.claimQuantity = data().deepCopy(fields()[7].schema(), other.claimQuantity);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LoadInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.LoadInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.measurmentType)) {
        this.measurmentType = data().deepCopy(fields()[0].schema(), other.measurmentType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unitOfMeasurment)) {
        this.unitOfMeasurment = data().deepCopy(fields()[1].schema(), other.unitOfMeasurment);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.plannedQuantity)) {
        this.plannedQuantity = data().deepCopy(fields()[2].schema(), other.plannedQuantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.loadedQuantity)) {
        this.loadedQuantity = data().deepCopy(fields()[3].schema(), other.loadedQuantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.deliveredQuantity)) {
        this.deliveredQuantity = data().deepCopy(fields()[4].schema(), other.deliveredQuantity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.shortage)) {
        this.shortage = data().deepCopy(fields()[5].schema(), other.shortage);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.frieghtDeductableQuantity)) {
        this.frieghtDeductableQuantity = data().deepCopy(fields()[6].schema(), other.frieghtDeductableQuantity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.claimQuantity)) {
        this.claimQuantity = data().deepCopy(fields()[7].schema(), other.claimQuantity);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'measurmentType' field.
      * @return The value.
      */
    public java.lang.String getMeasurmentType() {
      return measurmentType;
    }

    /**
      * Sets the value of the 'measurmentType' field.
      * @param value The value of 'measurmentType'.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder setMeasurmentType(java.lang.String value) {
      validate(fields()[0], value);
      this.measurmentType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'measurmentType' field has been set.
      * @return True if the 'measurmentType' field has been set, false otherwise.
      */
    public boolean hasMeasurmentType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'measurmentType' field.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder clearMeasurmentType() {
      measurmentType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitOfMeasurment' field.
      * @return The value.
      */
    public java.lang.String getUnitOfMeasurment() {
      return unitOfMeasurment;
    }

    /**
      * Sets the value of the 'unitOfMeasurment' field.
      * @param value The value of 'unitOfMeasurment'.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder setUnitOfMeasurment(java.lang.String value) {
      validate(fields()[1], value);
      this.unitOfMeasurment = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'unitOfMeasurment' field has been set.
      * @return True if the 'unitOfMeasurment' field has been set, false otherwise.
      */
    public boolean hasUnitOfMeasurment() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'unitOfMeasurment' field.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder clearUnitOfMeasurment() {
      unitOfMeasurment = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'plannedQuantity' field.
      * @return The value.
      */
    public java.lang.Double getPlannedQuantity() {
      return plannedQuantity;
    }

    /**
      * Sets the value of the 'plannedQuantity' field.
      * @param value The value of 'plannedQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder setPlannedQuantity(java.lang.Double value) {
      validate(fields()[2], value);
      this.plannedQuantity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'plannedQuantity' field has been set.
      * @return True if the 'plannedQuantity' field has been set, false otherwise.
      */
    public boolean hasPlannedQuantity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'plannedQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder clearPlannedQuantity() {
      plannedQuantity = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'loadedQuantity' field.
      * @return The value.
      */
    public java.lang.Double getLoadedQuantity() {
      return loadedQuantity;
    }

    /**
      * Sets the value of the 'loadedQuantity' field.
      * @param value The value of 'loadedQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder setLoadedQuantity(java.lang.Double value) {
      validate(fields()[3], value);
      this.loadedQuantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'loadedQuantity' field has been set.
      * @return True if the 'loadedQuantity' field has been set, false otherwise.
      */
    public boolean hasLoadedQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'loadedQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder clearLoadedQuantity() {
      loadedQuantity = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'deliveredQuantity' field.
      * @return The value.
      */
    public java.lang.Double getDeliveredQuantity() {
      return deliveredQuantity;
    }

    /**
      * Sets the value of the 'deliveredQuantity' field.
      * @param value The value of 'deliveredQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder setDeliveredQuantity(java.lang.Double value) {
      validate(fields()[4], value);
      this.deliveredQuantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'deliveredQuantity' field has been set.
      * @return True if the 'deliveredQuantity' field has been set, false otherwise.
      */
    public boolean hasDeliveredQuantity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'deliveredQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder clearDeliveredQuantity() {
      deliveredQuantity = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'shortage' field.
      * @return The value.
      */
    public java.lang.Double getShortage() {
      return shortage;
    }

    /**
      * Sets the value of the 'shortage' field.
      * @param value The value of 'shortage'.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder setShortage(java.lang.Double value) {
      validate(fields()[5], value);
      this.shortage = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'shortage' field has been set.
      * @return True if the 'shortage' field has been set, false otherwise.
      */
    public boolean hasShortage() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'shortage' field.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder clearShortage() {
      shortage = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'frieghtDeductableQuantity' field.
      * @return The value.
      */
    public java.lang.Double getFrieghtDeductableQuantity() {
      return frieghtDeductableQuantity;
    }

    /**
      * Sets the value of the 'frieghtDeductableQuantity' field.
      * @param value The value of 'frieghtDeductableQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder setFrieghtDeductableQuantity(java.lang.Double value) {
      validate(fields()[6], value);
      this.frieghtDeductableQuantity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'frieghtDeductableQuantity' field has been set.
      * @return True if the 'frieghtDeductableQuantity' field has been set, false otherwise.
      */
    public boolean hasFrieghtDeductableQuantity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'frieghtDeductableQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder clearFrieghtDeductableQuantity() {
      frieghtDeductableQuantity = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'claimQuantity' field.
      * @return The value.
      */
    public java.lang.Double getClaimQuantity() {
      return claimQuantity;
    }

    /**
      * Sets the value of the 'claimQuantity' field.
      * @param value The value of 'claimQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder setClaimQuantity(java.lang.Double value) {
      validate(fields()[7], value);
      this.claimQuantity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'claimQuantity' field has been set.
      * @return True if the 'claimQuantity' field has been set, false otherwise.
      */
    public boolean hasClaimQuantity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'claimQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.LoadInfo.Builder clearClaimQuantity() {
      claimQuantity = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public LoadInfo build() {
      try {
        LoadInfo record = new LoadInfo();
        record.measurmentType = fieldSetFlags()[0] ? this.measurmentType : (java.lang.String) defaultValue(fields()[0]);
        record.unitOfMeasurment = fieldSetFlags()[1] ? this.unitOfMeasurment : (java.lang.String) defaultValue(fields()[1]);
        record.plannedQuantity = fieldSetFlags()[2] ? this.plannedQuantity : (java.lang.Double) defaultValue(fields()[2]);
        record.loadedQuantity = fieldSetFlags()[3] ? this.loadedQuantity : (java.lang.Double) defaultValue(fields()[3]);
        record.deliveredQuantity = fieldSetFlags()[4] ? this.deliveredQuantity : (java.lang.Double) defaultValue(fields()[4]);
        record.shortage = fieldSetFlags()[5] ? this.shortage : (java.lang.Double) defaultValue(fields()[5]);
        record.frieghtDeductableQuantity = fieldSetFlags()[6] ? this.frieghtDeductableQuantity : (java.lang.Double) defaultValue(fields()[6]);
        record.claimQuantity = fieldSetFlags()[7] ? this.claimQuantity : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
