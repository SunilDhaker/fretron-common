/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PodTrackingDetail extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2114953766676621919L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PodTrackingDetail\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"currentState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"currentStateDetail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"currentStateSince\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"nextState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nextStateDetail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nextStateExpectedTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"trackingRemark\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String currentState;
  @Deprecated public java.lang.String currentStateDetail;
  @Deprecated public java.lang.Long currentStateSince;
  @Deprecated public java.lang.String nextState;
  @Deprecated public java.lang.String nextStateDetail;
  @Deprecated public java.lang.Long nextStateExpectedTime;
  @Deprecated public java.lang.String trackingRemark;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PodTrackingDetail() {}

  /**
   * All-args constructor.
   * @param currentState The new value for currentState
   * @param currentStateDetail The new value for currentStateDetail
   * @param currentStateSince The new value for currentStateSince
   * @param nextState The new value for nextState
   * @param nextStateDetail The new value for nextStateDetail
   * @param nextStateExpectedTime The new value for nextStateExpectedTime
   * @param trackingRemark The new value for trackingRemark
   */
  public PodTrackingDetail(java.lang.String currentState, java.lang.String currentStateDetail, java.lang.Long currentStateSince, java.lang.String nextState, java.lang.String nextStateDetail, java.lang.Long nextStateExpectedTime, java.lang.String trackingRemark) {
    this.currentState = currentState;
    this.currentStateDetail = currentStateDetail;
    this.currentStateSince = currentStateSince;
    this.nextState = nextState;
    this.nextStateDetail = nextStateDetail;
    this.nextStateExpectedTime = nextStateExpectedTime;
    this.trackingRemark = trackingRemark;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return currentState;
    case 1: return currentStateDetail;
    case 2: return currentStateSince;
    case 3: return nextState;
    case 4: return nextStateDetail;
    case 5: return nextStateExpectedTime;
    case 6: return trackingRemark;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: currentState = (java.lang.String)value$; break;
    case 1: currentStateDetail = (java.lang.String)value$; break;
    case 2: currentStateSince = (java.lang.Long)value$; break;
    case 3: nextState = (java.lang.String)value$; break;
    case 4: nextStateDetail = (java.lang.String)value$; break;
    case 5: nextStateExpectedTime = (java.lang.Long)value$; break;
    case 6: trackingRemark = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'currentState' field.
   * @return The value of the 'currentState' field.
   */
  public java.lang.String getCurrentState() {
    return currentState;
  }

  /**
   * Sets the value of the 'currentState' field.
   * @param value the value to set.
   */
  public void setCurrentState(java.lang.String value) {
    this.currentState = value;
  }

  /**
   * Gets the value of the 'currentStateDetail' field.
   * @return The value of the 'currentStateDetail' field.
   */
  public java.lang.String getCurrentStateDetail() {
    return currentStateDetail;
  }

  /**
   * Sets the value of the 'currentStateDetail' field.
   * @param value the value to set.
   */
  public void setCurrentStateDetail(java.lang.String value) {
    this.currentStateDetail = value;
  }

  /**
   * Gets the value of the 'currentStateSince' field.
   * @return The value of the 'currentStateSince' field.
   */
  public java.lang.Long getCurrentStateSince() {
    return currentStateSince;
  }

  /**
   * Sets the value of the 'currentStateSince' field.
   * @param value the value to set.
   */
  public void setCurrentStateSince(java.lang.Long value) {
    this.currentStateSince = value;
  }

  /**
   * Gets the value of the 'nextState' field.
   * @return The value of the 'nextState' field.
   */
  public java.lang.String getNextState() {
    return nextState;
  }

  /**
   * Sets the value of the 'nextState' field.
   * @param value the value to set.
   */
  public void setNextState(java.lang.String value) {
    this.nextState = value;
  }

  /**
   * Gets the value of the 'nextStateDetail' field.
   * @return The value of the 'nextStateDetail' field.
   */
  public java.lang.String getNextStateDetail() {
    return nextStateDetail;
  }

  /**
   * Sets the value of the 'nextStateDetail' field.
   * @param value the value to set.
   */
  public void setNextStateDetail(java.lang.String value) {
    this.nextStateDetail = value;
  }

  /**
   * Gets the value of the 'nextStateExpectedTime' field.
   * @return The value of the 'nextStateExpectedTime' field.
   */
  public java.lang.Long getNextStateExpectedTime() {
    return nextStateExpectedTime;
  }

  /**
   * Sets the value of the 'nextStateExpectedTime' field.
   * @param value the value to set.
   */
  public void setNextStateExpectedTime(java.lang.Long value) {
    this.nextStateExpectedTime = value;
  }

  /**
   * Gets the value of the 'trackingRemark' field.
   * @return The value of the 'trackingRemark' field.
   */
  public java.lang.String getTrackingRemark() {
    return trackingRemark;
  }

  /**
   * Sets the value of the 'trackingRemark' field.
   * @param value the value to set.
   */
  public void setTrackingRemark(java.lang.String value) {
    this.trackingRemark = value;
  }

  /**
   * Creates a new PodTrackingDetail RecordBuilder.
   * @return A new PodTrackingDetail RecordBuilder
   */
  public static com.fretron.Model.PodTrackingDetail.Builder newBuilder() {
    return new com.fretron.Model.PodTrackingDetail.Builder();
  }

  /**
   * Creates a new PodTrackingDetail RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PodTrackingDetail RecordBuilder
   */
  public static com.fretron.Model.PodTrackingDetail.Builder newBuilder(com.fretron.Model.PodTrackingDetail.Builder other) {
    return new com.fretron.Model.PodTrackingDetail.Builder(other);
  }

  /**
   * Creates a new PodTrackingDetail RecordBuilder by copying an existing PodTrackingDetail instance.
   * @param other The existing instance to copy.
   * @return A new PodTrackingDetail RecordBuilder
   */
  public static com.fretron.Model.PodTrackingDetail.Builder newBuilder(com.fretron.Model.PodTrackingDetail other) {
    return new com.fretron.Model.PodTrackingDetail.Builder(other);
  }

  /**
   * RecordBuilder for PodTrackingDetail instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PodTrackingDetail>
    implements org.apache.avro.data.RecordBuilder<PodTrackingDetail> {

    private java.lang.String currentState;
    private java.lang.String currentStateDetail;
    private java.lang.Long currentStateSince;
    private java.lang.String nextState;
    private java.lang.String nextStateDetail;
    private java.lang.Long nextStateExpectedTime;
    private java.lang.String trackingRemark;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.PodTrackingDetail.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currentState)) {
        this.currentState = data().deepCopy(fields()[0].schema(), other.currentState);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currentStateDetail)) {
        this.currentStateDetail = data().deepCopy(fields()[1].schema(), other.currentStateDetail);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currentStateSince)) {
        this.currentStateSince = data().deepCopy(fields()[2].schema(), other.currentStateSince);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nextState)) {
        this.nextState = data().deepCopy(fields()[3].schema(), other.nextState);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nextStateDetail)) {
        this.nextStateDetail = data().deepCopy(fields()[4].schema(), other.nextStateDetail);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nextStateExpectedTime)) {
        this.nextStateExpectedTime = data().deepCopy(fields()[5].schema(), other.nextStateExpectedTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.trackingRemark)) {
        this.trackingRemark = data().deepCopy(fields()[6].schema(), other.trackingRemark);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PodTrackingDetail instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.PodTrackingDetail other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.currentState)) {
        this.currentState = data().deepCopy(fields()[0].schema(), other.currentState);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currentStateDetail)) {
        this.currentStateDetail = data().deepCopy(fields()[1].schema(), other.currentStateDetail);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currentStateSince)) {
        this.currentStateSince = data().deepCopy(fields()[2].schema(), other.currentStateSince);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nextState)) {
        this.nextState = data().deepCopy(fields()[3].schema(), other.nextState);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nextStateDetail)) {
        this.nextStateDetail = data().deepCopy(fields()[4].schema(), other.nextStateDetail);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nextStateExpectedTime)) {
        this.nextStateExpectedTime = data().deepCopy(fields()[5].schema(), other.nextStateExpectedTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.trackingRemark)) {
        this.trackingRemark = data().deepCopy(fields()[6].schema(), other.trackingRemark);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'currentState' field.
      * @return The value.
      */
    public java.lang.String getCurrentState() {
      return currentState;
    }

    /**
      * Sets the value of the 'currentState' field.
      * @param value The value of 'currentState'.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder setCurrentState(java.lang.String value) {
      validate(fields()[0], value);
      this.currentState = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'currentState' field has been set.
      * @return True if the 'currentState' field has been set, false otherwise.
      */
    public boolean hasCurrentState() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'currentState' field.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder clearCurrentState() {
      currentState = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentStateDetail' field.
      * @return The value.
      */
    public java.lang.String getCurrentStateDetail() {
      return currentStateDetail;
    }

    /**
      * Sets the value of the 'currentStateDetail' field.
      * @param value The value of 'currentStateDetail'.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder setCurrentStateDetail(java.lang.String value) {
      validate(fields()[1], value);
      this.currentStateDetail = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currentStateDetail' field has been set.
      * @return True if the 'currentStateDetail' field has been set, false otherwise.
      */
    public boolean hasCurrentStateDetail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'currentStateDetail' field.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder clearCurrentStateDetail() {
      currentStateDetail = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentStateSince' field.
      * @return The value.
      */
    public java.lang.Long getCurrentStateSince() {
      return currentStateSince;
    }

    /**
      * Sets the value of the 'currentStateSince' field.
      * @param value The value of 'currentStateSince'.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder setCurrentStateSince(java.lang.Long value) {
      validate(fields()[2], value);
      this.currentStateSince = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currentStateSince' field has been set.
      * @return True if the 'currentStateSince' field has been set, false otherwise.
      */
    public boolean hasCurrentStateSince() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currentStateSince' field.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder clearCurrentStateSince() {
      currentStateSince = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nextState' field.
      * @return The value.
      */
    public java.lang.String getNextState() {
      return nextState;
    }

    /**
      * Sets the value of the 'nextState' field.
      * @param value The value of 'nextState'.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder setNextState(java.lang.String value) {
      validate(fields()[3], value);
      this.nextState = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nextState' field has been set.
      * @return True if the 'nextState' field has been set, false otherwise.
      */
    public boolean hasNextState() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nextState' field.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder clearNextState() {
      nextState = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nextStateDetail' field.
      * @return The value.
      */
    public java.lang.String getNextStateDetail() {
      return nextStateDetail;
    }

    /**
      * Sets the value of the 'nextStateDetail' field.
      * @param value The value of 'nextStateDetail'.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder setNextStateDetail(java.lang.String value) {
      validate(fields()[4], value);
      this.nextStateDetail = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nextStateDetail' field has been set.
      * @return True if the 'nextStateDetail' field has been set, false otherwise.
      */
    public boolean hasNextStateDetail() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nextStateDetail' field.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder clearNextStateDetail() {
      nextStateDetail = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'nextStateExpectedTime' field.
      * @return The value.
      */
    public java.lang.Long getNextStateExpectedTime() {
      return nextStateExpectedTime;
    }

    /**
      * Sets the value of the 'nextStateExpectedTime' field.
      * @param value The value of 'nextStateExpectedTime'.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder setNextStateExpectedTime(java.lang.Long value) {
      validate(fields()[5], value);
      this.nextStateExpectedTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'nextStateExpectedTime' field has been set.
      * @return True if the 'nextStateExpectedTime' field has been set, false otherwise.
      */
    public boolean hasNextStateExpectedTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'nextStateExpectedTime' field.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder clearNextStateExpectedTime() {
      nextStateExpectedTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackingRemark' field.
      * @return The value.
      */
    public java.lang.String getTrackingRemark() {
      return trackingRemark;
    }

    /**
      * Sets the value of the 'trackingRemark' field.
      * @param value The value of 'trackingRemark'.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder setTrackingRemark(java.lang.String value) {
      validate(fields()[6], value);
      this.trackingRemark = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'trackingRemark' field has been set.
      * @return True if the 'trackingRemark' field has been set, false otherwise.
      */
    public boolean hasTrackingRemark() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'trackingRemark' field.
      * @return This builder.
      */
    public com.fretron.Model.PodTrackingDetail.Builder clearTrackingRemark() {
      trackingRemark = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public PodTrackingDetail build() {
      try {
        PodTrackingDetail record = new PodTrackingDetail();
        record.currentState = fieldSetFlags()[0] ? this.currentState : (java.lang.String) defaultValue(fields()[0]);
        record.currentStateDetail = fieldSetFlags()[1] ? this.currentStateDetail : (java.lang.String) defaultValue(fields()[1]);
        record.currentStateSince = fieldSetFlags()[2] ? this.currentStateSince : (java.lang.Long) defaultValue(fields()[2]);
        record.nextState = fieldSetFlags()[3] ? this.nextState : (java.lang.String) defaultValue(fields()[3]);
        record.nextStateDetail = fieldSetFlags()[4] ? this.nextStateDetail : (java.lang.String) defaultValue(fields()[4]);
        record.nextStateExpectedTime = fieldSetFlags()[5] ? this.nextStateExpectedTime : (java.lang.Long) defaultValue(fields()[5]);
        record.trackingRemark = fieldSetFlags()[6] ? this.trackingRemark : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
