/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ServiceLevelAgreement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8700176038551523193L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ServiceLevelAgreement\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"dueAt\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isAchieved\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.Long dueAt;
  @Deprecated public java.lang.Boolean isAchieved;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ServiceLevelAgreement() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param dueAt The new value for dueAt
   * @param isAchieved The new value for isAchieved
   */
  public ServiceLevelAgreement(java.lang.String name, java.lang.Long dueAt, java.lang.Boolean isAchieved) {
    this.name = name;
    this.dueAt = dueAt;
    this.isAchieved = isAchieved;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return dueAt;
    case 2: return isAchieved;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: dueAt = (java.lang.Long)value$; break;
    case 2: isAchieved = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'dueAt' field.
   * @return The value of the 'dueAt' field.
   */
  public java.lang.Long getDueAt() {
    return dueAt;
  }

  /**
   * Sets the value of the 'dueAt' field.
   * @param value the value to set.
   */
  public void setDueAt(java.lang.Long value) {
    this.dueAt = value;
  }

  /**
   * Gets the value of the 'isAchieved' field.
   * @return The value of the 'isAchieved' field.
   */
  public java.lang.Boolean getIsAchieved() {
    return isAchieved;
  }

  /**
   * Sets the value of the 'isAchieved' field.
   * @param value the value to set.
   */
  public void setIsAchieved(java.lang.Boolean value) {
    this.isAchieved = value;
  }

  /**
   * Creates a new ServiceLevelAgreement RecordBuilder.
   * @return A new ServiceLevelAgreement RecordBuilder
   */
  public static com.fretron.Model.ServiceLevelAgreement.Builder newBuilder() {
    return new com.fretron.Model.ServiceLevelAgreement.Builder();
  }

  /**
   * Creates a new ServiceLevelAgreement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ServiceLevelAgreement RecordBuilder
   */
  public static com.fretron.Model.ServiceLevelAgreement.Builder newBuilder(com.fretron.Model.ServiceLevelAgreement.Builder other) {
    return new com.fretron.Model.ServiceLevelAgreement.Builder(other);
  }

  /**
   * Creates a new ServiceLevelAgreement RecordBuilder by copying an existing ServiceLevelAgreement instance.
   * @param other The existing instance to copy.
   * @return A new ServiceLevelAgreement RecordBuilder
   */
  public static com.fretron.Model.ServiceLevelAgreement.Builder newBuilder(com.fretron.Model.ServiceLevelAgreement other) {
    return new com.fretron.Model.ServiceLevelAgreement.Builder(other);
  }

  /**
   * RecordBuilder for ServiceLevelAgreement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ServiceLevelAgreement>
    implements org.apache.avro.data.RecordBuilder<ServiceLevelAgreement> {

    private java.lang.String name;
    private java.lang.Long dueAt;
    private java.lang.Boolean isAchieved;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ServiceLevelAgreement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dueAt)) {
        this.dueAt = data().deepCopy(fields()[1].schema(), other.dueAt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isAchieved)) {
        this.isAchieved = data().deepCopy(fields()[2].schema(), other.isAchieved);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ServiceLevelAgreement instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ServiceLevelAgreement other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dueAt)) {
        this.dueAt = data().deepCopy(fields()[1].schema(), other.dueAt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isAchieved)) {
        this.isAchieved = data().deepCopy(fields()[2].schema(), other.isAchieved);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.ServiceLevelAgreement.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.ServiceLevelAgreement.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dueAt' field.
      * @return The value.
      */
    public java.lang.Long getDueAt() {
      return dueAt;
    }

    /**
      * Sets the value of the 'dueAt' field.
      * @param value The value of 'dueAt'.
      * @return This builder.
      */
    public com.fretron.Model.ServiceLevelAgreement.Builder setDueAt(java.lang.Long value) {
      validate(fields()[1], value);
      this.dueAt = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dueAt' field has been set.
      * @return True if the 'dueAt' field has been set, false otherwise.
      */
    public boolean hasDueAt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dueAt' field.
      * @return This builder.
      */
    public com.fretron.Model.ServiceLevelAgreement.Builder clearDueAt() {
      dueAt = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'isAchieved' field.
      * @return The value.
      */
    public java.lang.Boolean getIsAchieved() {
      return isAchieved;
    }

    /**
      * Sets the value of the 'isAchieved' field.
      * @param value The value of 'isAchieved'.
      * @return This builder.
      */
    public com.fretron.Model.ServiceLevelAgreement.Builder setIsAchieved(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.isAchieved = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'isAchieved' field has been set.
      * @return True if the 'isAchieved' field has been set, false otherwise.
      */
    public boolean hasIsAchieved() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'isAchieved' field.
      * @return This builder.
      */
    public com.fretron.Model.ServiceLevelAgreement.Builder clearIsAchieved() {
      isAchieved = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ServiceLevelAgreement build() {
      try {
        ServiceLevelAgreement record = new ServiceLevelAgreement();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.dueAt = fieldSetFlags()[1] ? this.dueAt : (java.lang.Long) defaultValue(fields()[1]);
        record.isAchieved = fieldSetFlags()[2] ? this.isAchieved : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
