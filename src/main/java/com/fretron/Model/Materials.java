/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Materials extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3639359946037617466L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Materials\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"externalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"measurementType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unitOfMeasurement\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"pricePerUnit\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"updates\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Updates\",\"fields\":[{\"name\":\"forwardReasons\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"updatedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"resourceType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"resourceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sourceOfInformation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"updateType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"forwardedFrom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"revision\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"traceID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"materialType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"materialGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"controlCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"division\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"taxCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"partnerId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkedMaterialId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String externalId;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String orgId;
  @Deprecated public java.lang.String measurementType;
  @Deprecated public java.lang.String unitOfMeasurement;
  @Deprecated public java.lang.Double pricePerUnit;
  @Deprecated public com.fretron.Model.Updates updates;
  @Deprecated public java.lang.String materialType;
  @Deprecated public java.lang.String materialGroup;
  @Deprecated public java.lang.String controlCode;
  @Deprecated public java.lang.String division;
  @Deprecated public java.lang.String taxCode;
  @Deprecated public java.lang.String partnerId;
  @Deprecated public java.lang.String linkedMaterialId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Materials() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param externalId The new value for externalId
   * @param name The new value for name
   * @param orgId The new value for orgId
   * @param measurementType The new value for measurementType
   * @param unitOfMeasurement The new value for unitOfMeasurement
   * @param pricePerUnit The new value for pricePerUnit
   * @param updates The new value for updates
   * @param materialType The new value for materialType
   * @param materialGroup The new value for materialGroup
   * @param controlCode The new value for controlCode
   * @param division The new value for division
   * @param taxCode The new value for taxCode
   * @param partnerId The new value for partnerId
   * @param linkedMaterialId The new value for linkedMaterialId
   */
  public Materials(java.lang.String uuid, java.lang.String externalId, java.lang.String name, java.lang.String orgId, java.lang.String measurementType, java.lang.String unitOfMeasurement, java.lang.Double pricePerUnit, com.fretron.Model.Updates updates, java.lang.String materialType, java.lang.String materialGroup, java.lang.String controlCode, java.lang.String division, java.lang.String taxCode, java.lang.String partnerId, java.lang.String linkedMaterialId) {
    this.uuid = uuid;
    this.externalId = externalId;
    this.name = name;
    this.orgId = orgId;
    this.measurementType = measurementType;
    this.unitOfMeasurement = unitOfMeasurement;
    this.pricePerUnit = pricePerUnit;
    this.updates = updates;
    this.materialType = materialType;
    this.materialGroup = materialGroup;
    this.controlCode = controlCode;
    this.division = division;
    this.taxCode = taxCode;
    this.partnerId = partnerId;
    this.linkedMaterialId = linkedMaterialId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return externalId;
    case 2: return name;
    case 3: return orgId;
    case 4: return measurementType;
    case 5: return unitOfMeasurement;
    case 6: return pricePerUnit;
    case 7: return updates;
    case 8: return materialType;
    case 9: return materialGroup;
    case 10: return controlCode;
    case 11: return division;
    case 12: return taxCode;
    case 13: return partnerId;
    case 14: return linkedMaterialId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: externalId = (java.lang.String)value$; break;
    case 2: name = (java.lang.String)value$; break;
    case 3: orgId = (java.lang.String)value$; break;
    case 4: measurementType = (java.lang.String)value$; break;
    case 5: unitOfMeasurement = (java.lang.String)value$; break;
    case 6: pricePerUnit = (java.lang.Double)value$; break;
    case 7: updates = (com.fretron.Model.Updates)value$; break;
    case 8: materialType = (java.lang.String)value$; break;
    case 9: materialGroup = (java.lang.String)value$; break;
    case 10: controlCode = (java.lang.String)value$; break;
    case 11: division = (java.lang.String)value$; break;
    case 12: taxCode = (java.lang.String)value$; break;
    case 13: partnerId = (java.lang.String)value$; break;
    case 14: linkedMaterialId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'externalId' field.
   * @return The value of the 'externalId' field.
   */
  public java.lang.String getExternalId() {
    return externalId;
  }

  /**
   * Sets the value of the 'externalId' field.
   * @param value the value to set.
   */
  public void setExternalId(java.lang.String value) {
    this.externalId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'measurementType' field.
   * @return The value of the 'measurementType' field.
   */
  public java.lang.String getMeasurementType() {
    return measurementType;
  }

  /**
   * Sets the value of the 'measurementType' field.
   * @param value the value to set.
   */
  public void setMeasurementType(java.lang.String value) {
    this.measurementType = value;
  }

  /**
   * Gets the value of the 'unitOfMeasurement' field.
   * @return The value of the 'unitOfMeasurement' field.
   */
  public java.lang.String getUnitOfMeasurement() {
    return unitOfMeasurement;
  }

  /**
   * Sets the value of the 'unitOfMeasurement' field.
   * @param value the value to set.
   */
  public void setUnitOfMeasurement(java.lang.String value) {
    this.unitOfMeasurement = value;
  }

  /**
   * Gets the value of the 'pricePerUnit' field.
   * @return The value of the 'pricePerUnit' field.
   */
  public java.lang.Double getPricePerUnit() {
    return pricePerUnit;
  }

  /**
   * Sets the value of the 'pricePerUnit' field.
   * @param value the value to set.
   */
  public void setPricePerUnit(java.lang.Double value) {
    this.pricePerUnit = value;
  }

  /**
   * Gets the value of the 'updates' field.
   * @return The value of the 'updates' field.
   */
  public com.fretron.Model.Updates getUpdates() {
    return updates;
  }

  /**
   * Sets the value of the 'updates' field.
   * @param value the value to set.
   */
  public void setUpdates(com.fretron.Model.Updates value) {
    this.updates = value;
  }

  /**
   * Gets the value of the 'materialType' field.
   * @return The value of the 'materialType' field.
   */
  public java.lang.String getMaterialType() {
    return materialType;
  }

  /**
   * Sets the value of the 'materialType' field.
   * @param value the value to set.
   */
  public void setMaterialType(java.lang.String value) {
    this.materialType = value;
  }

  /**
   * Gets the value of the 'materialGroup' field.
   * @return The value of the 'materialGroup' field.
   */
  public java.lang.String getMaterialGroup() {
    return materialGroup;
  }

  /**
   * Sets the value of the 'materialGroup' field.
   * @param value the value to set.
   */
  public void setMaterialGroup(java.lang.String value) {
    this.materialGroup = value;
  }

  /**
   * Gets the value of the 'controlCode' field.
   * @return The value of the 'controlCode' field.
   */
  public java.lang.String getControlCode() {
    return controlCode;
  }

  /**
   * Sets the value of the 'controlCode' field.
   * @param value the value to set.
   */
  public void setControlCode(java.lang.String value) {
    this.controlCode = value;
  }

  /**
   * Gets the value of the 'division' field.
   * @return The value of the 'division' field.
   */
  public java.lang.String getDivision() {
    return division;
  }

  /**
   * Sets the value of the 'division' field.
   * @param value the value to set.
   */
  public void setDivision(java.lang.String value) {
    this.division = value;
  }

  /**
   * Gets the value of the 'taxCode' field.
   * @return The value of the 'taxCode' field.
   */
  public java.lang.String getTaxCode() {
    return taxCode;
  }

  /**
   * Sets the value of the 'taxCode' field.
   * @param value the value to set.
   */
  public void setTaxCode(java.lang.String value) {
    this.taxCode = value;
  }

  /**
   * Gets the value of the 'partnerId' field.
   * @return The value of the 'partnerId' field.
   */
  public java.lang.String getPartnerId() {
    return partnerId;
  }

  /**
   * Sets the value of the 'partnerId' field.
   * @param value the value to set.
   */
  public void setPartnerId(java.lang.String value) {
    this.partnerId = value;
  }

  /**
   * Gets the value of the 'linkedMaterialId' field.
   * @return The value of the 'linkedMaterialId' field.
   */
  public java.lang.String getLinkedMaterialId() {
    return linkedMaterialId;
  }

  /**
   * Sets the value of the 'linkedMaterialId' field.
   * @param value the value to set.
   */
  public void setLinkedMaterialId(java.lang.String value) {
    this.linkedMaterialId = value;
  }

  /**
   * Creates a new Materials RecordBuilder.
   * @return A new Materials RecordBuilder
   */
  public static com.fretron.Model.Materials.Builder newBuilder() {
    return new com.fretron.Model.Materials.Builder();
  }

  /**
   * Creates a new Materials RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Materials RecordBuilder
   */
  public static com.fretron.Model.Materials.Builder newBuilder(com.fretron.Model.Materials.Builder other) {
    return new com.fretron.Model.Materials.Builder(other);
  }

  /**
   * Creates a new Materials RecordBuilder by copying an existing Materials instance.
   * @param other The existing instance to copy.
   * @return A new Materials RecordBuilder
   */
  public static com.fretron.Model.Materials.Builder newBuilder(com.fretron.Model.Materials other) {
    return new com.fretron.Model.Materials.Builder(other);
  }

  /**
   * RecordBuilder for Materials instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Materials>
    implements org.apache.avro.data.RecordBuilder<Materials> {

    private java.lang.String uuid;
    private java.lang.String externalId;
    private java.lang.String name;
    private java.lang.String orgId;
    private java.lang.String measurementType;
    private java.lang.String unitOfMeasurement;
    private java.lang.Double pricePerUnit;
    private com.fretron.Model.Updates updates;
    private com.fretron.Model.Updates.Builder updatesBuilder;
    private java.lang.String materialType;
    private java.lang.String materialGroup;
    private java.lang.String controlCode;
    private java.lang.String division;
    private java.lang.String taxCode;
    private java.lang.String partnerId;
    private java.lang.String linkedMaterialId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Materials.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.externalId)) {
        this.externalId = data().deepCopy(fields()[1].schema(), other.externalId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orgId)) {
        this.orgId = data().deepCopy(fields()[3].schema(), other.orgId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.measurementType)) {
        this.measurementType = data().deepCopy(fields()[4].schema(), other.measurementType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.unitOfMeasurement)) {
        this.unitOfMeasurement = data().deepCopy(fields()[5].schema(), other.unitOfMeasurement);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pricePerUnit)) {
        this.pricePerUnit = data().deepCopy(fields()[6].schema(), other.pricePerUnit);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updates)) {
        this.updates = data().deepCopy(fields()[7].schema(), other.updates);
        fieldSetFlags()[7] = true;
      }
      if (other.hasUpdatesBuilder()) {
        this.updatesBuilder = com.fretron.Model.Updates.newBuilder(other.getUpdatesBuilder());
      }
      if (isValidValue(fields()[8], other.materialType)) {
        this.materialType = data().deepCopy(fields()[8].schema(), other.materialType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.materialGroup)) {
        this.materialGroup = data().deepCopy(fields()[9].schema(), other.materialGroup);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.controlCode)) {
        this.controlCode = data().deepCopy(fields()[10].schema(), other.controlCode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.division)) {
        this.division = data().deepCopy(fields()[11].schema(), other.division);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.taxCode)) {
        this.taxCode = data().deepCopy(fields()[12].schema(), other.taxCode);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.partnerId)) {
        this.partnerId = data().deepCopy(fields()[13].schema(), other.partnerId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.linkedMaterialId)) {
        this.linkedMaterialId = data().deepCopy(fields()[14].schema(), other.linkedMaterialId);
        fieldSetFlags()[14] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Materials instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Materials other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.externalId)) {
        this.externalId = data().deepCopy(fields()[1].schema(), other.externalId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orgId)) {
        this.orgId = data().deepCopy(fields()[3].schema(), other.orgId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.measurementType)) {
        this.measurementType = data().deepCopy(fields()[4].schema(), other.measurementType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.unitOfMeasurement)) {
        this.unitOfMeasurement = data().deepCopy(fields()[5].schema(), other.unitOfMeasurement);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pricePerUnit)) {
        this.pricePerUnit = data().deepCopy(fields()[6].schema(), other.pricePerUnit);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updates)) {
        this.updates = data().deepCopy(fields()[7].schema(), other.updates);
        fieldSetFlags()[7] = true;
      }
      this.updatesBuilder = null;
      if (isValidValue(fields()[8], other.materialType)) {
        this.materialType = data().deepCopy(fields()[8].schema(), other.materialType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.materialGroup)) {
        this.materialGroup = data().deepCopy(fields()[9].schema(), other.materialGroup);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.controlCode)) {
        this.controlCode = data().deepCopy(fields()[10].schema(), other.controlCode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.division)) {
        this.division = data().deepCopy(fields()[11].schema(), other.division);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.taxCode)) {
        this.taxCode = data().deepCopy(fields()[12].schema(), other.taxCode);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.partnerId)) {
        this.partnerId = data().deepCopy(fields()[13].schema(), other.partnerId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.linkedMaterialId)) {
        this.linkedMaterialId = data().deepCopy(fields()[14].schema(), other.linkedMaterialId);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalId' field.
      * @return The value.
      */
    public java.lang.String getExternalId() {
      return externalId;
    }

    /**
      * Sets the value of the 'externalId' field.
      * @param value The value of 'externalId'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setExternalId(java.lang.String value) {
      validate(fields()[1], value);
      this.externalId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'externalId' field has been set.
      * @return True if the 'externalId' field has been set, false otherwise.
      */
    public boolean hasExternalId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'externalId' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearExternalId() {
      externalId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setOrgId(java.lang.String value) {
      validate(fields()[3], value);
      this.orgId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'measurementType' field.
      * @return The value.
      */
    public java.lang.String getMeasurementType() {
      return measurementType;
    }

    /**
      * Sets the value of the 'measurementType' field.
      * @param value The value of 'measurementType'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setMeasurementType(java.lang.String value) {
      validate(fields()[4], value);
      this.measurementType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'measurementType' field has been set.
      * @return True if the 'measurementType' field has been set, false otherwise.
      */
    public boolean hasMeasurementType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'measurementType' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearMeasurementType() {
      measurementType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitOfMeasurement' field.
      * @return The value.
      */
    public java.lang.String getUnitOfMeasurement() {
      return unitOfMeasurement;
    }

    /**
      * Sets the value of the 'unitOfMeasurement' field.
      * @param value The value of 'unitOfMeasurement'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setUnitOfMeasurement(java.lang.String value) {
      validate(fields()[5], value);
      this.unitOfMeasurement = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'unitOfMeasurement' field has been set.
      * @return True if the 'unitOfMeasurement' field has been set, false otherwise.
      */
    public boolean hasUnitOfMeasurement() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'unitOfMeasurement' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearUnitOfMeasurement() {
      unitOfMeasurement = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'pricePerUnit' field.
      * @return The value.
      */
    public java.lang.Double getPricePerUnit() {
      return pricePerUnit;
    }

    /**
      * Sets the value of the 'pricePerUnit' field.
      * @param value The value of 'pricePerUnit'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setPricePerUnit(java.lang.Double value) {
      validate(fields()[6], value);
      this.pricePerUnit = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'pricePerUnit' field has been set.
      * @return True if the 'pricePerUnit' field has been set, false otherwise.
      */
    public boolean hasPricePerUnit() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'pricePerUnit' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearPricePerUnit() {
      pricePerUnit = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'updates' field.
      * @return The value.
      */
    public com.fretron.Model.Updates getUpdates() {
      return updates;
    }

    /**
      * Sets the value of the 'updates' field.
      * @param value The value of 'updates'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setUpdates(com.fretron.Model.Updates value) {
      validate(fields()[7], value);
      this.updatesBuilder = null;
      this.updates = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'updates' field has been set.
      * @return True if the 'updates' field has been set, false otherwise.
      */
    public boolean hasUpdates() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'updates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Updates.Builder getUpdatesBuilder() {
      if (updatesBuilder == null) {
        if (hasUpdates()) {
          setUpdatesBuilder(com.fretron.Model.Updates.newBuilder(updates));
        } else {
          setUpdatesBuilder(com.fretron.Model.Updates.newBuilder());
        }
      }
      return updatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'updates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Materials.Builder setUpdatesBuilder(com.fretron.Model.Updates.Builder value) {
      clearUpdates();
      updatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'updates' field has an active Builder instance
     * @return True if the 'updates' field has an active Builder instance
     */
    public boolean hasUpdatesBuilder() {
      return updatesBuilder != null;
    }

    /**
      * Clears the value of the 'updates' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearUpdates() {
      updates = null;
      updatesBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialType' field.
      * @return The value.
      */
    public java.lang.String getMaterialType() {
      return materialType;
    }

    /**
      * Sets the value of the 'materialType' field.
      * @param value The value of 'materialType'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setMaterialType(java.lang.String value) {
      validate(fields()[8], value);
      this.materialType = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'materialType' field has been set.
      * @return True if the 'materialType' field has been set, false otherwise.
      */
    public boolean hasMaterialType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'materialType' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearMaterialType() {
      materialType = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialGroup' field.
      * @return The value.
      */
    public java.lang.String getMaterialGroup() {
      return materialGroup;
    }

    /**
      * Sets the value of the 'materialGroup' field.
      * @param value The value of 'materialGroup'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setMaterialGroup(java.lang.String value) {
      validate(fields()[9], value);
      this.materialGroup = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'materialGroup' field has been set.
      * @return True if the 'materialGroup' field has been set, false otherwise.
      */
    public boolean hasMaterialGroup() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'materialGroup' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearMaterialGroup() {
      materialGroup = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'controlCode' field.
      * @return The value.
      */
    public java.lang.String getControlCode() {
      return controlCode;
    }

    /**
      * Sets the value of the 'controlCode' field.
      * @param value The value of 'controlCode'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setControlCode(java.lang.String value) {
      validate(fields()[10], value);
      this.controlCode = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'controlCode' field has been set.
      * @return True if the 'controlCode' field has been set, false otherwise.
      */
    public boolean hasControlCode() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'controlCode' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearControlCode() {
      controlCode = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'division' field.
      * @return The value.
      */
    public java.lang.String getDivision() {
      return division;
    }

    /**
      * Sets the value of the 'division' field.
      * @param value The value of 'division'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setDivision(java.lang.String value) {
      validate(fields()[11], value);
      this.division = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'division' field has been set.
      * @return True if the 'division' field has been set, false otherwise.
      */
    public boolean hasDivision() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'division' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearDivision() {
      division = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxCode' field.
      * @return The value.
      */
    public java.lang.String getTaxCode() {
      return taxCode;
    }

    /**
      * Sets the value of the 'taxCode' field.
      * @param value The value of 'taxCode'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setTaxCode(java.lang.String value) {
      validate(fields()[12], value);
      this.taxCode = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'taxCode' field has been set.
      * @return True if the 'taxCode' field has been set, false otherwise.
      */
    public boolean hasTaxCode() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'taxCode' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearTaxCode() {
      taxCode = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'partnerId' field.
      * @return The value.
      */
    public java.lang.String getPartnerId() {
      return partnerId;
    }

    /**
      * Sets the value of the 'partnerId' field.
      * @param value The value of 'partnerId'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setPartnerId(java.lang.String value) {
      validate(fields()[13], value);
      this.partnerId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'partnerId' field has been set.
      * @return True if the 'partnerId' field has been set, false otherwise.
      */
    public boolean hasPartnerId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'partnerId' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearPartnerId() {
      partnerId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkedMaterialId' field.
      * @return The value.
      */
    public java.lang.String getLinkedMaterialId() {
      return linkedMaterialId;
    }

    /**
      * Sets the value of the 'linkedMaterialId' field.
      * @param value The value of 'linkedMaterialId'.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder setLinkedMaterialId(java.lang.String value) {
      validate(fields()[14], value);
      this.linkedMaterialId = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'linkedMaterialId' field has been set.
      * @return True if the 'linkedMaterialId' field has been set, false otherwise.
      */
    public boolean hasLinkedMaterialId() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'linkedMaterialId' field.
      * @return This builder.
      */
    public com.fretron.Model.Materials.Builder clearLinkedMaterialId() {
      linkedMaterialId = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    public Materials build() {
      try {
        Materials record = new Materials();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.externalId = fieldSetFlags()[1] ? this.externalId : (java.lang.String) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.orgId = fieldSetFlags()[3] ? this.orgId : (java.lang.String) defaultValue(fields()[3]);
        record.measurementType = fieldSetFlags()[4] ? this.measurementType : (java.lang.String) defaultValue(fields()[4]);
        record.unitOfMeasurement = fieldSetFlags()[5] ? this.unitOfMeasurement : (java.lang.String) defaultValue(fields()[5]);
        record.pricePerUnit = fieldSetFlags()[6] ? this.pricePerUnit : (java.lang.Double) defaultValue(fields()[6]);
        if (updatesBuilder != null) {
          record.updates = this.updatesBuilder.build();
        } else {
          record.updates = fieldSetFlags()[7] ? this.updates : (com.fretron.Model.Updates) defaultValue(fields()[7]);
        }
        record.materialType = fieldSetFlags()[8] ? this.materialType : (java.lang.String) defaultValue(fields()[8]);
        record.materialGroup = fieldSetFlags()[9] ? this.materialGroup : (java.lang.String) defaultValue(fields()[9]);
        record.controlCode = fieldSetFlags()[10] ? this.controlCode : (java.lang.String) defaultValue(fields()[10]);
        record.division = fieldSetFlags()[11] ? this.division : (java.lang.String) defaultValue(fields()[11]);
        record.taxCode = fieldSetFlags()[12] ? this.taxCode : (java.lang.String) defaultValue(fields()[12]);
        record.partnerId = fieldSetFlags()[13] ? this.partnerId : (java.lang.String) defaultValue(fields()[13]);
        record.linkedMaterialId = fieldSetFlags()[14] ? this.linkedMaterialId : (java.lang.String) defaultValue(fields()[14]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
