/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IOReading extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1436886112173328929L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IOReading\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"pinNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unit\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"valueType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String pinNumber;
  @Deprecated public java.lang.String value;
  @Deprecated public java.lang.String unit;
  @Deprecated public java.lang.String valueType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IOReading() {}

  /**
   * All-args constructor.
   * @param pinNumber The new value for pinNumber
   * @param value The new value for value
   * @param unit The new value for unit
   * @param valueType The new value for valueType
   */
  public IOReading(java.lang.String pinNumber, java.lang.String value, java.lang.String unit, java.lang.String valueType) {
    this.pinNumber = pinNumber;
    this.value = value;
    this.unit = unit;
    this.valueType = valueType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pinNumber;
    case 1: return value;
    case 2: return unit;
    case 3: return valueType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pinNumber = (java.lang.String)value$; break;
    case 1: value = (java.lang.String)value$; break;
    case 2: unit = (java.lang.String)value$; break;
    case 3: valueType = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pinNumber' field.
   * @return The value of the 'pinNumber' field.
   */
  public java.lang.String getPinNumber() {
    return pinNumber;
  }

  /**
   * Sets the value of the 'pinNumber' field.
   * @param value the value to set.
   */
  public void setPinNumber(java.lang.String value) {
    this.pinNumber = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'unit' field.
   * @return The value of the 'unit' field.
   */
  public java.lang.String getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * @param value the value to set.
   */
  public void setUnit(java.lang.String value) {
    this.unit = value;
  }

  /**
   * Gets the value of the 'valueType' field.
   * @return The value of the 'valueType' field.
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * Sets the value of the 'valueType' field.
   * @param value the value to set.
   */
  public void setValueType(java.lang.String value) {
    this.valueType = value;
  }

  /**
   * Creates a new IOReading RecordBuilder.
   * @return A new IOReading RecordBuilder
   */
  public static com.fretron.Model.IOReading.Builder newBuilder() {
    return new com.fretron.Model.IOReading.Builder();
  }

  /**
   * Creates a new IOReading RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IOReading RecordBuilder
   */
  public static com.fretron.Model.IOReading.Builder newBuilder(com.fretron.Model.IOReading.Builder other) {
    return new com.fretron.Model.IOReading.Builder(other);
  }

  /**
   * Creates a new IOReading RecordBuilder by copying an existing IOReading instance.
   * @param other The existing instance to copy.
   * @return A new IOReading RecordBuilder
   */
  public static com.fretron.Model.IOReading.Builder newBuilder(com.fretron.Model.IOReading other) {
    return new com.fretron.Model.IOReading.Builder(other);
  }

  /**
   * RecordBuilder for IOReading instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IOReading>
    implements org.apache.avro.data.RecordBuilder<IOReading> {

    private java.lang.String pinNumber;
    private java.lang.String value;
    private java.lang.String unit;
    private java.lang.String valueType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.IOReading.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pinNumber)) {
        this.pinNumber = data().deepCopy(fields()[0].schema(), other.pinNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.valueType)) {
        this.valueType = data().deepCopy(fields()[3].schema(), other.valueType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing IOReading instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.IOReading other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.pinNumber)) {
        this.pinNumber = data().deepCopy(fields()[0].schema(), other.pinNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.valueType)) {
        this.valueType = data().deepCopy(fields()[3].schema(), other.valueType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'pinNumber' field.
      * @return The value.
      */
    public java.lang.String getPinNumber() {
      return pinNumber;
    }

    /**
      * Sets the value of the 'pinNumber' field.
      * @param value The value of 'pinNumber'.
      * @return This builder.
      */
    public com.fretron.Model.IOReading.Builder setPinNumber(java.lang.String value) {
      validate(fields()[0], value);
      this.pinNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'pinNumber' field has been set.
      * @return True if the 'pinNumber' field has been set, false otherwise.
      */
    public boolean hasPinNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'pinNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.IOReading.Builder clearPinNumber() {
      pinNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.IOReading.Builder setValue(java.lang.String value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.IOReading.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit' field.
      * @return The value.
      */
    public java.lang.String getUnit() {
      return unit;
    }

    /**
      * Sets the value of the 'unit' field.
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public com.fretron.Model.IOReading.Builder setUnit(java.lang.String value) {
      validate(fields()[2], value);
      this.unit = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unit' field.
      * @return This builder.
      */
    public com.fretron.Model.IOReading.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueType' field.
      * @return The value.
      */
    public java.lang.String getValueType() {
      return valueType;
    }

    /**
      * Sets the value of the 'valueType' field.
      * @param value The value of 'valueType'.
      * @return This builder.
      */
    public com.fretron.Model.IOReading.Builder setValueType(java.lang.String value) {
      validate(fields()[3], value);
      this.valueType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'valueType' field has been set.
      * @return True if the 'valueType' field has been set, false otherwise.
      */
    public boolean hasValueType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'valueType' field.
      * @return This builder.
      */
    public com.fretron.Model.IOReading.Builder clearValueType() {
      valueType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public IOReading build() {
      try {
        IOReading record = new IOReading();
        record.pinNumber = fieldSetFlags()[0] ? this.pinNumber : (java.lang.String) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.String) defaultValue(fields()[1]);
        record.unit = fieldSetFlags()[2] ? this.unit : (java.lang.String) defaultValue(fields()[2]);
        record.valueType = fieldSetFlags()[3] ? this.valueType : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
