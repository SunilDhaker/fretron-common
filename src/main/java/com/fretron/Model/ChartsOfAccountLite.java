/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ChartsOfAccountLite extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4350971100661344970L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChartsOfAccountLite\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"accountGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"accountPath\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String accountGroup;
  @Deprecated public java.lang.String type;
  @Deprecated public java.util.List<java.lang.String> accountPath;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChartsOfAccountLite() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param name The new value for name
   * @param accountGroup The new value for accountGroup
   * @param type The new value for type
   * @param accountPath The new value for accountPath
   */
  public ChartsOfAccountLite(java.lang.String uuid, java.lang.String name, java.lang.String accountGroup, java.lang.String type, java.util.List<java.lang.String> accountPath) {
    this.uuid = uuid;
    this.name = name;
    this.accountGroup = accountGroup;
    this.type = type;
    this.accountPath = accountPath;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return name;
    case 2: return accountGroup;
    case 3: return type;
    case 4: return accountPath;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: accountGroup = (java.lang.String)value$; break;
    case 3: type = (java.lang.String)value$; break;
    case 4: accountPath = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'accountGroup' field.
   * @return The value of the 'accountGroup' field.
   */
  public java.lang.String getAccountGroup() {
    return accountGroup;
  }

  /**
   * Sets the value of the 'accountGroup' field.
   * @param value the value to set.
   */
  public void setAccountGroup(java.lang.String value) {
    this.accountGroup = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'accountPath' field.
   * @return The value of the 'accountPath' field.
   */
  public java.util.List<java.lang.String> getAccountPath() {
    return accountPath;
  }

  /**
   * Sets the value of the 'accountPath' field.
   * @param value the value to set.
   */
  public void setAccountPath(java.util.List<java.lang.String> value) {
    this.accountPath = value;
  }

  /**
   * Creates a new ChartsOfAccountLite RecordBuilder.
   * @return A new ChartsOfAccountLite RecordBuilder
   */
  public static com.fretron.Model.ChartsOfAccountLite.Builder newBuilder() {
    return new com.fretron.Model.ChartsOfAccountLite.Builder();
  }

  /**
   * Creates a new ChartsOfAccountLite RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChartsOfAccountLite RecordBuilder
   */
  public static com.fretron.Model.ChartsOfAccountLite.Builder newBuilder(com.fretron.Model.ChartsOfAccountLite.Builder other) {
    return new com.fretron.Model.ChartsOfAccountLite.Builder(other);
  }

  /**
   * Creates a new ChartsOfAccountLite RecordBuilder by copying an existing ChartsOfAccountLite instance.
   * @param other The existing instance to copy.
   * @return A new ChartsOfAccountLite RecordBuilder
   */
  public static com.fretron.Model.ChartsOfAccountLite.Builder newBuilder(com.fretron.Model.ChartsOfAccountLite other) {
    return new com.fretron.Model.ChartsOfAccountLite.Builder(other);
  }

  /**
   * RecordBuilder for ChartsOfAccountLite instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChartsOfAccountLite>
    implements org.apache.avro.data.RecordBuilder<ChartsOfAccountLite> {

    private java.lang.String uuid;
    private java.lang.String name;
    private java.lang.String accountGroup;
    private java.lang.String type;
    private java.util.List<java.lang.String> accountPath;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ChartsOfAccountLite.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountGroup)) {
        this.accountGroup = data().deepCopy(fields()[2].schema(), other.accountGroup);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.accountPath)) {
        this.accountPath = data().deepCopy(fields()[4].schema(), other.accountPath);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ChartsOfAccountLite instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ChartsOfAccountLite other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountGroup)) {
        this.accountGroup = data().deepCopy(fields()[2].schema(), other.accountGroup);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.accountPath)) {
        this.accountPath = data().deepCopy(fields()[4].schema(), other.accountPath);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountGroup' field.
      * @return The value.
      */
    public java.lang.String getAccountGroup() {
      return accountGroup;
    }

    /**
      * Sets the value of the 'accountGroup' field.
      * @param value The value of 'accountGroup'.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder setAccountGroup(java.lang.String value) {
      validate(fields()[2], value);
      this.accountGroup = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountGroup' field has been set.
      * @return True if the 'accountGroup' field has been set, false otherwise.
      */
    public boolean hasAccountGroup() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountGroup' field.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder clearAccountGroup() {
      accountGroup = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder setType(java.lang.String value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountPath' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getAccountPath() {
      return accountPath;
    }

    /**
      * Sets the value of the 'accountPath' field.
      * @param value The value of 'accountPath'.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder setAccountPath(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.accountPath = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'accountPath' field has been set.
      * @return True if the 'accountPath' field has been set, false otherwise.
      */
    public boolean hasAccountPath() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'accountPath' field.
      * @return This builder.
      */
    public com.fretron.Model.ChartsOfAccountLite.Builder clearAccountPath() {
      accountPath = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public ChartsOfAccountLite build() {
      try {
        ChartsOfAccountLite record = new ChartsOfAccountLite();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.accountGroup = fieldSetFlags()[2] ? this.accountGroup : (java.lang.String) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.String) defaultValue(fields()[3]);
        record.accountPath = fieldSetFlags()[4] ? this.accountPath : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
