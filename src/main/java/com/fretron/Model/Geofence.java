/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Geofence extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3161166469752053370L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Geofence\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundry\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Circle\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"radius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GeofenceType\",\"symbols\":[\"Proximity\",\"Polygon\"]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.Location center;
  @Deprecated public java.util.List<com.fretron.Model.Location> boundry;
  @Deprecated public com.fretron.Model.Circle circle;
  @Deprecated public com.fretron.Model.GeofenceType type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Geofence() {}

  /**
   * All-args constructor.
   * @param center The new value for center
   * @param boundry The new value for boundry
   * @param circle The new value for circle
   * @param type The new value for type
   */
  public Geofence(com.fretron.Model.Location center, java.util.List<com.fretron.Model.Location> boundry, com.fretron.Model.Circle circle, com.fretron.Model.GeofenceType type) {
    this.center = center;
    this.boundry = boundry;
    this.circle = circle;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return center;
    case 1: return boundry;
    case 2: return circle;
    case 3: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: center = (com.fretron.Model.Location)value$; break;
    case 1: boundry = (java.util.List<com.fretron.Model.Location>)value$; break;
    case 2: circle = (com.fretron.Model.Circle)value$; break;
    case 3: type = (com.fretron.Model.GeofenceType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'center' field.
   * @return The value of the 'center' field.
   */
  public com.fretron.Model.Location getCenter() {
    return center;
  }

  /**
   * Sets the value of the 'center' field.
   * @param value the value to set.
   */
  public void setCenter(com.fretron.Model.Location value) {
    this.center = value;
  }

  /**
   * Gets the value of the 'boundry' field.
   * @return The value of the 'boundry' field.
   */
  public java.util.List<com.fretron.Model.Location> getBoundry() {
    return boundry;
  }

  /**
   * Sets the value of the 'boundry' field.
   * @param value the value to set.
   */
  public void setBoundry(java.util.List<com.fretron.Model.Location> value) {
    this.boundry = value;
  }

  /**
   * Gets the value of the 'circle' field.
   * @return The value of the 'circle' field.
   */
  public com.fretron.Model.Circle getCircle() {
    return circle;
  }

  /**
   * Sets the value of the 'circle' field.
   * @param value the value to set.
   */
  public void setCircle(com.fretron.Model.Circle value) {
    this.circle = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.fretron.Model.GeofenceType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.fretron.Model.GeofenceType value) {
    this.type = value;
  }

  /**
   * Creates a new Geofence RecordBuilder.
   * @return A new Geofence RecordBuilder
   */
  public static com.fretron.Model.Geofence.Builder newBuilder() {
    return new com.fretron.Model.Geofence.Builder();
  }

  /**
   * Creates a new Geofence RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Geofence RecordBuilder
   */
  public static com.fretron.Model.Geofence.Builder newBuilder(com.fretron.Model.Geofence.Builder other) {
    return new com.fretron.Model.Geofence.Builder(other);
  }

  /**
   * Creates a new Geofence RecordBuilder by copying an existing Geofence instance.
   * @param other The existing instance to copy.
   * @return A new Geofence RecordBuilder
   */
  public static com.fretron.Model.Geofence.Builder newBuilder(com.fretron.Model.Geofence other) {
    return new com.fretron.Model.Geofence.Builder(other);
  }

  /**
   * RecordBuilder for Geofence instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Geofence>
    implements org.apache.avro.data.RecordBuilder<Geofence> {

    private com.fretron.Model.Location center;
    private com.fretron.Model.Location.Builder centerBuilder;
    private java.util.List<com.fretron.Model.Location> boundry;
    private com.fretron.Model.Circle circle;
    private com.fretron.Model.Circle.Builder circleBuilder;
    private com.fretron.Model.GeofenceType type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Geofence.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.center)) {
        this.center = data().deepCopy(fields()[0].schema(), other.center);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCenterBuilder()) {
        this.centerBuilder = com.fretron.Model.Location.newBuilder(other.getCenterBuilder());
      }
      if (isValidValue(fields()[1], other.boundry)) {
        this.boundry = data().deepCopy(fields()[1].schema(), other.boundry);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.circle)) {
        this.circle = data().deepCopy(fields()[2].schema(), other.circle);
        fieldSetFlags()[2] = true;
      }
      if (other.hasCircleBuilder()) {
        this.circleBuilder = com.fretron.Model.Circle.newBuilder(other.getCircleBuilder());
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Geofence instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Geofence other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.center)) {
        this.center = data().deepCopy(fields()[0].schema(), other.center);
        fieldSetFlags()[0] = true;
      }
      this.centerBuilder = null;
      if (isValidValue(fields()[1], other.boundry)) {
        this.boundry = data().deepCopy(fields()[1].schema(), other.boundry);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.circle)) {
        this.circle = data().deepCopy(fields()[2].schema(), other.circle);
        fieldSetFlags()[2] = true;
      }
      this.circleBuilder = null;
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'center' field.
      * @return The value.
      */
    public com.fretron.Model.Location getCenter() {
      return center;
    }

    /**
      * Sets the value of the 'center' field.
      * @param value The value of 'center'.
      * @return This builder.
      */
    public com.fretron.Model.Geofence.Builder setCenter(com.fretron.Model.Location value) {
      validate(fields()[0], value);
      this.centerBuilder = null;
      this.center = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'center' field has been set.
      * @return True if the 'center' field has been set, false otherwise.
      */
    public boolean hasCenter() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'center' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Location.Builder getCenterBuilder() {
      if (centerBuilder == null) {
        if (hasCenter()) {
          setCenterBuilder(com.fretron.Model.Location.newBuilder(center));
        } else {
          setCenterBuilder(com.fretron.Model.Location.newBuilder());
        }
      }
      return centerBuilder;
    }

    /**
     * Sets the Builder instance for the 'center' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Geofence.Builder setCenterBuilder(com.fretron.Model.Location.Builder value) {
      clearCenter();
      centerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'center' field has an active Builder instance
     * @return True if the 'center' field has an active Builder instance
     */
    public boolean hasCenterBuilder() {
      return centerBuilder != null;
    }

    /**
      * Clears the value of the 'center' field.
      * @return This builder.
      */
    public com.fretron.Model.Geofence.Builder clearCenter() {
      center = null;
      centerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'boundry' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.Location> getBoundry() {
      return boundry;
    }

    /**
      * Sets the value of the 'boundry' field.
      * @param value The value of 'boundry'.
      * @return This builder.
      */
    public com.fretron.Model.Geofence.Builder setBoundry(java.util.List<com.fretron.Model.Location> value) {
      validate(fields()[1], value);
      this.boundry = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'boundry' field has been set.
      * @return True if the 'boundry' field has been set, false otherwise.
      */
    public boolean hasBoundry() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'boundry' field.
      * @return This builder.
      */
    public com.fretron.Model.Geofence.Builder clearBoundry() {
      boundry = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'circle' field.
      * @return The value.
      */
    public com.fretron.Model.Circle getCircle() {
      return circle;
    }

    /**
      * Sets the value of the 'circle' field.
      * @param value The value of 'circle'.
      * @return This builder.
      */
    public com.fretron.Model.Geofence.Builder setCircle(com.fretron.Model.Circle value) {
      validate(fields()[2], value);
      this.circleBuilder = null;
      this.circle = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'circle' field has been set.
      * @return True if the 'circle' field has been set, false otherwise.
      */
    public boolean hasCircle() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'circle' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Circle.Builder getCircleBuilder() {
      if (circleBuilder == null) {
        if (hasCircle()) {
          setCircleBuilder(com.fretron.Model.Circle.newBuilder(circle));
        } else {
          setCircleBuilder(com.fretron.Model.Circle.newBuilder());
        }
      }
      return circleBuilder;
    }

    /**
     * Sets the Builder instance for the 'circle' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Geofence.Builder setCircleBuilder(com.fretron.Model.Circle.Builder value) {
      clearCircle();
      circleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'circle' field has an active Builder instance
     * @return True if the 'circle' field has an active Builder instance
     */
    public boolean hasCircleBuilder() {
      return circleBuilder != null;
    }

    /**
      * Clears the value of the 'circle' field.
      * @return This builder.
      */
    public com.fretron.Model.Geofence.Builder clearCircle() {
      circle = null;
      circleBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.fretron.Model.GeofenceType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.Geofence.Builder setType(com.fretron.Model.GeofenceType value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.Geofence.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Geofence build() {
      try {
        Geofence record = new Geofence();
        if (centerBuilder != null) {
          record.center = this.centerBuilder.build();
        } else {
          record.center = fieldSetFlags()[0] ? this.center : (com.fretron.Model.Location) defaultValue(fields()[0]);
        }
        record.boundry = fieldSetFlags()[1] ? this.boundry : (java.util.List<com.fretron.Model.Location>) defaultValue(fields()[1]);
        if (circleBuilder != null) {
          record.circle = this.circleBuilder.build();
        } else {
          record.circle = fieldSetFlags()[2] ? this.circle : (com.fretron.Model.Circle) defaultValue(fields()[2]);
        }
        record.type = fieldSetFlags()[3] ? this.type : (com.fretron.Model.GeofenceType) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
