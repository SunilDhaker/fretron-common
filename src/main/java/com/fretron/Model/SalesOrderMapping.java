/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SalesOrderMapping extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3129775431839519791L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SalesOrderMapping\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orderId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lineItemId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"legType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"consignmentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"quantity\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"StandardMeasurement\",\"fields\":[{\"name\":\"weight\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Measurement\",\"fields\":[{\"name\":\"measurmentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unitOfMeasurment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plannedLoadQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualLoadedQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"netQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"grossQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualDeliveredQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"shortage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"frieghtDeductableQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"claimQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"temperature\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"density\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"moisture\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"volume\",\"type\":[\"null\",\"Measurement\"],\"default\":null},{\"name\":\"packageMeasurement\",\"type\":[\"null\",\"Measurement\"],\"default\":null}]}],\"default\":null},{\"name\":\"fuMappings\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LegWiseFuMapping\",\"fields\":[{\"name\":\"legId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"legType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fuLineItemId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"executionPlanId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fuStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String orderId;
  @Deprecated public java.lang.String lineItemId;
  @Deprecated public java.lang.String legType;
  @Deprecated public java.lang.String consignmentId;
  @Deprecated public com.fretron.Model.StandardMeasurement quantity;
  @Deprecated public java.util.List<com.fretron.Model.LegWiseFuMapping> fuMappings;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SalesOrderMapping() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param orderId The new value for orderId
   * @param lineItemId The new value for lineItemId
   * @param legType The new value for legType
   * @param consignmentId The new value for consignmentId
   * @param quantity The new value for quantity
   * @param fuMappings The new value for fuMappings
   */
  public SalesOrderMapping(java.lang.String uuid, java.lang.String orderId, java.lang.String lineItemId, java.lang.String legType, java.lang.String consignmentId, com.fretron.Model.StandardMeasurement quantity, java.util.List<com.fretron.Model.LegWiseFuMapping> fuMappings) {
    this.uuid = uuid;
    this.orderId = orderId;
    this.lineItemId = lineItemId;
    this.legType = legType;
    this.consignmentId = consignmentId;
    this.quantity = quantity;
    this.fuMappings = fuMappings;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return orderId;
    case 2: return lineItemId;
    case 3: return legType;
    case 4: return consignmentId;
    case 5: return quantity;
    case 6: return fuMappings;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: orderId = (java.lang.String)value$; break;
    case 2: lineItemId = (java.lang.String)value$; break;
    case 3: legType = (java.lang.String)value$; break;
    case 4: consignmentId = (java.lang.String)value$; break;
    case 5: quantity = (com.fretron.Model.StandardMeasurement)value$; break;
    case 6: fuMappings = (java.util.List<com.fretron.Model.LegWiseFuMapping>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.String getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.String value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'lineItemId' field.
   * @return The value of the 'lineItemId' field.
   */
  public java.lang.String getLineItemId() {
    return lineItemId;
  }

  /**
   * Sets the value of the 'lineItemId' field.
   * @param value the value to set.
   */
  public void setLineItemId(java.lang.String value) {
    this.lineItemId = value;
  }

  /**
   * Gets the value of the 'legType' field.
   * @return The value of the 'legType' field.
   */
  public java.lang.String getLegType() {
    return legType;
  }

  /**
   * Sets the value of the 'legType' field.
   * @param value the value to set.
   */
  public void setLegType(java.lang.String value) {
    this.legType = value;
  }

  /**
   * Gets the value of the 'consignmentId' field.
   * @return The value of the 'consignmentId' field.
   */
  public java.lang.String getConsignmentId() {
    return consignmentId;
  }

  /**
   * Sets the value of the 'consignmentId' field.
   * @param value the value to set.
   */
  public void setConsignmentId(java.lang.String value) {
    this.consignmentId = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public com.fretron.Model.StandardMeasurement getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(com.fretron.Model.StandardMeasurement value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'fuMappings' field.
   * @return The value of the 'fuMappings' field.
   */
  public java.util.List<com.fretron.Model.LegWiseFuMapping> getFuMappings() {
    return fuMappings;
  }

  /**
   * Sets the value of the 'fuMappings' field.
   * @param value the value to set.
   */
  public void setFuMappings(java.util.List<com.fretron.Model.LegWiseFuMapping> value) {
    this.fuMappings = value;
  }

  /**
   * Creates a new SalesOrderMapping RecordBuilder.
   * @return A new SalesOrderMapping RecordBuilder
   */
  public static com.fretron.Model.SalesOrderMapping.Builder newBuilder() {
    return new com.fretron.Model.SalesOrderMapping.Builder();
  }

  /**
   * Creates a new SalesOrderMapping RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SalesOrderMapping RecordBuilder
   */
  public static com.fretron.Model.SalesOrderMapping.Builder newBuilder(com.fretron.Model.SalesOrderMapping.Builder other) {
    return new com.fretron.Model.SalesOrderMapping.Builder(other);
  }

  /**
   * Creates a new SalesOrderMapping RecordBuilder by copying an existing SalesOrderMapping instance.
   * @param other The existing instance to copy.
   * @return A new SalesOrderMapping RecordBuilder
   */
  public static com.fretron.Model.SalesOrderMapping.Builder newBuilder(com.fretron.Model.SalesOrderMapping other) {
    return new com.fretron.Model.SalesOrderMapping.Builder(other);
  }

  /**
   * RecordBuilder for SalesOrderMapping instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SalesOrderMapping>
    implements org.apache.avro.data.RecordBuilder<SalesOrderMapping> {

    private java.lang.String uuid;
    private java.lang.String orderId;
    private java.lang.String lineItemId;
    private java.lang.String legType;
    private java.lang.String consignmentId;
    private com.fretron.Model.StandardMeasurement quantity;
    private com.fretron.Model.StandardMeasurement.Builder quantityBuilder;
    private java.util.List<com.fretron.Model.LegWiseFuMapping> fuMappings;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.SalesOrderMapping.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderId)) {
        this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lineItemId)) {
        this.lineItemId = data().deepCopy(fields()[2].schema(), other.lineItemId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.legType)) {
        this.legType = data().deepCopy(fields()[3].schema(), other.legType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.consignmentId)) {
        this.consignmentId = data().deepCopy(fields()[4].schema(), other.consignmentId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = true;
      }
      if (other.hasQuantityBuilder()) {
        this.quantityBuilder = com.fretron.Model.StandardMeasurement.newBuilder(other.getQuantityBuilder());
      }
      if (isValidValue(fields()[6], other.fuMappings)) {
        this.fuMappings = data().deepCopy(fields()[6].schema(), other.fuMappings);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SalesOrderMapping instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.SalesOrderMapping other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderId)) {
        this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lineItemId)) {
        this.lineItemId = data().deepCopy(fields()[2].schema(), other.lineItemId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.legType)) {
        this.legType = data().deepCopy(fields()[3].schema(), other.legType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.consignmentId)) {
        this.consignmentId = data().deepCopy(fields()[4].schema(), other.consignmentId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = true;
      }
      this.quantityBuilder = null;
      if (isValidValue(fields()[6], other.fuMappings)) {
        this.fuMappings = data().deepCopy(fields()[6].schema(), other.fuMappings);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.String getOrderId() {
      return orderId;
    }

    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder setOrderId(java.lang.String value) {
      validate(fields()[1], value);
      this.orderId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineItemId' field.
      * @return The value.
      */
    public java.lang.String getLineItemId() {
      return lineItemId;
    }

    /**
      * Sets the value of the 'lineItemId' field.
      * @param value The value of 'lineItemId'.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder setLineItemId(java.lang.String value) {
      validate(fields()[2], value);
      this.lineItemId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lineItemId' field has been set.
      * @return True if the 'lineItemId' field has been set, false otherwise.
      */
    public boolean hasLineItemId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lineItemId' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder clearLineItemId() {
      lineItemId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'legType' field.
      * @return The value.
      */
    public java.lang.String getLegType() {
      return legType;
    }

    /**
      * Sets the value of the 'legType' field.
      * @param value The value of 'legType'.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder setLegType(java.lang.String value) {
      validate(fields()[3], value);
      this.legType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'legType' field has been set.
      * @return True if the 'legType' field has been set, false otherwise.
      */
    public boolean hasLegType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'legType' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder clearLegType() {
      legType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'consignmentId' field.
      * @return The value.
      */
    public java.lang.String getConsignmentId() {
      return consignmentId;
    }

    /**
      * Sets the value of the 'consignmentId' field.
      * @param value The value of 'consignmentId'.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder setConsignmentId(java.lang.String value) {
      validate(fields()[4], value);
      this.consignmentId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'consignmentId' field has been set.
      * @return True if the 'consignmentId' field has been set, false otherwise.
      */
    public boolean hasConsignmentId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'consignmentId' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder clearConsignmentId() {
      consignmentId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public com.fretron.Model.StandardMeasurement getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder setQuantity(com.fretron.Model.StandardMeasurement value) {
      validate(fields()[5], value);
      this.quantityBuilder = null;
      this.quantity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'quantity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.StandardMeasurement.Builder getQuantityBuilder() {
      if (quantityBuilder == null) {
        if (hasQuantity()) {
          setQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder(quantity));
        } else {
          setQuantityBuilder(com.fretron.Model.StandardMeasurement.newBuilder());
        }
      }
      return quantityBuilder;
    }

    /**
     * Sets the Builder instance for the 'quantity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.SalesOrderMapping.Builder setQuantityBuilder(com.fretron.Model.StandardMeasurement.Builder value) {
      clearQuantity();
      quantityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'quantity' field has an active Builder instance
     * @return True if the 'quantity' field has an active Builder instance
     */
    public boolean hasQuantityBuilder() {
      return quantityBuilder != null;
    }

    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder clearQuantity() {
      quantity = null;
      quantityBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'fuMappings' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.LegWiseFuMapping> getFuMappings() {
      return fuMappings;
    }

    /**
      * Sets the value of the 'fuMappings' field.
      * @param value The value of 'fuMappings'.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder setFuMappings(java.util.List<com.fretron.Model.LegWiseFuMapping> value) {
      validate(fields()[6], value);
      this.fuMappings = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'fuMappings' field has been set.
      * @return True if the 'fuMappings' field has been set, false otherwise.
      */
    public boolean hasFuMappings() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'fuMappings' field.
      * @return This builder.
      */
    public com.fretron.Model.SalesOrderMapping.Builder clearFuMappings() {
      fuMappings = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public SalesOrderMapping build() {
      try {
        SalesOrderMapping record = new SalesOrderMapping();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.orderId = fieldSetFlags()[1] ? this.orderId : (java.lang.String) defaultValue(fields()[1]);
        record.lineItemId = fieldSetFlags()[2] ? this.lineItemId : (java.lang.String) defaultValue(fields()[2]);
        record.legType = fieldSetFlags()[3] ? this.legType : (java.lang.String) defaultValue(fields()[3]);
        record.consignmentId = fieldSetFlags()[4] ? this.consignmentId : (java.lang.String) defaultValue(fields()[4]);
        if (quantityBuilder != null) {
          record.quantity = this.quantityBuilder.build();
        } else {
          record.quantity = fieldSetFlags()[5] ? this.quantity : (com.fretron.Model.StandardMeasurement) defaultValue(fields()[5]);
        }
        record.fuMappings = fieldSetFlags()[6] ? this.fuMappings : (java.util.List<com.fretron.Model.LegWiseFuMapping>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
