/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Comment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3139308373881136054L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Comment\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"comment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"by\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"likedBy\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"edited\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String comment;
  @Deprecated public java.lang.String by;
  @Deprecated public java.util.List<java.lang.String> likedBy;
  @Deprecated public java.lang.Long time;
  @Deprecated public java.lang.String source;
  @Deprecated public java.lang.Boolean edited;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Comment() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param comment The new value for comment
   * @param by The new value for by
   * @param likedBy The new value for likedBy
   * @param time The new value for time
   * @param source The new value for source
   * @param edited The new value for edited
   */
  public Comment(java.lang.String uuid, java.lang.String comment, java.lang.String by, java.util.List<java.lang.String> likedBy, java.lang.Long time, java.lang.String source, java.lang.Boolean edited) {
    this.uuid = uuid;
    this.comment = comment;
    this.by = by;
    this.likedBy = likedBy;
    this.time = time;
    this.source = source;
    this.edited = edited;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return comment;
    case 2: return by;
    case 3: return likedBy;
    case 4: return time;
    case 5: return source;
    case 6: return edited;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: comment = (java.lang.String)value$; break;
    case 2: by = (java.lang.String)value$; break;
    case 3: likedBy = (java.util.List<java.lang.String>)value$; break;
    case 4: time = (java.lang.Long)value$; break;
    case 5: source = (java.lang.String)value$; break;
    case 6: edited = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'comment' field.
   * @return The value of the 'comment' field.
   */
  public java.lang.String getComment() {
    return comment;
  }

  /**
   * Sets the value of the 'comment' field.
   * @param value the value to set.
   */
  public void setComment(java.lang.String value) {
    this.comment = value;
  }

  /**
   * Gets the value of the 'by' field.
   * @return The value of the 'by' field.
   */
  public java.lang.String getBy() {
    return by;
  }

  /**
   * Sets the value of the 'by' field.
   * @param value the value to set.
   */
  public void setBy(java.lang.String value) {
    this.by = value;
  }

  /**
   * Gets the value of the 'likedBy' field.
   * @return The value of the 'likedBy' field.
   */
  public java.util.List<java.lang.String> getLikedBy() {
    return likedBy;
  }

  /**
   * Sets the value of the 'likedBy' field.
   * @param value the value to set.
   */
  public void setLikedBy(java.util.List<java.lang.String> value) {
    this.likedBy = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'edited' field.
   * @return The value of the 'edited' field.
   */
  public java.lang.Boolean getEdited() {
    return edited;
  }

  /**
   * Sets the value of the 'edited' field.
   * @param value the value to set.
   */
  public void setEdited(java.lang.Boolean value) {
    this.edited = value;
  }

  /**
   * Creates a new Comment RecordBuilder.
   * @return A new Comment RecordBuilder
   */
  public static com.fretron.Model.Comment.Builder newBuilder() {
    return new com.fretron.Model.Comment.Builder();
  }

  /**
   * Creates a new Comment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Comment RecordBuilder
   */
  public static com.fretron.Model.Comment.Builder newBuilder(com.fretron.Model.Comment.Builder other) {
    return new com.fretron.Model.Comment.Builder(other);
  }

  /**
   * Creates a new Comment RecordBuilder by copying an existing Comment instance.
   * @param other The existing instance to copy.
   * @return A new Comment RecordBuilder
   */
  public static com.fretron.Model.Comment.Builder newBuilder(com.fretron.Model.Comment other) {
    return new com.fretron.Model.Comment.Builder(other);
  }

  /**
   * RecordBuilder for Comment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Comment>
    implements org.apache.avro.data.RecordBuilder<Comment> {

    private java.lang.String uuid;
    private java.lang.String comment;
    private java.lang.String by;
    private java.util.List<java.lang.String> likedBy;
    private java.lang.Long time;
    private java.lang.String source;
    private java.lang.Boolean edited;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Comment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.comment)) {
        this.comment = data().deepCopy(fields()[1].schema(), other.comment);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.by)) {
        this.by = data().deepCopy(fields()[2].schema(), other.by);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.likedBy)) {
        this.likedBy = data().deepCopy(fields()[3].schema(), other.likedBy);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time)) {
        this.time = data().deepCopy(fields()[4].schema(), other.time);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.source)) {
        this.source = data().deepCopy(fields()[5].schema(), other.source);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.edited)) {
        this.edited = data().deepCopy(fields()[6].schema(), other.edited);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Comment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Comment other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.comment)) {
        this.comment = data().deepCopy(fields()[1].schema(), other.comment);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.by)) {
        this.by = data().deepCopy(fields()[2].schema(), other.by);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.likedBy)) {
        this.likedBy = data().deepCopy(fields()[3].schema(), other.likedBy);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time)) {
        this.time = data().deepCopy(fields()[4].schema(), other.time);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.source)) {
        this.source = data().deepCopy(fields()[5].schema(), other.source);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.edited)) {
        this.edited = data().deepCopy(fields()[6].schema(), other.edited);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'comment' field.
      * @return The value.
      */
    public java.lang.String getComment() {
      return comment;
    }

    /**
      * Sets the value of the 'comment' field.
      * @param value The value of 'comment'.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder setComment(java.lang.String value) {
      validate(fields()[1], value);
      this.comment = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'comment' field has been set.
      * @return True if the 'comment' field has been set, false otherwise.
      */
    public boolean hasComment() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'comment' field.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder clearComment() {
      comment = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'by' field.
      * @return The value.
      */
    public java.lang.String getBy() {
      return by;
    }

    /**
      * Sets the value of the 'by' field.
      * @param value The value of 'by'.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder setBy(java.lang.String value) {
      validate(fields()[2], value);
      this.by = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'by' field has been set.
      * @return True if the 'by' field has been set, false otherwise.
      */
    public boolean hasBy() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'by' field.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder clearBy() {
      by = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'likedBy' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getLikedBy() {
      return likedBy;
    }

    /**
      * Sets the value of the 'likedBy' field.
      * @param value The value of 'likedBy'.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder setLikedBy(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.likedBy = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'likedBy' field has been set.
      * @return True if the 'likedBy' field has been set, false otherwise.
      */
    public boolean hasLikedBy() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'likedBy' field.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder clearLikedBy() {
      likedBy = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder setTime(java.lang.Long value) {
      validate(fields()[4], value);
      this.time = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder clearTime() {
      time = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder setSource(java.lang.String value) {
      validate(fields()[5], value);
      this.source = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder clearSource() {
      source = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'edited' field.
      * @return The value.
      */
    public java.lang.Boolean getEdited() {
      return edited;
    }

    /**
      * Sets the value of the 'edited' field.
      * @param value The value of 'edited'.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder setEdited(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.edited = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'edited' field has been set.
      * @return True if the 'edited' field has been set, false otherwise.
      */
    public boolean hasEdited() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'edited' field.
      * @return This builder.
      */
    public com.fretron.Model.Comment.Builder clearEdited() {
      edited = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Comment build() {
      try {
        Comment record = new Comment();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.comment = fieldSetFlags()[1] ? this.comment : (java.lang.String) defaultValue(fields()[1]);
        record.by = fieldSetFlags()[2] ? this.by : (java.lang.String) defaultValue(fields()[2]);
        record.likedBy = fieldSetFlags()[3] ? this.likedBy : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        record.time = fieldSetFlags()[4] ? this.time : (java.lang.Long) defaultValue(fields()[4]);
        record.source = fieldSetFlags()[5] ? this.source : (java.lang.String) defaultValue(fields()[5]);
        record.edited = fieldSetFlags()[6] ? this.edited : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
