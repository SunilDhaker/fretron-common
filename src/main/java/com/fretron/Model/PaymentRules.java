/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PaymentRules extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7961550118772574308L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentRules\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"whenClaimApplicable\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PaymentCondition\",\"fields\":[{\"name\":\"duration\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"paymentMode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"creditLimit\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"whenNoClaimApplicable\",\"type\":[\"null\",\"PaymentCondition\"],\"default\":null},{\"name\":\"graceDays\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"paymentDateRule\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentDueRule\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.PaymentCondition whenClaimApplicable;
  @Deprecated public com.fretron.Model.PaymentCondition whenNoClaimApplicable;
  @Deprecated public java.lang.Integer graceDays;
  @Deprecated public java.lang.String paymentDateRule;
  @Deprecated public java.lang.String paymentDueRule;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentRules() {}

  /**
   * All-args constructor.
   * @param whenClaimApplicable The new value for whenClaimApplicable
   * @param whenNoClaimApplicable The new value for whenNoClaimApplicable
   * @param graceDays The new value for graceDays
   * @param paymentDateRule The new value for paymentDateRule
   * @param paymentDueRule The new value for paymentDueRule
   */
  public PaymentRules(com.fretron.Model.PaymentCondition whenClaimApplicable, com.fretron.Model.PaymentCondition whenNoClaimApplicable, java.lang.Integer graceDays, java.lang.String paymentDateRule, java.lang.String paymentDueRule) {
    this.whenClaimApplicable = whenClaimApplicable;
    this.whenNoClaimApplicable = whenNoClaimApplicable;
    this.graceDays = graceDays;
    this.paymentDateRule = paymentDateRule;
    this.paymentDueRule = paymentDueRule;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return whenClaimApplicable;
    case 1: return whenNoClaimApplicable;
    case 2: return graceDays;
    case 3: return paymentDateRule;
    case 4: return paymentDueRule;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: whenClaimApplicable = (com.fretron.Model.PaymentCondition)value$; break;
    case 1: whenNoClaimApplicable = (com.fretron.Model.PaymentCondition)value$; break;
    case 2: graceDays = (java.lang.Integer)value$; break;
    case 3: paymentDateRule = (java.lang.String)value$; break;
    case 4: paymentDueRule = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'whenClaimApplicable' field.
   * @return The value of the 'whenClaimApplicable' field.
   */
  public com.fretron.Model.PaymentCondition getWhenClaimApplicable() {
    return whenClaimApplicable;
  }

  /**
   * Sets the value of the 'whenClaimApplicable' field.
   * @param value the value to set.
   */
  public void setWhenClaimApplicable(com.fretron.Model.PaymentCondition value) {
    this.whenClaimApplicable = value;
  }

  /**
   * Gets the value of the 'whenNoClaimApplicable' field.
   * @return The value of the 'whenNoClaimApplicable' field.
   */
  public com.fretron.Model.PaymentCondition getWhenNoClaimApplicable() {
    return whenNoClaimApplicable;
  }

  /**
   * Sets the value of the 'whenNoClaimApplicable' field.
   * @param value the value to set.
   */
  public void setWhenNoClaimApplicable(com.fretron.Model.PaymentCondition value) {
    this.whenNoClaimApplicable = value;
  }

  /**
   * Gets the value of the 'graceDays' field.
   * @return The value of the 'graceDays' field.
   */
  public java.lang.Integer getGraceDays() {
    return graceDays;
  }

  /**
   * Sets the value of the 'graceDays' field.
   * @param value the value to set.
   */
  public void setGraceDays(java.lang.Integer value) {
    this.graceDays = value;
  }

  /**
   * Gets the value of the 'paymentDateRule' field.
   * @return The value of the 'paymentDateRule' field.
   */
  public java.lang.String getPaymentDateRule() {
    return paymentDateRule;
  }

  /**
   * Sets the value of the 'paymentDateRule' field.
   * @param value the value to set.
   */
  public void setPaymentDateRule(java.lang.String value) {
    this.paymentDateRule = value;
  }

  /**
   * Gets the value of the 'paymentDueRule' field.
   * @return The value of the 'paymentDueRule' field.
   */
  public java.lang.String getPaymentDueRule() {
    return paymentDueRule;
  }

  /**
   * Sets the value of the 'paymentDueRule' field.
   * @param value the value to set.
   */
  public void setPaymentDueRule(java.lang.String value) {
    this.paymentDueRule = value;
  }

  /**
   * Creates a new PaymentRules RecordBuilder.
   * @return A new PaymentRules RecordBuilder
   */
  public static com.fretron.Model.PaymentRules.Builder newBuilder() {
    return new com.fretron.Model.PaymentRules.Builder();
  }

  /**
   * Creates a new PaymentRules RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentRules RecordBuilder
   */
  public static com.fretron.Model.PaymentRules.Builder newBuilder(com.fretron.Model.PaymentRules.Builder other) {
    return new com.fretron.Model.PaymentRules.Builder(other);
  }

  /**
   * Creates a new PaymentRules RecordBuilder by copying an existing PaymentRules instance.
   * @param other The existing instance to copy.
   * @return A new PaymentRules RecordBuilder
   */
  public static com.fretron.Model.PaymentRules.Builder newBuilder(com.fretron.Model.PaymentRules other) {
    return new com.fretron.Model.PaymentRules.Builder(other);
  }

  /**
   * RecordBuilder for PaymentRules instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentRules>
    implements org.apache.avro.data.RecordBuilder<PaymentRules> {

    private com.fretron.Model.PaymentCondition whenClaimApplicable;
    private com.fretron.Model.PaymentCondition.Builder whenClaimApplicableBuilder;
    private com.fretron.Model.PaymentCondition whenNoClaimApplicable;
    private com.fretron.Model.PaymentCondition.Builder whenNoClaimApplicableBuilder;
    private java.lang.Integer graceDays;
    private java.lang.String paymentDateRule;
    private java.lang.String paymentDueRule;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.PaymentRules.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.whenClaimApplicable)) {
        this.whenClaimApplicable = data().deepCopy(fields()[0].schema(), other.whenClaimApplicable);
        fieldSetFlags()[0] = true;
      }
      if (other.hasWhenClaimApplicableBuilder()) {
        this.whenClaimApplicableBuilder = com.fretron.Model.PaymentCondition.newBuilder(other.getWhenClaimApplicableBuilder());
      }
      if (isValidValue(fields()[1], other.whenNoClaimApplicable)) {
        this.whenNoClaimApplicable = data().deepCopy(fields()[1].schema(), other.whenNoClaimApplicable);
        fieldSetFlags()[1] = true;
      }
      if (other.hasWhenNoClaimApplicableBuilder()) {
        this.whenNoClaimApplicableBuilder = com.fretron.Model.PaymentCondition.newBuilder(other.getWhenNoClaimApplicableBuilder());
      }
      if (isValidValue(fields()[2], other.graceDays)) {
        this.graceDays = data().deepCopy(fields()[2].schema(), other.graceDays);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.paymentDateRule)) {
        this.paymentDateRule = data().deepCopy(fields()[3].schema(), other.paymentDateRule);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.paymentDueRule)) {
        this.paymentDueRule = data().deepCopy(fields()[4].schema(), other.paymentDueRule);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentRules instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.PaymentRules other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.whenClaimApplicable)) {
        this.whenClaimApplicable = data().deepCopy(fields()[0].schema(), other.whenClaimApplicable);
        fieldSetFlags()[0] = true;
      }
      this.whenClaimApplicableBuilder = null;
      if (isValidValue(fields()[1], other.whenNoClaimApplicable)) {
        this.whenNoClaimApplicable = data().deepCopy(fields()[1].schema(), other.whenNoClaimApplicable);
        fieldSetFlags()[1] = true;
      }
      this.whenNoClaimApplicableBuilder = null;
      if (isValidValue(fields()[2], other.graceDays)) {
        this.graceDays = data().deepCopy(fields()[2].schema(), other.graceDays);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.paymentDateRule)) {
        this.paymentDateRule = data().deepCopy(fields()[3].schema(), other.paymentDateRule);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.paymentDueRule)) {
        this.paymentDueRule = data().deepCopy(fields()[4].schema(), other.paymentDueRule);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'whenClaimApplicable' field.
      * @return The value.
      */
    public com.fretron.Model.PaymentCondition getWhenClaimApplicable() {
      return whenClaimApplicable;
    }

    /**
      * Sets the value of the 'whenClaimApplicable' field.
      * @param value The value of 'whenClaimApplicable'.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder setWhenClaimApplicable(com.fretron.Model.PaymentCondition value) {
      validate(fields()[0], value);
      this.whenClaimApplicableBuilder = null;
      this.whenClaimApplicable = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'whenClaimApplicable' field has been set.
      * @return True if the 'whenClaimApplicable' field has been set, false otherwise.
      */
    public boolean hasWhenClaimApplicable() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'whenClaimApplicable' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.PaymentCondition.Builder getWhenClaimApplicableBuilder() {
      if (whenClaimApplicableBuilder == null) {
        if (hasWhenClaimApplicable()) {
          setWhenClaimApplicableBuilder(com.fretron.Model.PaymentCondition.newBuilder(whenClaimApplicable));
        } else {
          setWhenClaimApplicableBuilder(com.fretron.Model.PaymentCondition.newBuilder());
        }
      }
      return whenClaimApplicableBuilder;
    }

    /**
     * Sets the Builder instance for the 'whenClaimApplicable' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.PaymentRules.Builder setWhenClaimApplicableBuilder(com.fretron.Model.PaymentCondition.Builder value) {
      clearWhenClaimApplicable();
      whenClaimApplicableBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'whenClaimApplicable' field has an active Builder instance
     * @return True if the 'whenClaimApplicable' field has an active Builder instance
     */
    public boolean hasWhenClaimApplicableBuilder() {
      return whenClaimApplicableBuilder != null;
    }

    /**
      * Clears the value of the 'whenClaimApplicable' field.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder clearWhenClaimApplicable() {
      whenClaimApplicable = null;
      whenClaimApplicableBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'whenNoClaimApplicable' field.
      * @return The value.
      */
    public com.fretron.Model.PaymentCondition getWhenNoClaimApplicable() {
      return whenNoClaimApplicable;
    }

    /**
      * Sets the value of the 'whenNoClaimApplicable' field.
      * @param value The value of 'whenNoClaimApplicable'.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder setWhenNoClaimApplicable(com.fretron.Model.PaymentCondition value) {
      validate(fields()[1], value);
      this.whenNoClaimApplicableBuilder = null;
      this.whenNoClaimApplicable = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'whenNoClaimApplicable' field has been set.
      * @return True if the 'whenNoClaimApplicable' field has been set, false otherwise.
      */
    public boolean hasWhenNoClaimApplicable() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'whenNoClaimApplicable' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.PaymentCondition.Builder getWhenNoClaimApplicableBuilder() {
      if (whenNoClaimApplicableBuilder == null) {
        if (hasWhenNoClaimApplicable()) {
          setWhenNoClaimApplicableBuilder(com.fretron.Model.PaymentCondition.newBuilder(whenNoClaimApplicable));
        } else {
          setWhenNoClaimApplicableBuilder(com.fretron.Model.PaymentCondition.newBuilder());
        }
      }
      return whenNoClaimApplicableBuilder;
    }

    /**
     * Sets the Builder instance for the 'whenNoClaimApplicable' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.PaymentRules.Builder setWhenNoClaimApplicableBuilder(com.fretron.Model.PaymentCondition.Builder value) {
      clearWhenNoClaimApplicable();
      whenNoClaimApplicableBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'whenNoClaimApplicable' field has an active Builder instance
     * @return True if the 'whenNoClaimApplicable' field has an active Builder instance
     */
    public boolean hasWhenNoClaimApplicableBuilder() {
      return whenNoClaimApplicableBuilder != null;
    }

    /**
      * Clears the value of the 'whenNoClaimApplicable' field.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder clearWhenNoClaimApplicable() {
      whenNoClaimApplicable = null;
      whenNoClaimApplicableBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'graceDays' field.
      * @return The value.
      */
    public java.lang.Integer getGraceDays() {
      return graceDays;
    }

    /**
      * Sets the value of the 'graceDays' field.
      * @param value The value of 'graceDays'.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder setGraceDays(java.lang.Integer value) {
      validate(fields()[2], value);
      this.graceDays = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'graceDays' field has been set.
      * @return True if the 'graceDays' field has been set, false otherwise.
      */
    public boolean hasGraceDays() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'graceDays' field.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder clearGraceDays() {
      graceDays = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentDateRule' field.
      * @return The value.
      */
    public java.lang.String getPaymentDateRule() {
      return paymentDateRule;
    }

    /**
      * Sets the value of the 'paymentDateRule' field.
      * @param value The value of 'paymentDateRule'.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder setPaymentDateRule(java.lang.String value) {
      validate(fields()[3], value);
      this.paymentDateRule = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentDateRule' field has been set.
      * @return True if the 'paymentDateRule' field has been set, false otherwise.
      */
    public boolean hasPaymentDateRule() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'paymentDateRule' field.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder clearPaymentDateRule() {
      paymentDateRule = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentDueRule' field.
      * @return The value.
      */
    public java.lang.String getPaymentDueRule() {
      return paymentDueRule;
    }

    /**
      * Sets the value of the 'paymentDueRule' field.
      * @param value The value of 'paymentDueRule'.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder setPaymentDueRule(java.lang.String value) {
      validate(fields()[4], value);
      this.paymentDueRule = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentDueRule' field has been set.
      * @return True if the 'paymentDueRule' field has been set, false otherwise.
      */
    public boolean hasPaymentDueRule() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'paymentDueRule' field.
      * @return This builder.
      */
    public com.fretron.Model.PaymentRules.Builder clearPaymentDueRule() {
      paymentDueRule = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public PaymentRules build() {
      try {
        PaymentRules record = new PaymentRules();
        if (whenClaimApplicableBuilder != null) {
          record.whenClaimApplicable = this.whenClaimApplicableBuilder.build();
        } else {
          record.whenClaimApplicable = fieldSetFlags()[0] ? this.whenClaimApplicable : (com.fretron.Model.PaymentCondition) defaultValue(fields()[0]);
        }
        if (whenNoClaimApplicableBuilder != null) {
          record.whenNoClaimApplicable = this.whenNoClaimApplicableBuilder.build();
        } else {
          record.whenNoClaimApplicable = fieldSetFlags()[1] ? this.whenNoClaimApplicable : (com.fretron.Model.PaymentCondition) defaultValue(fields()[1]);
        }
        record.graceDays = fieldSetFlags()[2] ? this.graceDays : (java.lang.Integer) defaultValue(fields()[2]);
        record.paymentDateRule = fieldSetFlags()[3] ? this.paymentDateRule : (java.lang.String) defaultValue(fields()[3]);
        record.paymentDueRule = fieldSetFlags()[4] ? this.paymentDueRule : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
