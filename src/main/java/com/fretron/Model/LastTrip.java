/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LastTrip extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1057818770947958783L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LastTrip\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"consignor\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"consignee\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"rate\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String consignor;
  @Deprecated public java.lang.String consignee;
  @Deprecated public java.lang.String material;
  @Deprecated public java.lang.Double rate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LastTrip() {}

  /**
   * All-args constructor.
   * @param consignor The new value for consignor
   * @param consignee The new value for consignee
   * @param material The new value for material
   * @param rate The new value for rate
   */
  public LastTrip(java.lang.String consignor, java.lang.String consignee, java.lang.String material, java.lang.Double rate) {
    this.consignor = consignor;
    this.consignee = consignee;
    this.material = material;
    this.rate = rate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return consignor;
    case 1: return consignee;
    case 2: return material;
    case 3: return rate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: consignor = (java.lang.String)value$; break;
    case 1: consignee = (java.lang.String)value$; break;
    case 2: material = (java.lang.String)value$; break;
    case 3: rate = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'consignor' field.
   * @return The value of the 'consignor' field.
   */
  public java.lang.String getConsignor() {
    return consignor;
  }

  /**
   * Sets the value of the 'consignor' field.
   * @param value the value to set.
   */
  public void setConsignor(java.lang.String value) {
    this.consignor = value;
  }

  /**
   * Gets the value of the 'consignee' field.
   * @return The value of the 'consignee' field.
   */
  public java.lang.String getConsignee() {
    return consignee;
  }

  /**
   * Sets the value of the 'consignee' field.
   * @param value the value to set.
   */
  public void setConsignee(java.lang.String value) {
    this.consignee = value;
  }

  /**
   * Gets the value of the 'material' field.
   * @return The value of the 'material' field.
   */
  public java.lang.String getMaterial() {
    return material;
  }

  /**
   * Sets the value of the 'material' field.
   * @param value the value to set.
   */
  public void setMaterial(java.lang.String value) {
    this.material = value;
  }

  /**
   * Gets the value of the 'rate' field.
   * @return The value of the 'rate' field.
   */
  public java.lang.Double getRate() {
    return rate;
  }

  /**
   * Sets the value of the 'rate' field.
   * @param value the value to set.
   */
  public void setRate(java.lang.Double value) {
    this.rate = value;
  }

  /**
   * Creates a new LastTrip RecordBuilder.
   * @return A new LastTrip RecordBuilder
   */
  public static com.fretron.Model.LastTrip.Builder newBuilder() {
    return new com.fretron.Model.LastTrip.Builder();
  }

  /**
   * Creates a new LastTrip RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LastTrip RecordBuilder
   */
  public static com.fretron.Model.LastTrip.Builder newBuilder(com.fretron.Model.LastTrip.Builder other) {
    return new com.fretron.Model.LastTrip.Builder(other);
  }

  /**
   * Creates a new LastTrip RecordBuilder by copying an existing LastTrip instance.
   * @param other The existing instance to copy.
   * @return A new LastTrip RecordBuilder
   */
  public static com.fretron.Model.LastTrip.Builder newBuilder(com.fretron.Model.LastTrip other) {
    return new com.fretron.Model.LastTrip.Builder(other);
  }

  /**
   * RecordBuilder for LastTrip instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LastTrip>
    implements org.apache.avro.data.RecordBuilder<LastTrip> {

    private java.lang.String consignor;
    private java.lang.String consignee;
    private java.lang.String material;
    private java.lang.Double rate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.LastTrip.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.consignor)) {
        this.consignor = data().deepCopy(fields()[0].schema(), other.consignor);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.consignee)) {
        this.consignee = data().deepCopy(fields()[1].schema(), other.consignee);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.material)) {
        this.material = data().deepCopy(fields()[2].schema(), other.material);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rate)) {
        this.rate = data().deepCopy(fields()[3].schema(), other.rate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LastTrip instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.LastTrip other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.consignor)) {
        this.consignor = data().deepCopy(fields()[0].schema(), other.consignor);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.consignee)) {
        this.consignee = data().deepCopy(fields()[1].schema(), other.consignee);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.material)) {
        this.material = data().deepCopy(fields()[2].schema(), other.material);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rate)) {
        this.rate = data().deepCopy(fields()[3].schema(), other.rate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'consignor' field.
      * @return The value.
      */
    public java.lang.String getConsignor() {
      return consignor;
    }

    /**
      * Sets the value of the 'consignor' field.
      * @param value The value of 'consignor'.
      * @return This builder.
      */
    public com.fretron.Model.LastTrip.Builder setConsignor(java.lang.String value) {
      validate(fields()[0], value);
      this.consignor = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'consignor' field has been set.
      * @return True if the 'consignor' field has been set, false otherwise.
      */
    public boolean hasConsignor() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'consignor' field.
      * @return This builder.
      */
    public com.fretron.Model.LastTrip.Builder clearConsignor() {
      consignor = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'consignee' field.
      * @return The value.
      */
    public java.lang.String getConsignee() {
      return consignee;
    }

    /**
      * Sets the value of the 'consignee' field.
      * @param value The value of 'consignee'.
      * @return This builder.
      */
    public com.fretron.Model.LastTrip.Builder setConsignee(java.lang.String value) {
      validate(fields()[1], value);
      this.consignee = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'consignee' field has been set.
      * @return True if the 'consignee' field has been set, false otherwise.
      */
    public boolean hasConsignee() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'consignee' field.
      * @return This builder.
      */
    public com.fretron.Model.LastTrip.Builder clearConsignee() {
      consignee = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'material' field.
      * @return The value.
      */
    public java.lang.String getMaterial() {
      return material;
    }

    /**
      * Sets the value of the 'material' field.
      * @param value The value of 'material'.
      * @return This builder.
      */
    public com.fretron.Model.LastTrip.Builder setMaterial(java.lang.String value) {
      validate(fields()[2], value);
      this.material = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'material' field has been set.
      * @return True if the 'material' field has been set, false otherwise.
      */
    public boolean hasMaterial() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'material' field.
      * @return This builder.
      */
    public com.fretron.Model.LastTrip.Builder clearMaterial() {
      material = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'rate' field.
      * @return The value.
      */
    public java.lang.Double getRate() {
      return rate;
    }

    /**
      * Sets the value of the 'rate' field.
      * @param value The value of 'rate'.
      * @return This builder.
      */
    public com.fretron.Model.LastTrip.Builder setRate(java.lang.Double value) {
      validate(fields()[3], value);
      this.rate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'rate' field has been set.
      * @return True if the 'rate' field has been set, false otherwise.
      */
    public boolean hasRate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'rate' field.
      * @return This builder.
      */
    public com.fretron.Model.LastTrip.Builder clearRate() {
      rate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public LastTrip build() {
      try {
        LastTrip record = new LastTrip();
        record.consignor = fieldSetFlags()[0] ? this.consignor : (java.lang.String) defaultValue(fields()[0]);
        record.consignee = fieldSetFlags()[1] ? this.consignee : (java.lang.String) defaultValue(fields()[1]);
        record.material = fieldSetFlags()[2] ? this.material : (java.lang.String) defaultValue(fields()[2]);
        record.rate = fieldSetFlags()[3] ? this.rate : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
