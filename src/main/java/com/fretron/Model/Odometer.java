/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Odometer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3908036262072511958L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Odometer\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"globalMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastUpdateTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isGlobalMeterManuallyCalibrated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"lastCalibrationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Double globalMeter;
  @Deprecated public java.lang.Long lastUpdateTime;
  @Deprecated public java.lang.Boolean isGlobalMeterManuallyCalibrated;
  @Deprecated public java.lang.Long lastCalibrationTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Odometer() {}

  /**
   * All-args constructor.
   * @param globalMeter The new value for globalMeter
   * @param lastUpdateTime The new value for lastUpdateTime
   * @param isGlobalMeterManuallyCalibrated The new value for isGlobalMeterManuallyCalibrated
   * @param lastCalibrationTime The new value for lastCalibrationTime
   */
  public Odometer(java.lang.Double globalMeter, java.lang.Long lastUpdateTime, java.lang.Boolean isGlobalMeterManuallyCalibrated, java.lang.Long lastCalibrationTime) {
    this.globalMeter = globalMeter;
    this.lastUpdateTime = lastUpdateTime;
    this.isGlobalMeterManuallyCalibrated = isGlobalMeterManuallyCalibrated;
    this.lastCalibrationTime = lastCalibrationTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return globalMeter;
    case 1: return lastUpdateTime;
    case 2: return isGlobalMeterManuallyCalibrated;
    case 3: return lastCalibrationTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: globalMeter = (java.lang.Double)value$; break;
    case 1: lastUpdateTime = (java.lang.Long)value$; break;
    case 2: isGlobalMeterManuallyCalibrated = (java.lang.Boolean)value$; break;
    case 3: lastCalibrationTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'globalMeter' field.
   * @return The value of the 'globalMeter' field.
   */
  public java.lang.Double getGlobalMeter() {
    return globalMeter;
  }

  /**
   * Sets the value of the 'globalMeter' field.
   * @param value the value to set.
   */
  public void setGlobalMeter(java.lang.Double value) {
    this.globalMeter = value;
  }

  /**
   * Gets the value of the 'lastUpdateTime' field.
   * @return The value of the 'lastUpdateTime' field.
   */
  public java.lang.Long getLastUpdateTime() {
    return lastUpdateTime;
  }

  /**
   * Sets the value of the 'lastUpdateTime' field.
   * @param value the value to set.
   */
  public void setLastUpdateTime(java.lang.Long value) {
    this.lastUpdateTime = value;
  }

  /**
   * Gets the value of the 'isGlobalMeterManuallyCalibrated' field.
   * @return The value of the 'isGlobalMeterManuallyCalibrated' field.
   */
  public java.lang.Boolean getIsGlobalMeterManuallyCalibrated() {
    return isGlobalMeterManuallyCalibrated;
  }

  /**
   * Sets the value of the 'isGlobalMeterManuallyCalibrated' field.
   * @param value the value to set.
   */
  public void setIsGlobalMeterManuallyCalibrated(java.lang.Boolean value) {
    this.isGlobalMeterManuallyCalibrated = value;
  }

  /**
   * Gets the value of the 'lastCalibrationTime' field.
   * @return The value of the 'lastCalibrationTime' field.
   */
  public java.lang.Long getLastCalibrationTime() {
    return lastCalibrationTime;
  }

  /**
   * Sets the value of the 'lastCalibrationTime' field.
   * @param value the value to set.
   */
  public void setLastCalibrationTime(java.lang.Long value) {
    this.lastCalibrationTime = value;
  }

  /**
   * Creates a new Odometer RecordBuilder.
   * @return A new Odometer RecordBuilder
   */
  public static com.fretron.Model.Odometer.Builder newBuilder() {
    return new com.fretron.Model.Odometer.Builder();
  }

  /**
   * Creates a new Odometer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Odometer RecordBuilder
   */
  public static com.fretron.Model.Odometer.Builder newBuilder(com.fretron.Model.Odometer.Builder other) {
    return new com.fretron.Model.Odometer.Builder(other);
  }

  /**
   * Creates a new Odometer RecordBuilder by copying an existing Odometer instance.
   * @param other The existing instance to copy.
   * @return A new Odometer RecordBuilder
   */
  public static com.fretron.Model.Odometer.Builder newBuilder(com.fretron.Model.Odometer other) {
    return new com.fretron.Model.Odometer.Builder(other);
  }

  /**
   * RecordBuilder for Odometer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Odometer>
    implements org.apache.avro.data.RecordBuilder<Odometer> {

    private java.lang.Double globalMeter;
    private java.lang.Long lastUpdateTime;
    private java.lang.Boolean isGlobalMeterManuallyCalibrated;
    private java.lang.Long lastCalibrationTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Odometer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.globalMeter)) {
        this.globalMeter = data().deepCopy(fields()[0].schema(), other.globalMeter);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastUpdateTime)) {
        this.lastUpdateTime = data().deepCopy(fields()[1].schema(), other.lastUpdateTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isGlobalMeterManuallyCalibrated)) {
        this.isGlobalMeterManuallyCalibrated = data().deepCopy(fields()[2].schema(), other.isGlobalMeterManuallyCalibrated);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastCalibrationTime)) {
        this.lastCalibrationTime = data().deepCopy(fields()[3].schema(), other.lastCalibrationTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Odometer instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Odometer other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.globalMeter)) {
        this.globalMeter = data().deepCopy(fields()[0].schema(), other.globalMeter);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastUpdateTime)) {
        this.lastUpdateTime = data().deepCopy(fields()[1].schema(), other.lastUpdateTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isGlobalMeterManuallyCalibrated)) {
        this.isGlobalMeterManuallyCalibrated = data().deepCopy(fields()[2].schema(), other.isGlobalMeterManuallyCalibrated);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastCalibrationTime)) {
        this.lastCalibrationTime = data().deepCopy(fields()[3].schema(), other.lastCalibrationTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'globalMeter' field.
      * @return The value.
      */
    public java.lang.Double getGlobalMeter() {
      return globalMeter;
    }

    /**
      * Sets the value of the 'globalMeter' field.
      * @param value The value of 'globalMeter'.
      * @return This builder.
      */
    public com.fretron.Model.Odometer.Builder setGlobalMeter(java.lang.Double value) {
      validate(fields()[0], value);
      this.globalMeter = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'globalMeter' field has been set.
      * @return True if the 'globalMeter' field has been set, false otherwise.
      */
    public boolean hasGlobalMeter() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'globalMeter' field.
      * @return This builder.
      */
    public com.fretron.Model.Odometer.Builder clearGlobalMeter() {
      globalMeter = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdateTime' field.
      * @return The value.
      */
    public java.lang.Long getLastUpdateTime() {
      return lastUpdateTime;
    }

    /**
      * Sets the value of the 'lastUpdateTime' field.
      * @param value The value of 'lastUpdateTime'.
      * @return This builder.
      */
    public com.fretron.Model.Odometer.Builder setLastUpdateTime(java.lang.Long value) {
      validate(fields()[1], value);
      this.lastUpdateTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdateTime' field has been set.
      * @return True if the 'lastUpdateTime' field has been set, false otherwise.
      */
    public boolean hasLastUpdateTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastUpdateTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Odometer.Builder clearLastUpdateTime() {
      lastUpdateTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'isGlobalMeterManuallyCalibrated' field.
      * @return The value.
      */
    public java.lang.Boolean getIsGlobalMeterManuallyCalibrated() {
      return isGlobalMeterManuallyCalibrated;
    }

    /**
      * Sets the value of the 'isGlobalMeterManuallyCalibrated' field.
      * @param value The value of 'isGlobalMeterManuallyCalibrated'.
      * @return This builder.
      */
    public com.fretron.Model.Odometer.Builder setIsGlobalMeterManuallyCalibrated(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.isGlobalMeterManuallyCalibrated = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'isGlobalMeterManuallyCalibrated' field has been set.
      * @return True if the 'isGlobalMeterManuallyCalibrated' field has been set, false otherwise.
      */
    public boolean hasIsGlobalMeterManuallyCalibrated() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'isGlobalMeterManuallyCalibrated' field.
      * @return This builder.
      */
    public com.fretron.Model.Odometer.Builder clearIsGlobalMeterManuallyCalibrated() {
      isGlobalMeterManuallyCalibrated = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastCalibrationTime' field.
      * @return The value.
      */
    public java.lang.Long getLastCalibrationTime() {
      return lastCalibrationTime;
    }

    /**
      * Sets the value of the 'lastCalibrationTime' field.
      * @param value The value of 'lastCalibrationTime'.
      * @return This builder.
      */
    public com.fretron.Model.Odometer.Builder setLastCalibrationTime(java.lang.Long value) {
      validate(fields()[3], value);
      this.lastCalibrationTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastCalibrationTime' field has been set.
      * @return True if the 'lastCalibrationTime' field has been set, false otherwise.
      */
    public boolean hasLastCalibrationTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastCalibrationTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Odometer.Builder clearLastCalibrationTime() {
      lastCalibrationTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Odometer build() {
      try {
        Odometer record = new Odometer();
        record.globalMeter = fieldSetFlags()[0] ? this.globalMeter : (java.lang.Double) defaultValue(fields()[0]);
        record.lastUpdateTime = fieldSetFlags()[1] ? this.lastUpdateTime : (java.lang.Long) defaultValue(fields()[1]);
        record.isGlobalMeterManuallyCalibrated = fieldSetFlags()[2] ? this.isGlobalMeterManuallyCalibrated : (java.lang.Boolean) defaultValue(fields()[2]);
        record.lastCalibrationTime = fieldSetFlags()[3] ? this.lastCalibrationTime : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
