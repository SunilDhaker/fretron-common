/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PositionCache extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8049142681845672283L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PositionCache\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"flag\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"time\",\"type\":[\"null\",\"long\"]},{\"name\":\"imei\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"positions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LitePosition\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"isFillingEnabled\",\"type\":\"boolean\",\"default\":false}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String flag;
  @Deprecated public java.lang.Long time;
  @Deprecated public java.lang.String imei;
  @Deprecated public java.util.List<com.fretron.Model.LitePosition> positions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PositionCache() {}

  /**
   * All-args constructor.
   * @param flag The new value for flag
   * @param time The new value for time
   * @param imei The new value for imei
   * @param positions The new value for positions
   */
  public PositionCache(java.lang.String flag, java.lang.Long time, java.lang.String imei, java.util.List<com.fretron.Model.LitePosition> positions) {
    this.flag = flag;
    this.time = time;
    this.imei = imei;
    this.positions = positions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flag;
    case 1: return time;
    case 2: return imei;
    case 3: return positions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flag = (java.lang.String)value$; break;
    case 1: time = (java.lang.Long)value$; break;
    case 2: imei = (java.lang.String)value$; break;
    case 3: positions = (java.util.List<com.fretron.Model.LitePosition>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'flag' field.
   * @return The value of the 'flag' field.
   */
  public java.lang.String getFlag() {
    return flag;
  }

  /**
   * Sets the value of the 'flag' field.
   * @param value the value to set.
   */
  public void setFlag(java.lang.String value) {
    this.flag = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'imei' field.
   * @return The value of the 'imei' field.
   */
  public java.lang.String getImei() {
    return imei;
  }

  /**
   * Sets the value of the 'imei' field.
   * @param value the value to set.
   */
  public void setImei(java.lang.String value) {
    this.imei = value;
  }

  /**
   * Gets the value of the 'positions' field.
   * @return The value of the 'positions' field.
   */
  public java.util.List<com.fretron.Model.LitePosition> getPositions() {
    return positions;
  }

  /**
   * Sets the value of the 'positions' field.
   * @param value the value to set.
   */
  public void setPositions(java.util.List<com.fretron.Model.LitePosition> value) {
    this.positions = value;
  }

  /**
   * Creates a new PositionCache RecordBuilder.
   * @return A new PositionCache RecordBuilder
   */
  public static com.fretron.Model.PositionCache.Builder newBuilder() {
    return new com.fretron.Model.PositionCache.Builder();
  }

  /**
   * Creates a new PositionCache RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PositionCache RecordBuilder
   */
  public static com.fretron.Model.PositionCache.Builder newBuilder(com.fretron.Model.PositionCache.Builder other) {
    return new com.fretron.Model.PositionCache.Builder(other);
  }

  /**
   * Creates a new PositionCache RecordBuilder by copying an existing PositionCache instance.
   * @param other The existing instance to copy.
   * @return A new PositionCache RecordBuilder
   */
  public static com.fretron.Model.PositionCache.Builder newBuilder(com.fretron.Model.PositionCache other) {
    return new com.fretron.Model.PositionCache.Builder(other);
  }

  /**
   * RecordBuilder for PositionCache instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PositionCache>
    implements org.apache.avro.data.RecordBuilder<PositionCache> {

    private java.lang.String flag;
    private java.lang.Long time;
    private java.lang.String imei;
    private java.util.List<com.fretron.Model.LitePosition> positions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.PositionCache.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flag)) {
        this.flag = data().deepCopy(fields()[0].schema(), other.flag);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.imei)) {
        this.imei = data().deepCopy(fields()[2].schema(), other.imei);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.positions)) {
        this.positions = data().deepCopy(fields()[3].schema(), other.positions);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PositionCache instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.PositionCache other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.flag)) {
        this.flag = data().deepCopy(fields()[0].schema(), other.flag);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.imei)) {
        this.imei = data().deepCopy(fields()[2].schema(), other.imei);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.positions)) {
        this.positions = data().deepCopy(fields()[3].schema(), other.positions);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'flag' field.
      * @return The value.
      */
    public java.lang.String getFlag() {
      return flag;
    }

    /**
      * Sets the value of the 'flag' field.
      * @param value The value of 'flag'.
      * @return This builder.
      */
    public com.fretron.Model.PositionCache.Builder setFlag(java.lang.String value) {
      validate(fields()[0], value);
      this.flag = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flag' field has been set.
      * @return True if the 'flag' field has been set, false otherwise.
      */
    public boolean hasFlag() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'flag' field.
      * @return This builder.
      */
    public com.fretron.Model.PositionCache.Builder clearFlag() {
      flag = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.fretron.Model.PositionCache.Builder setTime(java.lang.Long value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.fretron.Model.PositionCache.Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'imei' field.
      * @return The value.
      */
    public java.lang.String getImei() {
      return imei;
    }

    /**
      * Sets the value of the 'imei' field.
      * @param value The value of 'imei'.
      * @return This builder.
      */
    public com.fretron.Model.PositionCache.Builder setImei(java.lang.String value) {
      validate(fields()[2], value);
      this.imei = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'imei' field has been set.
      * @return True if the 'imei' field has been set, false otherwise.
      */
    public boolean hasImei() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'imei' field.
      * @return This builder.
      */
    public com.fretron.Model.PositionCache.Builder clearImei() {
      imei = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'positions' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.LitePosition> getPositions() {
      return positions;
    }

    /**
      * Sets the value of the 'positions' field.
      * @param value The value of 'positions'.
      * @return This builder.
      */
    public com.fretron.Model.PositionCache.Builder setPositions(java.util.List<com.fretron.Model.LitePosition> value) {
      validate(fields()[3], value);
      this.positions = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'positions' field has been set.
      * @return True if the 'positions' field has been set, false otherwise.
      */
    public boolean hasPositions() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'positions' field.
      * @return This builder.
      */
    public com.fretron.Model.PositionCache.Builder clearPositions() {
      positions = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PositionCache build() {
      try {
        PositionCache record = new PositionCache();
        record.flag = fieldSetFlags()[0] ? this.flag : (java.lang.String) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.Long) defaultValue(fields()[1]);
        record.imei = fieldSetFlags()[2] ? this.imei : (java.lang.String) defaultValue(fields()[2]);
        record.positions = fieldSetFlags()[3] ? this.positions : (java.util.List<com.fretron.Model.LitePosition>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
