/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ExpectedDestinationFL extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2647101229619728499L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ExpectedDestinationFL\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"expectedDestination\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FreightLocation\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"geofence\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geofence\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundry\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Circle\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"radius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GeofenceType\",\"symbols\":[\"Proximity\",\"Polygon\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"favouriteOf\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"FreightLocType\",\"symbols\":[\"Private\",\"Public\"]}],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<com.fretron.Model.FreightLocation> expectedDestination;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ExpectedDestinationFL() {}

  /**
   * All-args constructor.
   * @param expectedDestination The new value for expectedDestination
   */
  public ExpectedDestinationFL(java.util.List<com.fretron.Model.FreightLocation> expectedDestination) {
    this.expectedDestination = expectedDestination;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return expectedDestination;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: expectedDestination = (java.util.List<com.fretron.Model.FreightLocation>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'expectedDestination' field.
   * @return The value of the 'expectedDestination' field.
   */
  public java.util.List<com.fretron.Model.FreightLocation> getExpectedDestination() {
    return expectedDestination;
  }

  /**
   * Sets the value of the 'expectedDestination' field.
   * @param value the value to set.
   */
  public void setExpectedDestination(java.util.List<com.fretron.Model.FreightLocation> value) {
    this.expectedDestination = value;
  }

  /**
   * Creates a new ExpectedDestinationFL RecordBuilder.
   * @return A new ExpectedDestinationFL RecordBuilder
   */
  public static com.fretron.Model.ExpectedDestinationFL.Builder newBuilder() {
    return new com.fretron.Model.ExpectedDestinationFL.Builder();
  }

  /**
   * Creates a new ExpectedDestinationFL RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ExpectedDestinationFL RecordBuilder
   */
  public static com.fretron.Model.ExpectedDestinationFL.Builder newBuilder(com.fretron.Model.ExpectedDestinationFL.Builder other) {
    return new com.fretron.Model.ExpectedDestinationFL.Builder(other);
  }

  /**
   * Creates a new ExpectedDestinationFL RecordBuilder by copying an existing ExpectedDestinationFL instance.
   * @param other The existing instance to copy.
   * @return A new ExpectedDestinationFL RecordBuilder
   */
  public static com.fretron.Model.ExpectedDestinationFL.Builder newBuilder(com.fretron.Model.ExpectedDestinationFL other) {
    return new com.fretron.Model.ExpectedDestinationFL.Builder(other);
  }

  /**
   * RecordBuilder for ExpectedDestinationFL instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ExpectedDestinationFL>
    implements org.apache.avro.data.RecordBuilder<ExpectedDestinationFL> {

    private java.util.List<com.fretron.Model.FreightLocation> expectedDestination;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ExpectedDestinationFL.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.expectedDestination)) {
        this.expectedDestination = data().deepCopy(fields()[0].schema(), other.expectedDestination);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ExpectedDestinationFL instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ExpectedDestinationFL other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.expectedDestination)) {
        this.expectedDestination = data().deepCopy(fields()[0].schema(), other.expectedDestination);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'expectedDestination' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.FreightLocation> getExpectedDestination() {
      return expectedDestination;
    }

    /**
      * Sets the value of the 'expectedDestination' field.
      * @param value The value of 'expectedDestination'.
      * @return This builder.
      */
    public com.fretron.Model.ExpectedDestinationFL.Builder setExpectedDestination(java.util.List<com.fretron.Model.FreightLocation> value) {
      validate(fields()[0], value);
      this.expectedDestination = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'expectedDestination' field has been set.
      * @return True if the 'expectedDestination' field has been set, false otherwise.
      */
    public boolean hasExpectedDestination() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'expectedDestination' field.
      * @return This builder.
      */
    public com.fretron.Model.ExpectedDestinationFL.Builder clearExpectedDestination() {
      expectedDestination = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ExpectedDestinationFL build() {
      try {
        ExpectedDestinationFL record = new ExpectedDestinationFL();
        record.expectedDestination = fieldSetFlags()[0] ? this.expectedDestination : (java.util.List<com.fretron.Model.FreightLocation>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
