/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MeasuredScalers extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5345693568474448937L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MeasuredScalers\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"measuredValueName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"measuredValueUOM\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"measuredValue\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String measuredValueName;
  @Deprecated public java.lang.String measuredValueUOM;
  @Deprecated public java.lang.Double measuredValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MeasuredScalers() {}

  /**
   * All-args constructor.
   * @param measuredValueName The new value for measuredValueName
   * @param measuredValueUOM The new value for measuredValueUOM
   * @param measuredValue The new value for measuredValue
   */
  public MeasuredScalers(java.lang.String measuredValueName, java.lang.String measuredValueUOM, java.lang.Double measuredValue) {
    this.measuredValueName = measuredValueName;
    this.measuredValueUOM = measuredValueUOM;
    this.measuredValue = measuredValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return measuredValueName;
    case 1: return measuredValueUOM;
    case 2: return measuredValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: measuredValueName = (java.lang.String)value$; break;
    case 1: measuredValueUOM = (java.lang.String)value$; break;
    case 2: measuredValue = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'measuredValueName' field.
   * @return The value of the 'measuredValueName' field.
   */
  public java.lang.String getMeasuredValueName() {
    return measuredValueName;
  }

  /**
   * Sets the value of the 'measuredValueName' field.
   * @param value the value to set.
   */
  public void setMeasuredValueName(java.lang.String value) {
    this.measuredValueName = value;
  }

  /**
   * Gets the value of the 'measuredValueUOM' field.
   * @return The value of the 'measuredValueUOM' field.
   */
  public java.lang.String getMeasuredValueUOM() {
    return measuredValueUOM;
  }

  /**
   * Sets the value of the 'measuredValueUOM' field.
   * @param value the value to set.
   */
  public void setMeasuredValueUOM(java.lang.String value) {
    this.measuredValueUOM = value;
  }

  /**
   * Gets the value of the 'measuredValue' field.
   * @return The value of the 'measuredValue' field.
   */
  public java.lang.Double getMeasuredValue() {
    return measuredValue;
  }

  /**
   * Sets the value of the 'measuredValue' field.
   * @param value the value to set.
   */
  public void setMeasuredValue(java.lang.Double value) {
    this.measuredValue = value;
  }

  /**
   * Creates a new MeasuredScalers RecordBuilder.
   * @return A new MeasuredScalers RecordBuilder
   */
  public static com.fretron.Model.MeasuredScalers.Builder newBuilder() {
    return new com.fretron.Model.MeasuredScalers.Builder();
  }

  /**
   * Creates a new MeasuredScalers RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MeasuredScalers RecordBuilder
   */
  public static com.fretron.Model.MeasuredScalers.Builder newBuilder(com.fretron.Model.MeasuredScalers.Builder other) {
    return new com.fretron.Model.MeasuredScalers.Builder(other);
  }

  /**
   * Creates a new MeasuredScalers RecordBuilder by copying an existing MeasuredScalers instance.
   * @param other The existing instance to copy.
   * @return A new MeasuredScalers RecordBuilder
   */
  public static com.fretron.Model.MeasuredScalers.Builder newBuilder(com.fretron.Model.MeasuredScalers other) {
    return new com.fretron.Model.MeasuredScalers.Builder(other);
  }

  /**
   * RecordBuilder for MeasuredScalers instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MeasuredScalers>
    implements org.apache.avro.data.RecordBuilder<MeasuredScalers> {

    private java.lang.String measuredValueName;
    private java.lang.String measuredValueUOM;
    private java.lang.Double measuredValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.MeasuredScalers.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.measuredValueName)) {
        this.measuredValueName = data().deepCopy(fields()[0].schema(), other.measuredValueName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.measuredValueUOM)) {
        this.measuredValueUOM = data().deepCopy(fields()[1].schema(), other.measuredValueUOM);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.measuredValue)) {
        this.measuredValue = data().deepCopy(fields()[2].schema(), other.measuredValue);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MeasuredScalers instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.MeasuredScalers other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.measuredValueName)) {
        this.measuredValueName = data().deepCopy(fields()[0].schema(), other.measuredValueName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.measuredValueUOM)) {
        this.measuredValueUOM = data().deepCopy(fields()[1].schema(), other.measuredValueUOM);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.measuredValue)) {
        this.measuredValue = data().deepCopy(fields()[2].schema(), other.measuredValue);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'measuredValueName' field.
      * @return The value.
      */
    public java.lang.String getMeasuredValueName() {
      return measuredValueName;
    }

    /**
      * Sets the value of the 'measuredValueName' field.
      * @param value The value of 'measuredValueName'.
      * @return This builder.
      */
    public com.fretron.Model.MeasuredScalers.Builder setMeasuredValueName(java.lang.String value) {
      validate(fields()[0], value);
      this.measuredValueName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'measuredValueName' field has been set.
      * @return True if the 'measuredValueName' field has been set, false otherwise.
      */
    public boolean hasMeasuredValueName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'measuredValueName' field.
      * @return This builder.
      */
    public com.fretron.Model.MeasuredScalers.Builder clearMeasuredValueName() {
      measuredValueName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'measuredValueUOM' field.
      * @return The value.
      */
    public java.lang.String getMeasuredValueUOM() {
      return measuredValueUOM;
    }

    /**
      * Sets the value of the 'measuredValueUOM' field.
      * @param value The value of 'measuredValueUOM'.
      * @return This builder.
      */
    public com.fretron.Model.MeasuredScalers.Builder setMeasuredValueUOM(java.lang.String value) {
      validate(fields()[1], value);
      this.measuredValueUOM = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'measuredValueUOM' field has been set.
      * @return True if the 'measuredValueUOM' field has been set, false otherwise.
      */
    public boolean hasMeasuredValueUOM() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'measuredValueUOM' field.
      * @return This builder.
      */
    public com.fretron.Model.MeasuredScalers.Builder clearMeasuredValueUOM() {
      measuredValueUOM = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'measuredValue' field.
      * @return The value.
      */
    public java.lang.Double getMeasuredValue() {
      return measuredValue;
    }

    /**
      * Sets the value of the 'measuredValue' field.
      * @param value The value of 'measuredValue'.
      * @return This builder.
      */
    public com.fretron.Model.MeasuredScalers.Builder setMeasuredValue(java.lang.Double value) {
      validate(fields()[2], value);
      this.measuredValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'measuredValue' field has been set.
      * @return True if the 'measuredValue' field has been set, false otherwise.
      */
    public boolean hasMeasuredValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'measuredValue' field.
      * @return This builder.
      */
    public com.fretron.Model.MeasuredScalers.Builder clearMeasuredValue() {
      measuredValue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public MeasuredScalers build() {
      try {
        MeasuredScalers record = new MeasuredScalers();
        record.measuredValueName = fieldSetFlags()[0] ? this.measuredValueName : (java.lang.String) defaultValue(fields()[0]);
        record.measuredValueUOM = fieldSetFlags()[1] ? this.measuredValueUOM : (java.lang.String) defaultValue(fields()[1]);
        record.measuredValue = fieldSetFlags()[2] ? this.measuredValue : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
