/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Measurement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1047999083270372975L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Measurement\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"measurmentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unitOfMeasurment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plannedLoadQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualLoadedQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"netQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"grossQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"actualDeliveredQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"shortage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"frieghtDeductableQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"claimQuantity\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"temperature\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"density\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"moisture\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String measurmentType;
  @Deprecated public java.lang.String unitOfMeasurment;
  @Deprecated public java.lang.Double plannedLoadQuantity;
  @Deprecated public java.lang.Double actualLoadedQuantity;
  @Deprecated public java.lang.Double netQuantity;
  @Deprecated public java.lang.Double grossQuantity;
  @Deprecated public java.lang.Double standardQuantity;
  @Deprecated public java.lang.Double actualDeliveredQuantity;
  @Deprecated public java.lang.Double shortage;
  @Deprecated public java.lang.Double frieghtDeductableQuantity;
  @Deprecated public java.lang.Double claimQuantity;
  @Deprecated public java.lang.Double temperature;
  @Deprecated public java.lang.Double density;
  @Deprecated public java.lang.Double moisture;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Measurement() {}

  /**
   * All-args constructor.
   * @param measurmentType The new value for measurmentType
   * @param unitOfMeasurment The new value for unitOfMeasurment
   * @param plannedLoadQuantity The new value for plannedLoadQuantity
   * @param actualLoadedQuantity The new value for actualLoadedQuantity
   * @param netQuantity The new value for netQuantity
   * @param grossQuantity The new value for grossQuantity
   * @param standardQuantity The new value for standardQuantity
   * @param actualDeliveredQuantity The new value for actualDeliveredQuantity
   * @param shortage The new value for shortage
   * @param frieghtDeductableQuantity The new value for frieghtDeductableQuantity
   * @param claimQuantity The new value for claimQuantity
   * @param temperature The new value for temperature
   * @param density The new value for density
   * @param moisture The new value for moisture
   */
  public Measurement(java.lang.String measurmentType, java.lang.String unitOfMeasurment, java.lang.Double plannedLoadQuantity, java.lang.Double actualLoadedQuantity, java.lang.Double netQuantity, java.lang.Double grossQuantity, java.lang.Double standardQuantity, java.lang.Double actualDeliveredQuantity, java.lang.Double shortage, java.lang.Double frieghtDeductableQuantity, java.lang.Double claimQuantity, java.lang.Double temperature, java.lang.Double density, java.lang.Double moisture) {
    this.measurmentType = measurmentType;
    this.unitOfMeasurment = unitOfMeasurment;
    this.plannedLoadQuantity = plannedLoadQuantity;
    this.actualLoadedQuantity = actualLoadedQuantity;
    this.netQuantity = netQuantity;
    this.grossQuantity = grossQuantity;
    this.standardQuantity = standardQuantity;
    this.actualDeliveredQuantity = actualDeliveredQuantity;
    this.shortage = shortage;
    this.frieghtDeductableQuantity = frieghtDeductableQuantity;
    this.claimQuantity = claimQuantity;
    this.temperature = temperature;
    this.density = density;
    this.moisture = moisture;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return measurmentType;
    case 1: return unitOfMeasurment;
    case 2: return plannedLoadQuantity;
    case 3: return actualLoadedQuantity;
    case 4: return netQuantity;
    case 5: return grossQuantity;
    case 6: return standardQuantity;
    case 7: return actualDeliveredQuantity;
    case 8: return shortage;
    case 9: return frieghtDeductableQuantity;
    case 10: return claimQuantity;
    case 11: return temperature;
    case 12: return density;
    case 13: return moisture;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: measurmentType = (java.lang.String)value$; break;
    case 1: unitOfMeasurment = (java.lang.String)value$; break;
    case 2: plannedLoadQuantity = (java.lang.Double)value$; break;
    case 3: actualLoadedQuantity = (java.lang.Double)value$; break;
    case 4: netQuantity = (java.lang.Double)value$; break;
    case 5: grossQuantity = (java.lang.Double)value$; break;
    case 6: standardQuantity = (java.lang.Double)value$; break;
    case 7: actualDeliveredQuantity = (java.lang.Double)value$; break;
    case 8: shortage = (java.lang.Double)value$; break;
    case 9: frieghtDeductableQuantity = (java.lang.Double)value$; break;
    case 10: claimQuantity = (java.lang.Double)value$; break;
    case 11: temperature = (java.lang.Double)value$; break;
    case 12: density = (java.lang.Double)value$; break;
    case 13: moisture = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'measurmentType' field.
   * @return The value of the 'measurmentType' field.
   */
  public java.lang.String getMeasurmentType() {
    return measurmentType;
  }

  /**
   * Sets the value of the 'measurmentType' field.
   * @param value the value to set.
   */
  public void setMeasurmentType(java.lang.String value) {
    this.measurmentType = value;
  }

  /**
   * Gets the value of the 'unitOfMeasurment' field.
   * @return The value of the 'unitOfMeasurment' field.
   */
  public java.lang.String getUnitOfMeasurment() {
    return unitOfMeasurment;
  }

  /**
   * Sets the value of the 'unitOfMeasurment' field.
   * @param value the value to set.
   */
  public void setUnitOfMeasurment(java.lang.String value) {
    this.unitOfMeasurment = value;
  }

  /**
   * Gets the value of the 'plannedLoadQuantity' field.
   * @return The value of the 'plannedLoadQuantity' field.
   */
  public java.lang.Double getPlannedLoadQuantity() {
    return plannedLoadQuantity;
  }

  /**
   * Sets the value of the 'plannedLoadQuantity' field.
   * @param value the value to set.
   */
  public void setPlannedLoadQuantity(java.lang.Double value) {
    this.plannedLoadQuantity = value;
  }

  /**
   * Gets the value of the 'actualLoadedQuantity' field.
   * @return The value of the 'actualLoadedQuantity' field.
   */
  public java.lang.Double getActualLoadedQuantity() {
    return actualLoadedQuantity;
  }

  /**
   * Sets the value of the 'actualLoadedQuantity' field.
   * @param value the value to set.
   */
  public void setActualLoadedQuantity(java.lang.Double value) {
    this.actualLoadedQuantity = value;
  }

  /**
   * Gets the value of the 'netQuantity' field.
   * @return The value of the 'netQuantity' field.
   */
  public java.lang.Double getNetQuantity() {
    return netQuantity;
  }

  /**
   * Sets the value of the 'netQuantity' field.
   * @param value the value to set.
   */
  public void setNetQuantity(java.lang.Double value) {
    this.netQuantity = value;
  }

  /**
   * Gets the value of the 'grossQuantity' field.
   * @return The value of the 'grossQuantity' field.
   */
  public java.lang.Double getGrossQuantity() {
    return grossQuantity;
  }

  /**
   * Sets the value of the 'grossQuantity' field.
   * @param value the value to set.
   */
  public void setGrossQuantity(java.lang.Double value) {
    this.grossQuantity = value;
  }

  /**
   * Gets the value of the 'standardQuantity' field.
   * @return The value of the 'standardQuantity' field.
   */
  public java.lang.Double getStandardQuantity() {
    return standardQuantity;
  }

  /**
   * Sets the value of the 'standardQuantity' field.
   * @param value the value to set.
   */
  public void setStandardQuantity(java.lang.Double value) {
    this.standardQuantity = value;
  }

  /**
   * Gets the value of the 'actualDeliveredQuantity' field.
   * @return The value of the 'actualDeliveredQuantity' field.
   */
  public java.lang.Double getActualDeliveredQuantity() {
    return actualDeliveredQuantity;
  }

  /**
   * Sets the value of the 'actualDeliveredQuantity' field.
   * @param value the value to set.
   */
  public void setActualDeliveredQuantity(java.lang.Double value) {
    this.actualDeliveredQuantity = value;
  }

  /**
   * Gets the value of the 'shortage' field.
   * @return The value of the 'shortage' field.
   */
  public java.lang.Double getShortage() {
    return shortage;
  }

  /**
   * Sets the value of the 'shortage' field.
   * @param value the value to set.
   */
  public void setShortage(java.lang.Double value) {
    this.shortage = value;
  }

  /**
   * Gets the value of the 'frieghtDeductableQuantity' field.
   * @return The value of the 'frieghtDeductableQuantity' field.
   */
  public java.lang.Double getFrieghtDeductableQuantity() {
    return frieghtDeductableQuantity;
  }

  /**
   * Sets the value of the 'frieghtDeductableQuantity' field.
   * @param value the value to set.
   */
  public void setFrieghtDeductableQuantity(java.lang.Double value) {
    this.frieghtDeductableQuantity = value;
  }

  /**
   * Gets the value of the 'claimQuantity' field.
   * @return The value of the 'claimQuantity' field.
   */
  public java.lang.Double getClaimQuantity() {
    return claimQuantity;
  }

  /**
   * Sets the value of the 'claimQuantity' field.
   * @param value the value to set.
   */
  public void setClaimQuantity(java.lang.Double value) {
    this.claimQuantity = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public java.lang.Double getTemperature() {
    return temperature;
  }

  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(java.lang.Double value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'density' field.
   * @return The value of the 'density' field.
   */
  public java.lang.Double getDensity() {
    return density;
  }

  /**
   * Sets the value of the 'density' field.
   * @param value the value to set.
   */
  public void setDensity(java.lang.Double value) {
    this.density = value;
  }

  /**
   * Gets the value of the 'moisture' field.
   * @return The value of the 'moisture' field.
   */
  public java.lang.Double getMoisture() {
    return moisture;
  }

  /**
   * Sets the value of the 'moisture' field.
   * @param value the value to set.
   */
  public void setMoisture(java.lang.Double value) {
    this.moisture = value;
  }

  /**
   * Creates a new Measurement RecordBuilder.
   * @return A new Measurement RecordBuilder
   */
  public static com.fretron.Model.Measurement.Builder newBuilder() {
    return new com.fretron.Model.Measurement.Builder();
  }

  /**
   * Creates a new Measurement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Measurement RecordBuilder
   */
  public static com.fretron.Model.Measurement.Builder newBuilder(com.fretron.Model.Measurement.Builder other) {
    return new com.fretron.Model.Measurement.Builder(other);
  }

  /**
   * Creates a new Measurement RecordBuilder by copying an existing Measurement instance.
   * @param other The existing instance to copy.
   * @return A new Measurement RecordBuilder
   */
  public static com.fretron.Model.Measurement.Builder newBuilder(com.fretron.Model.Measurement other) {
    return new com.fretron.Model.Measurement.Builder(other);
  }

  /**
   * RecordBuilder for Measurement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Measurement>
    implements org.apache.avro.data.RecordBuilder<Measurement> {

    private java.lang.String measurmentType;
    private java.lang.String unitOfMeasurment;
    private java.lang.Double plannedLoadQuantity;
    private java.lang.Double actualLoadedQuantity;
    private java.lang.Double netQuantity;
    private java.lang.Double grossQuantity;
    private java.lang.Double standardQuantity;
    private java.lang.Double actualDeliveredQuantity;
    private java.lang.Double shortage;
    private java.lang.Double frieghtDeductableQuantity;
    private java.lang.Double claimQuantity;
    private java.lang.Double temperature;
    private java.lang.Double density;
    private java.lang.Double moisture;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Measurement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.measurmentType)) {
        this.measurmentType = data().deepCopy(fields()[0].schema(), other.measurmentType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unitOfMeasurment)) {
        this.unitOfMeasurment = data().deepCopy(fields()[1].schema(), other.unitOfMeasurment);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.plannedLoadQuantity)) {
        this.plannedLoadQuantity = data().deepCopy(fields()[2].schema(), other.plannedLoadQuantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.actualLoadedQuantity)) {
        this.actualLoadedQuantity = data().deepCopy(fields()[3].schema(), other.actualLoadedQuantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.netQuantity)) {
        this.netQuantity = data().deepCopy(fields()[4].schema(), other.netQuantity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.grossQuantity)) {
        this.grossQuantity = data().deepCopy(fields()[5].schema(), other.grossQuantity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.standardQuantity)) {
        this.standardQuantity = data().deepCopy(fields()[6].schema(), other.standardQuantity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.actualDeliveredQuantity)) {
        this.actualDeliveredQuantity = data().deepCopy(fields()[7].schema(), other.actualDeliveredQuantity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.shortage)) {
        this.shortage = data().deepCopy(fields()[8].schema(), other.shortage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.frieghtDeductableQuantity)) {
        this.frieghtDeductableQuantity = data().deepCopy(fields()[9].schema(), other.frieghtDeductableQuantity);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.claimQuantity)) {
        this.claimQuantity = data().deepCopy(fields()[10].schema(), other.claimQuantity);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.temperature)) {
        this.temperature = data().deepCopy(fields()[11].schema(), other.temperature);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.density)) {
        this.density = data().deepCopy(fields()[12].schema(), other.density);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.moisture)) {
        this.moisture = data().deepCopy(fields()[13].schema(), other.moisture);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Measurement instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Measurement other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.measurmentType)) {
        this.measurmentType = data().deepCopy(fields()[0].schema(), other.measurmentType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unitOfMeasurment)) {
        this.unitOfMeasurment = data().deepCopy(fields()[1].schema(), other.unitOfMeasurment);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.plannedLoadQuantity)) {
        this.plannedLoadQuantity = data().deepCopy(fields()[2].schema(), other.plannedLoadQuantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.actualLoadedQuantity)) {
        this.actualLoadedQuantity = data().deepCopy(fields()[3].schema(), other.actualLoadedQuantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.netQuantity)) {
        this.netQuantity = data().deepCopy(fields()[4].schema(), other.netQuantity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.grossQuantity)) {
        this.grossQuantity = data().deepCopy(fields()[5].schema(), other.grossQuantity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.standardQuantity)) {
        this.standardQuantity = data().deepCopy(fields()[6].schema(), other.standardQuantity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.actualDeliveredQuantity)) {
        this.actualDeliveredQuantity = data().deepCopy(fields()[7].schema(), other.actualDeliveredQuantity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.shortage)) {
        this.shortage = data().deepCopy(fields()[8].schema(), other.shortage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.frieghtDeductableQuantity)) {
        this.frieghtDeductableQuantity = data().deepCopy(fields()[9].schema(), other.frieghtDeductableQuantity);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.claimQuantity)) {
        this.claimQuantity = data().deepCopy(fields()[10].schema(), other.claimQuantity);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.temperature)) {
        this.temperature = data().deepCopy(fields()[11].schema(), other.temperature);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.density)) {
        this.density = data().deepCopy(fields()[12].schema(), other.density);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.moisture)) {
        this.moisture = data().deepCopy(fields()[13].schema(), other.moisture);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'measurmentType' field.
      * @return The value.
      */
    public java.lang.String getMeasurmentType() {
      return measurmentType;
    }

    /**
      * Sets the value of the 'measurmentType' field.
      * @param value The value of 'measurmentType'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setMeasurmentType(java.lang.String value) {
      validate(fields()[0], value);
      this.measurmentType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'measurmentType' field has been set.
      * @return True if the 'measurmentType' field has been set, false otherwise.
      */
    public boolean hasMeasurmentType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'measurmentType' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearMeasurmentType() {
      measurmentType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitOfMeasurment' field.
      * @return The value.
      */
    public java.lang.String getUnitOfMeasurment() {
      return unitOfMeasurment;
    }

    /**
      * Sets the value of the 'unitOfMeasurment' field.
      * @param value The value of 'unitOfMeasurment'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setUnitOfMeasurment(java.lang.String value) {
      validate(fields()[1], value);
      this.unitOfMeasurment = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'unitOfMeasurment' field has been set.
      * @return True if the 'unitOfMeasurment' field has been set, false otherwise.
      */
    public boolean hasUnitOfMeasurment() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'unitOfMeasurment' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearUnitOfMeasurment() {
      unitOfMeasurment = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'plannedLoadQuantity' field.
      * @return The value.
      */
    public java.lang.Double getPlannedLoadQuantity() {
      return plannedLoadQuantity;
    }

    /**
      * Sets the value of the 'plannedLoadQuantity' field.
      * @param value The value of 'plannedLoadQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setPlannedLoadQuantity(java.lang.Double value) {
      validate(fields()[2], value);
      this.plannedLoadQuantity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'plannedLoadQuantity' field has been set.
      * @return True if the 'plannedLoadQuantity' field has been set, false otherwise.
      */
    public boolean hasPlannedLoadQuantity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'plannedLoadQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearPlannedLoadQuantity() {
      plannedLoadQuantity = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualLoadedQuantity' field.
      * @return The value.
      */
    public java.lang.Double getActualLoadedQuantity() {
      return actualLoadedQuantity;
    }

    /**
      * Sets the value of the 'actualLoadedQuantity' field.
      * @param value The value of 'actualLoadedQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setActualLoadedQuantity(java.lang.Double value) {
      validate(fields()[3], value);
      this.actualLoadedQuantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'actualLoadedQuantity' field has been set.
      * @return True if the 'actualLoadedQuantity' field has been set, false otherwise.
      */
    public boolean hasActualLoadedQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'actualLoadedQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearActualLoadedQuantity() {
      actualLoadedQuantity = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'netQuantity' field.
      * @return The value.
      */
    public java.lang.Double getNetQuantity() {
      return netQuantity;
    }

    /**
      * Sets the value of the 'netQuantity' field.
      * @param value The value of 'netQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setNetQuantity(java.lang.Double value) {
      validate(fields()[4], value);
      this.netQuantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'netQuantity' field has been set.
      * @return True if the 'netQuantity' field has been set, false otherwise.
      */
    public boolean hasNetQuantity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'netQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearNetQuantity() {
      netQuantity = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'grossQuantity' field.
      * @return The value.
      */
    public java.lang.Double getGrossQuantity() {
      return grossQuantity;
    }

    /**
      * Sets the value of the 'grossQuantity' field.
      * @param value The value of 'grossQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setGrossQuantity(java.lang.Double value) {
      validate(fields()[5], value);
      this.grossQuantity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'grossQuantity' field has been set.
      * @return True if the 'grossQuantity' field has been set, false otherwise.
      */
    public boolean hasGrossQuantity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'grossQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearGrossQuantity() {
      grossQuantity = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'standardQuantity' field.
      * @return The value.
      */
    public java.lang.Double getStandardQuantity() {
      return standardQuantity;
    }

    /**
      * Sets the value of the 'standardQuantity' field.
      * @param value The value of 'standardQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setStandardQuantity(java.lang.Double value) {
      validate(fields()[6], value);
      this.standardQuantity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'standardQuantity' field has been set.
      * @return True if the 'standardQuantity' field has been set, false otherwise.
      */
    public boolean hasStandardQuantity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'standardQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearStandardQuantity() {
      standardQuantity = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualDeliveredQuantity' field.
      * @return The value.
      */
    public java.lang.Double getActualDeliveredQuantity() {
      return actualDeliveredQuantity;
    }

    /**
      * Sets the value of the 'actualDeliveredQuantity' field.
      * @param value The value of 'actualDeliveredQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setActualDeliveredQuantity(java.lang.Double value) {
      validate(fields()[7], value);
      this.actualDeliveredQuantity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'actualDeliveredQuantity' field has been set.
      * @return True if the 'actualDeliveredQuantity' field has been set, false otherwise.
      */
    public boolean hasActualDeliveredQuantity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'actualDeliveredQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearActualDeliveredQuantity() {
      actualDeliveredQuantity = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'shortage' field.
      * @return The value.
      */
    public java.lang.Double getShortage() {
      return shortage;
    }

    /**
      * Sets the value of the 'shortage' field.
      * @param value The value of 'shortage'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setShortage(java.lang.Double value) {
      validate(fields()[8], value);
      this.shortage = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'shortage' field has been set.
      * @return True if the 'shortage' field has been set, false otherwise.
      */
    public boolean hasShortage() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'shortage' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearShortage() {
      shortage = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'frieghtDeductableQuantity' field.
      * @return The value.
      */
    public java.lang.Double getFrieghtDeductableQuantity() {
      return frieghtDeductableQuantity;
    }

    /**
      * Sets the value of the 'frieghtDeductableQuantity' field.
      * @param value The value of 'frieghtDeductableQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setFrieghtDeductableQuantity(java.lang.Double value) {
      validate(fields()[9], value);
      this.frieghtDeductableQuantity = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'frieghtDeductableQuantity' field has been set.
      * @return True if the 'frieghtDeductableQuantity' field has been set, false otherwise.
      */
    public boolean hasFrieghtDeductableQuantity() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'frieghtDeductableQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearFrieghtDeductableQuantity() {
      frieghtDeductableQuantity = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'claimQuantity' field.
      * @return The value.
      */
    public java.lang.Double getClaimQuantity() {
      return claimQuantity;
    }

    /**
      * Sets the value of the 'claimQuantity' field.
      * @param value The value of 'claimQuantity'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setClaimQuantity(java.lang.Double value) {
      validate(fields()[10], value);
      this.claimQuantity = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'claimQuantity' field has been set.
      * @return True if the 'claimQuantity' field has been set, false otherwise.
      */
    public boolean hasClaimQuantity() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'claimQuantity' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearClaimQuantity() {
      claimQuantity = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public java.lang.Double getTemperature() {
      return temperature;
    }

    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setTemperature(java.lang.Double value) {
      validate(fields()[11], value);
      this.temperature = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearTemperature() {
      temperature = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'density' field.
      * @return The value.
      */
    public java.lang.Double getDensity() {
      return density;
    }

    /**
      * Sets the value of the 'density' field.
      * @param value The value of 'density'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setDensity(java.lang.Double value) {
      validate(fields()[12], value);
      this.density = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'density' field has been set.
      * @return True if the 'density' field has been set, false otherwise.
      */
    public boolean hasDensity() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'density' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearDensity() {
      density = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'moisture' field.
      * @return The value.
      */
    public java.lang.Double getMoisture() {
      return moisture;
    }

    /**
      * Sets the value of the 'moisture' field.
      * @param value The value of 'moisture'.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder setMoisture(java.lang.Double value) {
      validate(fields()[13], value);
      this.moisture = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'moisture' field has been set.
      * @return True if the 'moisture' field has been set, false otherwise.
      */
    public boolean hasMoisture() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'moisture' field.
      * @return This builder.
      */
    public com.fretron.Model.Measurement.Builder clearMoisture() {
      moisture = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public Measurement build() {
      try {
        Measurement record = new Measurement();
        record.measurmentType = fieldSetFlags()[0] ? this.measurmentType : (java.lang.String) defaultValue(fields()[0]);
        record.unitOfMeasurment = fieldSetFlags()[1] ? this.unitOfMeasurment : (java.lang.String) defaultValue(fields()[1]);
        record.plannedLoadQuantity = fieldSetFlags()[2] ? this.plannedLoadQuantity : (java.lang.Double) defaultValue(fields()[2]);
        record.actualLoadedQuantity = fieldSetFlags()[3] ? this.actualLoadedQuantity : (java.lang.Double) defaultValue(fields()[3]);
        record.netQuantity = fieldSetFlags()[4] ? this.netQuantity : (java.lang.Double) defaultValue(fields()[4]);
        record.grossQuantity = fieldSetFlags()[5] ? this.grossQuantity : (java.lang.Double) defaultValue(fields()[5]);
        record.standardQuantity = fieldSetFlags()[6] ? this.standardQuantity : (java.lang.Double) defaultValue(fields()[6]);
        record.actualDeliveredQuantity = fieldSetFlags()[7] ? this.actualDeliveredQuantity : (java.lang.Double) defaultValue(fields()[7]);
        record.shortage = fieldSetFlags()[8] ? this.shortage : (java.lang.Double) defaultValue(fields()[8]);
        record.frieghtDeductableQuantity = fieldSetFlags()[9] ? this.frieghtDeductableQuantity : (java.lang.Double) defaultValue(fields()[9]);
        record.claimQuantity = fieldSetFlags()[10] ? this.claimQuantity : (java.lang.Double) defaultValue(fields()[10]);
        record.temperature = fieldSetFlags()[11] ? this.temperature : (java.lang.Double) defaultValue(fields()[11]);
        record.density = fieldSetFlags()[12] ? this.density : (java.lang.Double) defaultValue(fields()[12]);
        record.moisture = fieldSetFlags()[13] ? this.moisture : (java.lang.Double) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
