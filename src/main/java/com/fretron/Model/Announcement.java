/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Announcement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5854610482451571417L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Announcement\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"summary\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdOn\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"expirationDate\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"badgeColor\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"iconURL\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"target\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AnnouncementTarget\",\"fields\":[{\"name\":\"domains\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"organisations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"modules\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"activities\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AnnouncementActivity\",\"fields\":[{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"badgeColor\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null},{\"name\":\"subscribers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String title;
  @Deprecated public java.lang.String type;
  @Deprecated public java.lang.String summary;
  @Deprecated public java.lang.Long createdOn;
  @Deprecated public java.lang.Long expirationDate;
  @Deprecated public java.lang.String status;
  @Deprecated public java.lang.String badgeColor;
  @Deprecated public java.lang.String iconURL;
  @Deprecated public com.fretron.Model.AnnouncementTarget target;
  @Deprecated public java.util.List<com.fretron.Model.AnnouncementActivity> activities;
  @Deprecated public java.util.List<java.lang.String> subscribers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Announcement() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param title The new value for title
   * @param type The new value for type
   * @param summary The new value for summary
   * @param createdOn The new value for createdOn
   * @param expirationDate The new value for expirationDate
   * @param status The new value for status
   * @param badgeColor The new value for badgeColor
   * @param iconURL The new value for iconURL
   * @param target The new value for target
   * @param activities The new value for activities
   * @param subscribers The new value for subscribers
   */
  public Announcement(java.lang.String uuid, java.lang.String title, java.lang.String type, java.lang.String summary, java.lang.Long createdOn, java.lang.Long expirationDate, java.lang.String status, java.lang.String badgeColor, java.lang.String iconURL, com.fretron.Model.AnnouncementTarget target, java.util.List<com.fretron.Model.AnnouncementActivity> activities, java.util.List<java.lang.String> subscribers) {
    this.uuid = uuid;
    this.title = title;
    this.type = type;
    this.summary = summary;
    this.createdOn = createdOn;
    this.expirationDate = expirationDate;
    this.status = status;
    this.badgeColor = badgeColor;
    this.iconURL = iconURL;
    this.target = target;
    this.activities = activities;
    this.subscribers = subscribers;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return title;
    case 2: return type;
    case 3: return summary;
    case 4: return createdOn;
    case 5: return expirationDate;
    case 6: return status;
    case 7: return badgeColor;
    case 8: return iconURL;
    case 9: return target;
    case 10: return activities;
    case 11: return subscribers;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: title = (java.lang.String)value$; break;
    case 2: type = (java.lang.String)value$; break;
    case 3: summary = (java.lang.String)value$; break;
    case 4: createdOn = (java.lang.Long)value$; break;
    case 5: expirationDate = (java.lang.Long)value$; break;
    case 6: status = (java.lang.String)value$; break;
    case 7: badgeColor = (java.lang.String)value$; break;
    case 8: iconURL = (java.lang.String)value$; break;
    case 9: target = (com.fretron.Model.AnnouncementTarget)value$; break;
    case 10: activities = (java.util.List<com.fretron.Model.AnnouncementActivity>)value$; break;
    case 11: subscribers = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'summary' field.
   * @return The value of the 'summary' field.
   */
  public java.lang.String getSummary() {
    return summary;
  }

  /**
   * Sets the value of the 'summary' field.
   * @param value the value to set.
   */
  public void setSummary(java.lang.String value) {
    this.summary = value;
  }

  /**
   * Gets the value of the 'createdOn' field.
   * @return The value of the 'createdOn' field.
   */
  public java.lang.Long getCreatedOn() {
    return createdOn;
  }

  /**
   * Sets the value of the 'createdOn' field.
   * @param value the value to set.
   */
  public void setCreatedOn(java.lang.Long value) {
    this.createdOn = value;
  }

  /**
   * Gets the value of the 'expirationDate' field.
   * @return The value of the 'expirationDate' field.
   */
  public java.lang.Long getExpirationDate() {
    return expirationDate;
  }

  /**
   * Sets the value of the 'expirationDate' field.
   * @param value the value to set.
   */
  public void setExpirationDate(java.lang.Long value) {
    this.expirationDate = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'badgeColor' field.
   * @return The value of the 'badgeColor' field.
   */
  public java.lang.String getBadgeColor() {
    return badgeColor;
  }

  /**
   * Sets the value of the 'badgeColor' field.
   * @param value the value to set.
   */
  public void setBadgeColor(java.lang.String value) {
    this.badgeColor = value;
  }

  /**
   * Gets the value of the 'iconURL' field.
   * @return The value of the 'iconURL' field.
   */
  public java.lang.String getIconURL() {
    return iconURL;
  }

  /**
   * Sets the value of the 'iconURL' field.
   * @param value the value to set.
   */
  public void setIconURL(java.lang.String value) {
    this.iconURL = value;
  }

  /**
   * Gets the value of the 'target' field.
   * @return The value of the 'target' field.
   */
  public com.fretron.Model.AnnouncementTarget getTarget() {
    return target;
  }

  /**
   * Sets the value of the 'target' field.
   * @param value the value to set.
   */
  public void setTarget(com.fretron.Model.AnnouncementTarget value) {
    this.target = value;
  }

  /**
   * Gets the value of the 'activities' field.
   * @return The value of the 'activities' field.
   */
  public java.util.List<com.fretron.Model.AnnouncementActivity> getActivities() {
    return activities;
  }

  /**
   * Sets the value of the 'activities' field.
   * @param value the value to set.
   */
  public void setActivities(java.util.List<com.fretron.Model.AnnouncementActivity> value) {
    this.activities = value;
  }

  /**
   * Gets the value of the 'subscribers' field.
   * @return The value of the 'subscribers' field.
   */
  public java.util.List<java.lang.String> getSubscribers() {
    return subscribers;
  }

  /**
   * Sets the value of the 'subscribers' field.
   * @param value the value to set.
   */
  public void setSubscribers(java.util.List<java.lang.String> value) {
    this.subscribers = value;
  }

  /**
   * Creates a new Announcement RecordBuilder.
   * @return A new Announcement RecordBuilder
   */
  public static com.fretron.Model.Announcement.Builder newBuilder() {
    return new com.fretron.Model.Announcement.Builder();
  }

  /**
   * Creates a new Announcement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Announcement RecordBuilder
   */
  public static com.fretron.Model.Announcement.Builder newBuilder(com.fretron.Model.Announcement.Builder other) {
    return new com.fretron.Model.Announcement.Builder(other);
  }

  /**
   * Creates a new Announcement RecordBuilder by copying an existing Announcement instance.
   * @param other The existing instance to copy.
   * @return A new Announcement RecordBuilder
   */
  public static com.fretron.Model.Announcement.Builder newBuilder(com.fretron.Model.Announcement other) {
    return new com.fretron.Model.Announcement.Builder(other);
  }

  /**
   * RecordBuilder for Announcement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Announcement>
    implements org.apache.avro.data.RecordBuilder<Announcement> {

    private java.lang.String uuid;
    private java.lang.String title;
    private java.lang.String type;
    private java.lang.String summary;
    private java.lang.Long createdOn;
    private java.lang.Long expirationDate;
    private java.lang.String status;
    private java.lang.String badgeColor;
    private java.lang.String iconURL;
    private com.fretron.Model.AnnouncementTarget target;
    private com.fretron.Model.AnnouncementTarget.Builder targetBuilder;
    private java.util.List<com.fretron.Model.AnnouncementActivity> activities;
    private java.util.List<java.lang.String> subscribers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Announcement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.summary)) {
        this.summary = data().deepCopy(fields()[3].schema(), other.summary);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdOn)) {
        this.createdOn = data().deepCopy(fields()[4].schema(), other.createdOn);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[5].schema(), other.expirationDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.badgeColor)) {
        this.badgeColor = data().deepCopy(fields()[7].schema(), other.badgeColor);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.iconURL)) {
        this.iconURL = data().deepCopy(fields()[8].schema(), other.iconURL);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.target)) {
        this.target = data().deepCopy(fields()[9].schema(), other.target);
        fieldSetFlags()[9] = true;
      }
      if (other.hasTargetBuilder()) {
        this.targetBuilder = com.fretron.Model.AnnouncementTarget.newBuilder(other.getTargetBuilder());
      }
      if (isValidValue(fields()[10], other.activities)) {
        this.activities = data().deepCopy(fields()[10].schema(), other.activities);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.subscribers)) {
        this.subscribers = data().deepCopy(fields()[11].schema(), other.subscribers);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Announcement instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Announcement other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.summary)) {
        this.summary = data().deepCopy(fields()[3].schema(), other.summary);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdOn)) {
        this.createdOn = data().deepCopy(fields()[4].schema(), other.createdOn);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[5].schema(), other.expirationDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.badgeColor)) {
        this.badgeColor = data().deepCopy(fields()[7].schema(), other.badgeColor);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.iconURL)) {
        this.iconURL = data().deepCopy(fields()[8].schema(), other.iconURL);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.target)) {
        this.target = data().deepCopy(fields()[9].schema(), other.target);
        fieldSetFlags()[9] = true;
      }
      this.targetBuilder = null;
      if (isValidValue(fields()[10], other.activities)) {
        this.activities = data().deepCopy(fields()[10].schema(), other.activities);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.subscribers)) {
        this.subscribers = data().deepCopy(fields()[11].schema(), other.subscribers);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setTitle(java.lang.String value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setType(java.lang.String value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'summary' field.
      * @return The value.
      */
    public java.lang.String getSummary() {
      return summary;
    }

    /**
      * Sets the value of the 'summary' field.
      * @param value The value of 'summary'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setSummary(java.lang.String value) {
      validate(fields()[3], value);
      this.summary = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'summary' field has been set.
      * @return True if the 'summary' field has been set, false otherwise.
      */
    public boolean hasSummary() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'summary' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearSummary() {
      summary = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdOn' field.
      * @return The value.
      */
    public java.lang.Long getCreatedOn() {
      return createdOn;
    }

    /**
      * Sets the value of the 'createdOn' field.
      * @param value The value of 'createdOn'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setCreatedOn(java.lang.Long value) {
      validate(fields()[4], value);
      this.createdOn = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdOn' field has been set.
      * @return True if the 'createdOn' field has been set, false otherwise.
      */
    public boolean hasCreatedOn() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdOn' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearCreatedOn() {
      createdOn = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'expirationDate' field.
      * @return The value.
      */
    public java.lang.Long getExpirationDate() {
      return expirationDate;
    }

    /**
      * Sets the value of the 'expirationDate' field.
      * @param value The value of 'expirationDate'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setExpirationDate(java.lang.Long value) {
      validate(fields()[5], value);
      this.expirationDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'expirationDate' field has been set.
      * @return True if the 'expirationDate' field has been set, false otherwise.
      */
    public boolean hasExpirationDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'expirationDate' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearExpirationDate() {
      expirationDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setStatus(java.lang.String value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'badgeColor' field.
      * @return The value.
      */
    public java.lang.String getBadgeColor() {
      return badgeColor;
    }

    /**
      * Sets the value of the 'badgeColor' field.
      * @param value The value of 'badgeColor'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setBadgeColor(java.lang.String value) {
      validate(fields()[7], value);
      this.badgeColor = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'badgeColor' field has been set.
      * @return True if the 'badgeColor' field has been set, false otherwise.
      */
    public boolean hasBadgeColor() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'badgeColor' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearBadgeColor() {
      badgeColor = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'iconURL' field.
      * @return The value.
      */
    public java.lang.String getIconURL() {
      return iconURL;
    }

    /**
      * Sets the value of the 'iconURL' field.
      * @param value The value of 'iconURL'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setIconURL(java.lang.String value) {
      validate(fields()[8], value);
      this.iconURL = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'iconURL' field has been set.
      * @return True if the 'iconURL' field has been set, false otherwise.
      */
    public boolean hasIconURL() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'iconURL' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearIconURL() {
      iconURL = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'target' field.
      * @return The value.
      */
    public com.fretron.Model.AnnouncementTarget getTarget() {
      return target;
    }

    /**
      * Sets the value of the 'target' field.
      * @param value The value of 'target'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setTarget(com.fretron.Model.AnnouncementTarget value) {
      validate(fields()[9], value);
      this.targetBuilder = null;
      this.target = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'target' field has been set.
      * @return True if the 'target' field has been set, false otherwise.
      */
    public boolean hasTarget() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'target' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.AnnouncementTarget.Builder getTargetBuilder() {
      if (targetBuilder == null) {
        if (hasTarget()) {
          setTargetBuilder(com.fretron.Model.AnnouncementTarget.newBuilder(target));
        } else {
          setTargetBuilder(com.fretron.Model.AnnouncementTarget.newBuilder());
        }
      }
      return targetBuilder;
    }

    /**
     * Sets the Builder instance for the 'target' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Announcement.Builder setTargetBuilder(com.fretron.Model.AnnouncementTarget.Builder value) {
      clearTarget();
      targetBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'target' field has an active Builder instance
     * @return True if the 'target' field has an active Builder instance
     */
    public boolean hasTargetBuilder() {
      return targetBuilder != null;
    }

    /**
      * Clears the value of the 'target' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearTarget() {
      target = null;
      targetBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'activities' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.AnnouncementActivity> getActivities() {
      return activities;
    }

    /**
      * Sets the value of the 'activities' field.
      * @param value The value of 'activities'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setActivities(java.util.List<com.fretron.Model.AnnouncementActivity> value) {
      validate(fields()[10], value);
      this.activities = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'activities' field has been set.
      * @return True if the 'activities' field has been set, false otherwise.
      */
    public boolean hasActivities() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'activities' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearActivities() {
      activities = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscribers' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getSubscribers() {
      return subscribers;
    }

    /**
      * Sets the value of the 'subscribers' field.
      * @param value The value of 'subscribers'.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder setSubscribers(java.util.List<java.lang.String> value) {
      validate(fields()[11], value);
      this.subscribers = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'subscribers' field has been set.
      * @return True if the 'subscribers' field has been set, false otherwise.
      */
    public boolean hasSubscribers() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'subscribers' field.
      * @return This builder.
      */
    public com.fretron.Model.Announcement.Builder clearSubscribers() {
      subscribers = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public Announcement build() {
      try {
        Announcement record = new Announcement();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.String) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.String) defaultValue(fields()[2]);
        record.summary = fieldSetFlags()[3] ? this.summary : (java.lang.String) defaultValue(fields()[3]);
        record.createdOn = fieldSetFlags()[4] ? this.createdOn : (java.lang.Long) defaultValue(fields()[4]);
        record.expirationDate = fieldSetFlags()[5] ? this.expirationDate : (java.lang.Long) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (java.lang.String) defaultValue(fields()[6]);
        record.badgeColor = fieldSetFlags()[7] ? this.badgeColor : (java.lang.String) defaultValue(fields()[7]);
        record.iconURL = fieldSetFlags()[8] ? this.iconURL : (java.lang.String) defaultValue(fields()[8]);
        if (targetBuilder != null) {
          record.target = this.targetBuilder.build();
        } else {
          record.target = fieldSetFlags()[9] ? this.target : (com.fretron.Model.AnnouncementTarget) defaultValue(fields()[9]);
        }
        record.activities = fieldSetFlags()[10] ? this.activities : (java.util.List<com.fretron.Model.AnnouncementActivity>) defaultValue(fields()[10]);
        record.subscribers = fieldSetFlags()[11] ? this.subscribers : (java.util.List<java.lang.String>) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
