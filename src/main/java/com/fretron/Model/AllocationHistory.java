/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AllocationHistory extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2654398995857799319L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AllocationHistory\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"allocationType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vendorId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"rejectionType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String allocationType;
  @Deprecated public java.lang.String vendorId;
  @Deprecated public java.lang.String rejectionType;
  @Deprecated public java.lang.String source;
  @Deprecated public java.lang.Long time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AllocationHistory() {}

  /**
   * All-args constructor.
   * @param allocationType The new value for allocationType
   * @param vendorId The new value for vendorId
   * @param rejectionType The new value for rejectionType
   * @param source The new value for source
   * @param time The new value for time
   */
  public AllocationHistory(java.lang.String allocationType, java.lang.String vendorId, java.lang.String rejectionType, java.lang.String source, java.lang.Long time) {
    this.allocationType = allocationType;
    this.vendorId = vendorId;
    this.rejectionType = rejectionType;
    this.source = source;
    this.time = time;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return allocationType;
    case 1: return vendorId;
    case 2: return rejectionType;
    case 3: return source;
    case 4: return time;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: allocationType = (java.lang.String)value$; break;
    case 1: vendorId = (java.lang.String)value$; break;
    case 2: rejectionType = (java.lang.String)value$; break;
    case 3: source = (java.lang.String)value$; break;
    case 4: time = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'allocationType' field.
   * @return The value of the 'allocationType' field.
   */
  public java.lang.String getAllocationType() {
    return allocationType;
  }

  /**
   * Sets the value of the 'allocationType' field.
   * @param value the value to set.
   */
  public void setAllocationType(java.lang.String value) {
    this.allocationType = value;
  }

  /**
   * Gets the value of the 'vendorId' field.
   * @return The value of the 'vendorId' field.
   */
  public java.lang.String getVendorId() {
    return vendorId;
  }

  /**
   * Sets the value of the 'vendorId' field.
   * @param value the value to set.
   */
  public void setVendorId(java.lang.String value) {
    this.vendorId = value;
  }

  /**
   * Gets the value of the 'rejectionType' field.
   * @return The value of the 'rejectionType' field.
   */
  public java.lang.String getRejectionType() {
    return rejectionType;
  }

  /**
   * Sets the value of the 'rejectionType' field.
   * @param value the value to set.
   */
  public void setRejectionType(java.lang.String value) {
    this.rejectionType = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Creates a new AllocationHistory RecordBuilder.
   * @return A new AllocationHistory RecordBuilder
   */
  public static com.fretron.Model.AllocationHistory.Builder newBuilder() {
    return new com.fretron.Model.AllocationHistory.Builder();
  }

  /**
   * Creates a new AllocationHistory RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AllocationHistory RecordBuilder
   */
  public static com.fretron.Model.AllocationHistory.Builder newBuilder(com.fretron.Model.AllocationHistory.Builder other) {
    return new com.fretron.Model.AllocationHistory.Builder(other);
  }

  /**
   * Creates a new AllocationHistory RecordBuilder by copying an existing AllocationHistory instance.
   * @param other The existing instance to copy.
   * @return A new AllocationHistory RecordBuilder
   */
  public static com.fretron.Model.AllocationHistory.Builder newBuilder(com.fretron.Model.AllocationHistory other) {
    return new com.fretron.Model.AllocationHistory.Builder(other);
  }

  /**
   * RecordBuilder for AllocationHistory instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AllocationHistory>
    implements org.apache.avro.data.RecordBuilder<AllocationHistory> {

    private java.lang.String allocationType;
    private java.lang.String vendorId;
    private java.lang.String rejectionType;
    private java.lang.String source;
    private java.lang.Long time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.AllocationHistory.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.allocationType)) {
        this.allocationType = data().deepCopy(fields()[0].schema(), other.allocationType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vendorId)) {
        this.vendorId = data().deepCopy(fields()[1].schema(), other.vendorId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rejectionType)) {
        this.rejectionType = data().deepCopy(fields()[2].schema(), other.rejectionType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time)) {
        this.time = data().deepCopy(fields()[4].schema(), other.time);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AllocationHistory instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.AllocationHistory other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.allocationType)) {
        this.allocationType = data().deepCopy(fields()[0].schema(), other.allocationType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vendorId)) {
        this.vendorId = data().deepCopy(fields()[1].schema(), other.vendorId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rejectionType)) {
        this.rejectionType = data().deepCopy(fields()[2].schema(), other.rejectionType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time)) {
        this.time = data().deepCopy(fields()[4].schema(), other.time);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'allocationType' field.
      * @return The value.
      */
    public java.lang.String getAllocationType() {
      return allocationType;
    }

    /**
      * Sets the value of the 'allocationType' field.
      * @param value The value of 'allocationType'.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder setAllocationType(java.lang.String value) {
      validate(fields()[0], value);
      this.allocationType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'allocationType' field has been set.
      * @return True if the 'allocationType' field has been set, false otherwise.
      */
    public boolean hasAllocationType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'allocationType' field.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder clearAllocationType() {
      allocationType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'vendorId' field.
      * @return The value.
      */
    public java.lang.String getVendorId() {
      return vendorId;
    }

    /**
      * Sets the value of the 'vendorId' field.
      * @param value The value of 'vendorId'.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder setVendorId(java.lang.String value) {
      validate(fields()[1], value);
      this.vendorId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'vendorId' field has been set.
      * @return True if the 'vendorId' field has been set, false otherwise.
      */
    public boolean hasVendorId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'vendorId' field.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder clearVendorId() {
      vendorId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rejectionType' field.
      * @return The value.
      */
    public java.lang.String getRejectionType() {
      return rejectionType;
    }

    /**
      * Sets the value of the 'rejectionType' field.
      * @param value The value of 'rejectionType'.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder setRejectionType(java.lang.String value) {
      validate(fields()[2], value);
      this.rejectionType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rejectionType' field has been set.
      * @return True if the 'rejectionType' field has been set, false otherwise.
      */
    public boolean hasRejectionType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rejectionType' field.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder clearRejectionType() {
      rejectionType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder setSource(java.lang.String value) {
      validate(fields()[3], value);
      this.source = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder clearSource() {
      source = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder setTime(java.lang.Long value) {
      validate(fields()[4], value);
      this.time = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.fretron.Model.AllocationHistory.Builder clearTime() {
      time = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public AllocationHistory build() {
      try {
        AllocationHistory record = new AllocationHistory();
        record.allocationType = fieldSetFlags()[0] ? this.allocationType : (java.lang.String) defaultValue(fields()[0]);
        record.vendorId = fieldSetFlags()[1] ? this.vendorId : (java.lang.String) defaultValue(fields()[1]);
        record.rejectionType = fieldSetFlags()[2] ? this.rejectionType : (java.lang.String) defaultValue(fields()[2]);
        record.source = fieldSetFlags()[3] ? this.source : (java.lang.String) defaultValue(fields()[3]);
        record.time = fieldSetFlags()[4] ? this.time : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
