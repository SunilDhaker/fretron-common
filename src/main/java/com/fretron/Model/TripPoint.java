/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TripPoint extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4787787719190457422L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TripPoint\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"purpose\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sequenceId\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"place\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Place\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"category\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"center\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"suggestedRadius\",\"type\":\"double\",\"default\":null},{\"name\":\"viewport\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ViewPort\",\"fields\":[{\"name\":\"northeast\",\"type\":[\"null\",\"Location\"],\"default\":null},{\"name\":\"southwest\",\"type\":[\"null\",\"Location\"],\"default\":null}]}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"boundary\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}],\"default\":null}]}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.lang.String purpose;
  @Deprecated public java.lang.Double sequenceId;
  @Deprecated public com.fretron.Model.Place place;
  @Deprecated public java.lang.String status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TripPoint() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param vehicleId The new value for vehicleId
   * @param purpose The new value for purpose
   * @param sequenceId The new value for sequenceId
   * @param place The new value for place
   * @param status The new value for status
   */
  public TripPoint(java.lang.String uuid, java.lang.String vehicleId, java.lang.String purpose, java.lang.Double sequenceId, com.fretron.Model.Place place, java.lang.String status) {
    this.uuid = uuid;
    this.vehicleId = vehicleId;
    this.purpose = purpose;
    this.sequenceId = sequenceId;
    this.place = place;
    this.status = status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return vehicleId;
    case 2: return purpose;
    case 3: return sequenceId;
    case 4: return place;
    case 5: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: vehicleId = (java.lang.String)value$; break;
    case 2: purpose = (java.lang.String)value$; break;
    case 3: sequenceId = (java.lang.Double)value$; break;
    case 4: place = (com.fretron.Model.Place)value$; break;
    case 5: status = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'purpose' field.
   * @return The value of the 'purpose' field.
   */
  public java.lang.String getPurpose() {
    return purpose;
  }

  /**
   * Sets the value of the 'purpose' field.
   * @param value the value to set.
   */
  public void setPurpose(java.lang.String value) {
    this.purpose = value;
  }

  /**
   * Gets the value of the 'sequenceId' field.
   * @return The value of the 'sequenceId' field.
   */
  public java.lang.Double getSequenceId() {
    return sequenceId;
  }

  /**
   * Sets the value of the 'sequenceId' field.
   * @param value the value to set.
   */
  public void setSequenceId(java.lang.Double value) {
    this.sequenceId = value;
  }

  /**
   * Gets the value of the 'place' field.
   * @return The value of the 'place' field.
   */
  public com.fretron.Model.Place getPlace() {
    return place;
  }

  /**
   * Sets the value of the 'place' field.
   * @param value the value to set.
   */
  public void setPlace(com.fretron.Model.Place value) {
    this.place = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Creates a new TripPoint RecordBuilder.
   * @return A new TripPoint RecordBuilder
   */
  public static com.fretron.Model.TripPoint.Builder newBuilder() {
    return new com.fretron.Model.TripPoint.Builder();
  }

  /**
   * Creates a new TripPoint RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TripPoint RecordBuilder
   */
  public static com.fretron.Model.TripPoint.Builder newBuilder(com.fretron.Model.TripPoint.Builder other) {
    return new com.fretron.Model.TripPoint.Builder(other);
  }

  /**
   * Creates a new TripPoint RecordBuilder by copying an existing TripPoint instance.
   * @param other The existing instance to copy.
   * @return A new TripPoint RecordBuilder
   */
  public static com.fretron.Model.TripPoint.Builder newBuilder(com.fretron.Model.TripPoint other) {
    return new com.fretron.Model.TripPoint.Builder(other);
  }

  /**
   * RecordBuilder for TripPoint instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TripPoint>
    implements org.apache.avro.data.RecordBuilder<TripPoint> {

    private java.lang.String uuid;
    private java.lang.String vehicleId;
    private java.lang.String purpose;
    private java.lang.Double sequenceId;
    private com.fretron.Model.Place place;
    private com.fretron.Model.Place.Builder placeBuilder;
    private java.lang.String status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.TripPoint.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[1].schema(), other.vehicleId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.purpose)) {
        this.purpose = data().deepCopy(fields()[2].schema(), other.purpose);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sequenceId)) {
        this.sequenceId = data().deepCopy(fields()[3].schema(), other.sequenceId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.place)) {
        this.place = data().deepCopy(fields()[4].schema(), other.place);
        fieldSetFlags()[4] = true;
      }
      if (other.hasPlaceBuilder()) {
        this.placeBuilder = com.fretron.Model.Place.newBuilder(other.getPlaceBuilder());
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TripPoint instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.TripPoint other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[1].schema(), other.vehicleId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.purpose)) {
        this.purpose = data().deepCopy(fields()[2].schema(), other.purpose);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sequenceId)) {
        this.sequenceId = data().deepCopy(fields()[3].schema(), other.sequenceId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.place)) {
        this.place = data().deepCopy(fields()[4].schema(), other.place);
        fieldSetFlags()[4] = true;
      }
      this.placeBuilder = null;
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder setVehicleId(java.lang.String value) {
      validate(fields()[1], value);
      this.vehicleId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'purpose' field.
      * @return The value.
      */
    public java.lang.String getPurpose() {
      return purpose;
    }

    /**
      * Sets the value of the 'purpose' field.
      * @param value The value of 'purpose'.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder setPurpose(java.lang.String value) {
      validate(fields()[2], value);
      this.purpose = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'purpose' field has been set.
      * @return True if the 'purpose' field has been set, false otherwise.
      */
    public boolean hasPurpose() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'purpose' field.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder clearPurpose() {
      purpose = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequenceId' field.
      * @return The value.
      */
    public java.lang.Double getSequenceId() {
      return sequenceId;
    }

    /**
      * Sets the value of the 'sequenceId' field.
      * @param value The value of 'sequenceId'.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder setSequenceId(java.lang.Double value) {
      validate(fields()[3], value);
      this.sequenceId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sequenceId' field has been set.
      * @return True if the 'sequenceId' field has been set, false otherwise.
      */
    public boolean hasSequenceId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sequenceId' field.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder clearSequenceId() {
      sequenceId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'place' field.
      * @return The value.
      */
    public com.fretron.Model.Place getPlace() {
      return place;
    }

    /**
      * Sets the value of the 'place' field.
      * @param value The value of 'place'.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder setPlace(com.fretron.Model.Place value) {
      validate(fields()[4], value);
      this.placeBuilder = null;
      this.place = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'place' field has been set.
      * @return True if the 'place' field has been set, false otherwise.
      */
    public boolean hasPlace() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'place' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Place.Builder getPlaceBuilder() {
      if (placeBuilder == null) {
        if (hasPlace()) {
          setPlaceBuilder(com.fretron.Model.Place.newBuilder(place));
        } else {
          setPlaceBuilder(com.fretron.Model.Place.newBuilder());
        }
      }
      return placeBuilder;
    }

    /**
     * Sets the Builder instance for the 'place' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripPoint.Builder setPlaceBuilder(com.fretron.Model.Place.Builder value) {
      clearPlace();
      placeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'place' field has an active Builder instance
     * @return True if the 'place' field has an active Builder instance
     */
    public boolean hasPlaceBuilder() {
      return placeBuilder != null;
    }

    /**
      * Clears the value of the 'place' field.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder clearPlace() {
      place = null;
      placeBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder setStatus(java.lang.String value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.fretron.Model.TripPoint.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public TripPoint build() {
      try {
        TripPoint record = new TripPoint();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.vehicleId = fieldSetFlags()[1] ? this.vehicleId : (java.lang.String) defaultValue(fields()[1]);
        record.purpose = fieldSetFlags()[2] ? this.purpose : (java.lang.String) defaultValue(fields()[2]);
        record.sequenceId = fieldSetFlags()[3] ? this.sequenceId : (java.lang.Double) defaultValue(fields()[3]);
        if (placeBuilder != null) {
          record.place = this.placeBuilder.build();
        } else {
          record.place = fieldSetFlags()[4] ? this.place : (com.fretron.Model.Place) defaultValue(fields()[4]);
        }
        record.status = fieldSetFlags()[5] ? this.status : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
