/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LitePosition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9115140217321194990L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LitePosition\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"isFillingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"odometer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Odometer\",\"fields\":[{\"name\":\"softwareMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastUpdateTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isSoftwareMeterManuallyCalibrated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"lastCalibrationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"hardwareReading\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"hardwareDistance\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double latitude;
  @Deprecated public double longitude;
  @Deprecated public double speed;
  @Deprecated public java.lang.Double course;
  @Deprecated public java.lang.String decoder;
  @Deprecated public java.lang.Long time;
  @Deprecated public java.lang.String imei;
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.lang.String address;
  @Deprecated public java.util.List<java.lang.Double> lngLat;
  @Deprecated public boolean isFillingEnabled;
  @Deprecated public com.fretron.Model.Odometer odometer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LitePosition() {}

  /**
   * All-args constructor.
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param speed The new value for speed
   * @param course The new value for course
   * @param decoder The new value for decoder
   * @param time The new value for time
   * @param imei The new value for imei
   * @param vehicleId The new value for vehicleId
   * @param address The new value for address
   * @param lngLat The new value for lngLat
   * @param isFillingEnabled The new value for isFillingEnabled
   * @param odometer The new value for odometer
   */
  public LitePosition(java.lang.Double latitude, java.lang.Double longitude, java.lang.Double speed, java.lang.Double course, java.lang.String decoder, java.lang.Long time, java.lang.String imei, java.lang.String vehicleId, java.lang.String address, java.util.List<java.lang.Double> lngLat, java.lang.Boolean isFillingEnabled, com.fretron.Model.Odometer odometer) {
    this.latitude = latitude;
    this.longitude = longitude;
    this.speed = speed;
    this.course = course;
    this.decoder = decoder;
    this.time = time;
    this.imei = imei;
    this.vehicleId = vehicleId;
    this.address = address;
    this.lngLat = lngLat;
    this.isFillingEnabled = isFillingEnabled;
    this.odometer = odometer;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return latitude;
    case 1: return longitude;
    case 2: return speed;
    case 3: return course;
    case 4: return decoder;
    case 5: return time;
    case 6: return imei;
    case 7: return vehicleId;
    case 8: return address;
    case 9: return lngLat;
    case 10: return isFillingEnabled;
    case 11: return odometer;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: latitude = (java.lang.Double)value$; break;
    case 1: longitude = (java.lang.Double)value$; break;
    case 2: speed = (java.lang.Double)value$; break;
    case 3: course = (java.lang.Double)value$; break;
    case 4: decoder = (java.lang.String)value$; break;
    case 5: time = (java.lang.Long)value$; break;
    case 6: imei = (java.lang.String)value$; break;
    case 7: vehicleId = (java.lang.String)value$; break;
    case 8: address = (java.lang.String)value$; break;
    case 9: lngLat = (java.util.List<java.lang.Double>)value$; break;
    case 10: isFillingEnabled = (java.lang.Boolean)value$; break;
    case 11: odometer = (com.fretron.Model.Odometer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'course' field.
   * @return The value of the 'course' field.
   */
  public java.lang.Double getCourse() {
    return course;
  }

  /**
   * Sets the value of the 'course' field.
   * @param value the value to set.
   */
  public void setCourse(java.lang.Double value) {
    this.course = value;
  }

  /**
   * Gets the value of the 'decoder' field.
   * @return The value of the 'decoder' field.
   */
  public java.lang.String getDecoder() {
    return decoder;
  }

  /**
   * Sets the value of the 'decoder' field.
   * @param value the value to set.
   */
  public void setDecoder(java.lang.String value) {
    this.decoder = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'imei' field.
   * @return The value of the 'imei' field.
   */
  public java.lang.String getImei() {
    return imei;
  }

  /**
   * Sets the value of the 'imei' field.
   * @param value the value to set.
   */
  public void setImei(java.lang.String value) {
    this.imei = value;
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'lngLat' field.
   * @return The value of the 'lngLat' field.
   */
  public java.util.List<java.lang.Double> getLngLat() {
    return lngLat;
  }

  /**
   * Sets the value of the 'lngLat' field.
   * @param value the value to set.
   */
  public void setLngLat(java.util.List<java.lang.Double> value) {
    this.lngLat = value;
  }

  /**
   * Gets the value of the 'isFillingEnabled' field.
   * @return The value of the 'isFillingEnabled' field.
   */
  public java.lang.Boolean getIsFillingEnabled() {
    return isFillingEnabled;
  }

  /**
   * Sets the value of the 'isFillingEnabled' field.
   * @param value the value to set.
   */
  public void setIsFillingEnabled(java.lang.Boolean value) {
    this.isFillingEnabled = value;
  }

  /**
   * Gets the value of the 'odometer' field.
   * @return The value of the 'odometer' field.
   */
  public com.fretron.Model.Odometer getOdometer() {
    return odometer;
  }

  /**
   * Sets the value of the 'odometer' field.
   * @param value the value to set.
   */
  public void setOdometer(com.fretron.Model.Odometer value) {
    this.odometer = value;
  }

  /**
   * Creates a new LitePosition RecordBuilder.
   * @return A new LitePosition RecordBuilder
   */
  public static com.fretron.Model.LitePosition.Builder newBuilder() {
    return new com.fretron.Model.LitePosition.Builder();
  }

  /**
   * Creates a new LitePosition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LitePosition RecordBuilder
   */
  public static com.fretron.Model.LitePosition.Builder newBuilder(com.fretron.Model.LitePosition.Builder other) {
    return new com.fretron.Model.LitePosition.Builder(other);
  }

  /**
   * Creates a new LitePosition RecordBuilder by copying an existing LitePosition instance.
   * @param other The existing instance to copy.
   * @return A new LitePosition RecordBuilder
   */
  public static com.fretron.Model.LitePosition.Builder newBuilder(com.fretron.Model.LitePosition other) {
    return new com.fretron.Model.LitePosition.Builder(other);
  }

  /**
   * RecordBuilder for LitePosition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LitePosition>
    implements org.apache.avro.data.RecordBuilder<LitePosition> {

    private double latitude;
    private double longitude;
    private double speed;
    private java.lang.Double course;
    private java.lang.String decoder;
    private java.lang.Long time;
    private java.lang.String imei;
    private java.lang.String vehicleId;
    private java.lang.String address;
    private java.util.List<java.lang.Double> lngLat;
    private boolean isFillingEnabled;
    private com.fretron.Model.Odometer odometer;
    private com.fretron.Model.Odometer.Builder odometerBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.LitePosition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.latitude)) {
        this.latitude = data().deepCopy(fields()[0].schema(), other.latitude);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longitude)) {
        this.longitude = data().deepCopy(fields()[1].schema(), other.longitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.course)) {
        this.course = data().deepCopy(fields()[3].schema(), other.course);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.decoder)) {
        this.decoder = data().deepCopy(fields()[4].schema(), other.decoder);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.time)) {
        this.time = data().deepCopy(fields()[5].schema(), other.time);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.imei)) {
        this.imei = data().deepCopy(fields()[6].schema(), other.imei);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[7].schema(), other.vehicleId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.address)) {
        this.address = data().deepCopy(fields()[8].schema(), other.address);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.lngLat)) {
        this.lngLat = data().deepCopy(fields()[9].schema(), other.lngLat);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isFillingEnabled)) {
        this.isFillingEnabled = data().deepCopy(fields()[10].schema(), other.isFillingEnabled);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.odometer)) {
        this.odometer = data().deepCopy(fields()[11].schema(), other.odometer);
        fieldSetFlags()[11] = true;
      }
      if (other.hasOdometerBuilder()) {
        this.odometerBuilder = com.fretron.Model.Odometer.newBuilder(other.getOdometerBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing LitePosition instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.LitePosition other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.latitude)) {
        this.latitude = data().deepCopy(fields()[0].schema(), other.latitude);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longitude)) {
        this.longitude = data().deepCopy(fields()[1].schema(), other.longitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.course)) {
        this.course = data().deepCopy(fields()[3].schema(), other.course);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.decoder)) {
        this.decoder = data().deepCopy(fields()[4].schema(), other.decoder);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.time)) {
        this.time = data().deepCopy(fields()[5].schema(), other.time);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.imei)) {
        this.imei = data().deepCopy(fields()[6].schema(), other.imei);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[7].schema(), other.vehicleId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.address)) {
        this.address = data().deepCopy(fields()[8].schema(), other.address);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.lngLat)) {
        this.lngLat = data().deepCopy(fields()[9].schema(), other.lngLat);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isFillingEnabled)) {
        this.isFillingEnabled = data().deepCopy(fields()[10].schema(), other.isFillingEnabled);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.odometer)) {
        this.odometer = data().deepCopy(fields()[11].schema(), other.odometer);
        fieldSetFlags()[11] = true;
      }
      this.odometerBuilder = null;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setLatitude(double value) {
      validate(fields()[0], value);
      this.latitude = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearLatitude() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setLongitude(double value) {
      validate(fields()[1], value);
      this.longitude = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearLongitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setSpeed(double value) {
      validate(fields()[2], value);
      this.speed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearSpeed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'course' field.
      * @return The value.
      */
    public java.lang.Double getCourse() {
      return course;
    }

    /**
      * Sets the value of the 'course' field.
      * @param value The value of 'course'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setCourse(java.lang.Double value) {
      validate(fields()[3], value);
      this.course = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'course' field has been set.
      * @return True if the 'course' field has been set, false otherwise.
      */
    public boolean hasCourse() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'course' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearCourse() {
      course = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'decoder' field.
      * @return The value.
      */
    public java.lang.String getDecoder() {
      return decoder;
    }

    /**
      * Sets the value of the 'decoder' field.
      * @param value The value of 'decoder'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setDecoder(java.lang.String value) {
      validate(fields()[4], value);
      this.decoder = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'decoder' field has been set.
      * @return True if the 'decoder' field has been set, false otherwise.
      */
    public boolean hasDecoder() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'decoder' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearDecoder() {
      decoder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setTime(java.lang.Long value) {
      validate(fields()[5], value);
      this.time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearTime() {
      time = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'imei' field.
      * @return The value.
      */
    public java.lang.String getImei() {
      return imei;
    }

    /**
      * Sets the value of the 'imei' field.
      * @param value The value of 'imei'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setImei(java.lang.String value) {
      validate(fields()[6], value);
      this.imei = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'imei' field has been set.
      * @return True if the 'imei' field has been set, false otherwise.
      */
    public boolean hasImei() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'imei' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearImei() {
      imei = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setVehicleId(java.lang.String value) {
      validate(fields()[7], value);
      this.vehicleId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setAddress(java.lang.String value) {
      validate(fields()[8], value);
      this.address = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearAddress() {
      address = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'lngLat' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getLngLat() {
      return lngLat;
    }

    /**
      * Sets the value of the 'lngLat' field.
      * @param value The value of 'lngLat'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setLngLat(java.util.List<java.lang.Double> value) {
      validate(fields()[9], value);
      this.lngLat = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'lngLat' field has been set.
      * @return True if the 'lngLat' field has been set, false otherwise.
      */
    public boolean hasLngLat() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'lngLat' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearLngLat() {
      lngLat = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'isFillingEnabled' field.
      * @return The value.
      */
    public java.lang.Boolean getIsFillingEnabled() {
      return isFillingEnabled;
    }

    /**
      * Sets the value of the 'isFillingEnabled' field.
      * @param value The value of 'isFillingEnabled'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setIsFillingEnabled(boolean value) {
      validate(fields()[10], value);
      this.isFillingEnabled = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'isFillingEnabled' field has been set.
      * @return True if the 'isFillingEnabled' field has been set, false otherwise.
      */
    public boolean hasIsFillingEnabled() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'isFillingEnabled' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearIsFillingEnabled() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'odometer' field.
      * @return The value.
      */
    public com.fretron.Model.Odometer getOdometer() {
      return odometer;
    }

    /**
      * Sets the value of the 'odometer' field.
      * @param value The value of 'odometer'.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder setOdometer(com.fretron.Model.Odometer value) {
      validate(fields()[11], value);
      this.odometerBuilder = null;
      this.odometer = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'odometer' field has been set.
      * @return True if the 'odometer' field has been set, false otherwise.
      */
    public boolean hasOdometer() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'odometer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Odometer.Builder getOdometerBuilder() {
      if (odometerBuilder == null) {
        if (hasOdometer()) {
          setOdometerBuilder(com.fretron.Model.Odometer.newBuilder(odometer));
        } else {
          setOdometerBuilder(com.fretron.Model.Odometer.newBuilder());
        }
      }
      return odometerBuilder;
    }

    /**
     * Sets the Builder instance for the 'odometer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder setOdometerBuilder(com.fretron.Model.Odometer.Builder value) {
      clearOdometer();
      odometerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'odometer' field has an active Builder instance
     * @return True if the 'odometer' field has an active Builder instance
     */
    public boolean hasOdometerBuilder() {
      return odometerBuilder != null;
    }

    /**
      * Clears the value of the 'odometer' field.
      * @return This builder.
      */
    public com.fretron.Model.LitePosition.Builder clearOdometer() {
      odometer = null;
      odometerBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public LitePosition build() {
      try {
        LitePosition record = new LitePosition();
        record.latitude = fieldSetFlags()[0] ? this.latitude : (java.lang.Double) defaultValue(fields()[0]);
        record.longitude = fieldSetFlags()[1] ? this.longitude : (java.lang.Double) defaultValue(fields()[1]);
        record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Double) defaultValue(fields()[2]);
        record.course = fieldSetFlags()[3] ? this.course : (java.lang.Double) defaultValue(fields()[3]);
        record.decoder = fieldSetFlags()[4] ? this.decoder : (java.lang.String) defaultValue(fields()[4]);
        record.time = fieldSetFlags()[5] ? this.time : (java.lang.Long) defaultValue(fields()[5]);
        record.imei = fieldSetFlags()[6] ? this.imei : (java.lang.String) defaultValue(fields()[6]);
        record.vehicleId = fieldSetFlags()[7] ? this.vehicleId : (java.lang.String) defaultValue(fields()[7]);
        record.address = fieldSetFlags()[8] ? this.address : (java.lang.String) defaultValue(fields()[8]);
        record.lngLat = fieldSetFlags()[9] ? this.lngLat : (java.util.List<java.lang.Double>) defaultValue(fields()[9]);
        record.isFillingEnabled = fieldSetFlags()[10] ? this.isFillingEnabled : (java.lang.Boolean) defaultValue(fields()[10]);
        if (odometerBuilder != null) {
          record.odometer = this.odometerBuilder.build();
        } else {
          record.odometer = fieldSetFlags()[11] ? this.odometer : (com.fretron.Model.Odometer) defaultValue(fields()[11]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
