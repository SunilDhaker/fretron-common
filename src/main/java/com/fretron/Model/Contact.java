/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Contact extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 926869112655596328L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contact\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mobileNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"emails\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"mobileNumbers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String mobileNumber;
  @Deprecated public java.lang.String address;
  @Deprecated public java.util.List<java.lang.String> emails;
  @Deprecated public java.util.List<java.lang.String> mobileNumbers;
  @Deprecated public java.lang.String type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Contact() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param mobileNumber The new value for mobileNumber
   * @param address The new value for address
   * @param emails The new value for emails
   * @param mobileNumbers The new value for mobileNumbers
   * @param type The new value for type
   */
  public Contact(java.lang.String name, java.lang.String mobileNumber, java.lang.String address, java.util.List<java.lang.String> emails, java.util.List<java.lang.String> mobileNumbers, java.lang.String type) {
    this.name = name;
    this.mobileNumber = mobileNumber;
    this.address = address;
    this.emails = emails;
    this.mobileNumbers = mobileNumbers;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return mobileNumber;
    case 2: return address;
    case 3: return emails;
    case 4: return mobileNumbers;
    case 5: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: mobileNumber = (java.lang.String)value$; break;
    case 2: address = (java.lang.String)value$; break;
    case 3: emails = (java.util.List<java.lang.String>)value$; break;
    case 4: mobileNumbers = (java.util.List<java.lang.String>)value$; break;
    case 5: type = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'mobileNumber' field.
   * @return The value of the 'mobileNumber' field.
   */
  public java.lang.String getMobileNumber() {
    return mobileNumber;
  }

  /**
   * Sets the value of the 'mobileNumber' field.
   * @param value the value to set.
   */
  public void setMobileNumber(java.lang.String value) {
    this.mobileNumber = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'emails' field.
   * @return The value of the 'emails' field.
   */
  public java.util.List<java.lang.String> getEmails() {
    return emails;
  }

  /**
   * Sets the value of the 'emails' field.
   * @param value the value to set.
   */
  public void setEmails(java.util.List<java.lang.String> value) {
    this.emails = value;
  }

  /**
   * Gets the value of the 'mobileNumbers' field.
   * @return The value of the 'mobileNumbers' field.
   */
  public java.util.List<java.lang.String> getMobileNumbers() {
    return mobileNumbers;
  }

  /**
   * Sets the value of the 'mobileNumbers' field.
   * @param value the value to set.
   */
  public void setMobileNumbers(java.util.List<java.lang.String> value) {
    this.mobileNumbers = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Creates a new Contact RecordBuilder.
   * @return A new Contact RecordBuilder
   */
  public static com.fretron.Model.Contact.Builder newBuilder() {
    return new com.fretron.Model.Contact.Builder();
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Contact RecordBuilder
   */
  public static com.fretron.Model.Contact.Builder newBuilder(com.fretron.Model.Contact.Builder other) {
    return new com.fretron.Model.Contact.Builder(other);
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Contact instance.
   * @param other The existing instance to copy.
   * @return A new Contact RecordBuilder
   */
  public static com.fretron.Model.Contact.Builder newBuilder(com.fretron.Model.Contact other) {
    return new com.fretron.Model.Contact.Builder(other);
  }

  /**
   * RecordBuilder for Contact instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contact>
    implements org.apache.avro.data.RecordBuilder<Contact> {

    private java.lang.String name;
    private java.lang.String mobileNumber;
    private java.lang.String address;
    private java.util.List<java.lang.String> emails;
    private java.util.List<java.lang.String> mobileNumbers;
    private java.lang.String type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Contact.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[1].schema(), other.mobileNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.emails)) {
        this.emails = data().deepCopy(fields()[3].schema(), other.emails);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mobileNumbers)) {
        this.mobileNumbers = data().deepCopy(fields()[4].schema(), other.mobileNumbers);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Contact instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Contact other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[1].schema(), other.mobileNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.emails)) {
        this.emails = data().deepCopy(fields()[3].schema(), other.emails);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mobileNumbers)) {
        this.mobileNumbers = data().deepCopy(fields()[4].schema(), other.mobileNumbers);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileNumber' field.
      * @return The value.
      */
    public java.lang.String getMobileNumber() {
      return mobileNumber;
    }

    /**
      * Sets the value of the 'mobileNumber' field.
      * @param value The value of 'mobileNumber'.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder setMobileNumber(java.lang.String value) {
      validate(fields()[1], value);
      this.mobileNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileNumber' field has been set.
      * @return True if the 'mobileNumber' field has been set, false otherwise.
      */
    public boolean hasMobileNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mobileNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder clearMobileNumber() {
      mobileNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder setAddress(java.lang.String value) {
      validate(fields()[2], value);
      this.address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder clearAddress() {
      address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'emails' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getEmails() {
      return emails;
    }

    /**
      * Sets the value of the 'emails' field.
      * @param value The value of 'emails'.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder setEmails(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.emails = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'emails' field has been set.
      * @return True if the 'emails' field has been set, false otherwise.
      */
    public boolean hasEmails() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'emails' field.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder clearEmails() {
      emails = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileNumbers' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getMobileNumbers() {
      return mobileNumbers;
    }

    /**
      * Sets the value of the 'mobileNumbers' field.
      * @param value The value of 'mobileNumbers'.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder setMobileNumbers(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.mobileNumbers = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileNumbers' field has been set.
      * @return True if the 'mobileNumbers' field has been set, false otherwise.
      */
    public boolean hasMobileNumbers() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'mobileNumbers' field.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder clearMobileNumbers() {
      mobileNumbers = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder setType(java.lang.String value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.Contact.Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Contact build() {
      try {
        Contact record = new Contact();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.mobileNumber = fieldSetFlags()[1] ? this.mobileNumber : (java.lang.String) defaultValue(fields()[1]);
        record.address = fieldSetFlags()[2] ? this.address : (java.lang.String) defaultValue(fields()[2]);
        record.emails = fieldSetFlags()[3] ? this.emails : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        record.mobileNumbers = fieldSetFlags()[4] ? this.mobileNumbers : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
