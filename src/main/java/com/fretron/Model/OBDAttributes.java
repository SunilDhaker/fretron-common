/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OBDAttributes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6598489848220708236L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OBDAttributes\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"numberOfDTC\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"engineLoad\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"coolantTemperature\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"fuelPressure\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"engineRPM\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"intakeTemp\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"vehicleSpeed\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"throttlePosition\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"runTimeSinceEngineStart\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"fuelLevel\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"totalOdometer\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"distanceTravelledMILOn\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"timeRunWithMILOn\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"engineOilTemp\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"engineFuelRate\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"movement\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"axisX\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"axisY\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"axisZ\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer numberOfDTC;
  @Deprecated public java.lang.Double engineLoad;
  @Deprecated public java.lang.Double coolantTemperature;
  @Deprecated public java.lang.Double fuelPressure;
  @Deprecated public java.lang.Double engineRPM;
  @Deprecated public java.lang.Double intakeTemp;
  @Deprecated public java.lang.Double vehicleSpeed;
  @Deprecated public java.lang.Double throttlePosition;
  @Deprecated public java.lang.Long runTimeSinceEngineStart;
  @Deprecated public java.lang.Double fuelLevel;
  @Deprecated public java.lang.Double totalOdometer;
  @Deprecated public java.lang.Double distanceTravelledMILOn;
  @Deprecated public java.lang.Long timeRunWithMILOn;
  @Deprecated public java.lang.Double engineOilTemp;
  @Deprecated public java.lang.Double engineFuelRate;
  @Deprecated public java.lang.Integer movement;
  @Deprecated public java.lang.Double axisX;
  @Deprecated public java.lang.Double axisY;
  @Deprecated public java.lang.Double axisZ;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OBDAttributes() {}

  /**
   * All-args constructor.
   * @param numberOfDTC The new value for numberOfDTC
   * @param engineLoad The new value for engineLoad
   * @param coolantTemperature The new value for coolantTemperature
   * @param fuelPressure The new value for fuelPressure
   * @param engineRPM The new value for engineRPM
   * @param intakeTemp The new value for intakeTemp
   * @param vehicleSpeed The new value for vehicleSpeed
   * @param throttlePosition The new value for throttlePosition
   * @param runTimeSinceEngineStart The new value for runTimeSinceEngineStart
   * @param fuelLevel The new value for fuelLevel
   * @param totalOdometer The new value for totalOdometer
   * @param distanceTravelledMILOn The new value for distanceTravelledMILOn
   * @param timeRunWithMILOn The new value for timeRunWithMILOn
   * @param engineOilTemp The new value for engineOilTemp
   * @param engineFuelRate The new value for engineFuelRate
   * @param movement The new value for movement
   * @param axisX The new value for axisX
   * @param axisY The new value for axisY
   * @param axisZ The new value for axisZ
   */
  public OBDAttributes(java.lang.Integer numberOfDTC, java.lang.Double engineLoad, java.lang.Double coolantTemperature, java.lang.Double fuelPressure, java.lang.Double engineRPM, java.lang.Double intakeTemp, java.lang.Double vehicleSpeed, java.lang.Double throttlePosition, java.lang.Long runTimeSinceEngineStart, java.lang.Double fuelLevel, java.lang.Double totalOdometer, java.lang.Double distanceTravelledMILOn, java.lang.Long timeRunWithMILOn, java.lang.Double engineOilTemp, java.lang.Double engineFuelRate, java.lang.Integer movement, java.lang.Double axisX, java.lang.Double axisY, java.lang.Double axisZ) {
    this.numberOfDTC = numberOfDTC;
    this.engineLoad = engineLoad;
    this.coolantTemperature = coolantTemperature;
    this.fuelPressure = fuelPressure;
    this.engineRPM = engineRPM;
    this.intakeTemp = intakeTemp;
    this.vehicleSpeed = vehicleSpeed;
    this.throttlePosition = throttlePosition;
    this.runTimeSinceEngineStart = runTimeSinceEngineStart;
    this.fuelLevel = fuelLevel;
    this.totalOdometer = totalOdometer;
    this.distanceTravelledMILOn = distanceTravelledMILOn;
    this.timeRunWithMILOn = timeRunWithMILOn;
    this.engineOilTemp = engineOilTemp;
    this.engineFuelRate = engineFuelRate;
    this.movement = movement;
    this.axisX = axisX;
    this.axisY = axisY;
    this.axisZ = axisZ;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return numberOfDTC;
    case 1: return engineLoad;
    case 2: return coolantTemperature;
    case 3: return fuelPressure;
    case 4: return engineRPM;
    case 5: return intakeTemp;
    case 6: return vehicleSpeed;
    case 7: return throttlePosition;
    case 8: return runTimeSinceEngineStart;
    case 9: return fuelLevel;
    case 10: return totalOdometer;
    case 11: return distanceTravelledMILOn;
    case 12: return timeRunWithMILOn;
    case 13: return engineOilTemp;
    case 14: return engineFuelRate;
    case 15: return movement;
    case 16: return axisX;
    case 17: return axisY;
    case 18: return axisZ;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: numberOfDTC = (java.lang.Integer)value$; break;
    case 1: engineLoad = (java.lang.Double)value$; break;
    case 2: coolantTemperature = (java.lang.Double)value$; break;
    case 3: fuelPressure = (java.lang.Double)value$; break;
    case 4: engineRPM = (java.lang.Double)value$; break;
    case 5: intakeTemp = (java.lang.Double)value$; break;
    case 6: vehicleSpeed = (java.lang.Double)value$; break;
    case 7: throttlePosition = (java.lang.Double)value$; break;
    case 8: runTimeSinceEngineStart = (java.lang.Long)value$; break;
    case 9: fuelLevel = (java.lang.Double)value$; break;
    case 10: totalOdometer = (java.lang.Double)value$; break;
    case 11: distanceTravelledMILOn = (java.lang.Double)value$; break;
    case 12: timeRunWithMILOn = (java.lang.Long)value$; break;
    case 13: engineOilTemp = (java.lang.Double)value$; break;
    case 14: engineFuelRate = (java.lang.Double)value$; break;
    case 15: movement = (java.lang.Integer)value$; break;
    case 16: axisX = (java.lang.Double)value$; break;
    case 17: axisY = (java.lang.Double)value$; break;
    case 18: axisZ = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'numberOfDTC' field.
   * @return The value of the 'numberOfDTC' field.
   */
  public java.lang.Integer getNumberOfDTC() {
    return numberOfDTC;
  }

  /**
   * Sets the value of the 'numberOfDTC' field.
   * @param value the value to set.
   */
  public void setNumberOfDTC(java.lang.Integer value) {
    this.numberOfDTC = value;
  }

  /**
   * Gets the value of the 'engineLoad' field.
   * @return The value of the 'engineLoad' field.
   */
  public java.lang.Double getEngineLoad() {
    return engineLoad;
  }

  /**
   * Sets the value of the 'engineLoad' field.
   * @param value the value to set.
   */
  public void setEngineLoad(java.lang.Double value) {
    this.engineLoad = value;
  }

  /**
   * Gets the value of the 'coolantTemperature' field.
   * @return The value of the 'coolantTemperature' field.
   */
  public java.lang.Double getCoolantTemperature() {
    return coolantTemperature;
  }

  /**
   * Sets the value of the 'coolantTemperature' field.
   * @param value the value to set.
   */
  public void setCoolantTemperature(java.lang.Double value) {
    this.coolantTemperature = value;
  }

  /**
   * Gets the value of the 'fuelPressure' field.
   * @return The value of the 'fuelPressure' field.
   */
  public java.lang.Double getFuelPressure() {
    return fuelPressure;
  }

  /**
   * Sets the value of the 'fuelPressure' field.
   * @param value the value to set.
   */
  public void setFuelPressure(java.lang.Double value) {
    this.fuelPressure = value;
  }

  /**
   * Gets the value of the 'engineRPM' field.
   * @return The value of the 'engineRPM' field.
   */
  public java.lang.Double getEngineRPM() {
    return engineRPM;
  }

  /**
   * Sets the value of the 'engineRPM' field.
   * @param value the value to set.
   */
  public void setEngineRPM(java.lang.Double value) {
    this.engineRPM = value;
  }

  /**
   * Gets the value of the 'intakeTemp' field.
   * @return The value of the 'intakeTemp' field.
   */
  public java.lang.Double getIntakeTemp() {
    return intakeTemp;
  }

  /**
   * Sets the value of the 'intakeTemp' field.
   * @param value the value to set.
   */
  public void setIntakeTemp(java.lang.Double value) {
    this.intakeTemp = value;
  }

  /**
   * Gets the value of the 'vehicleSpeed' field.
   * @return The value of the 'vehicleSpeed' field.
   */
  public java.lang.Double getVehicleSpeed() {
    return vehicleSpeed;
  }

  /**
   * Sets the value of the 'vehicleSpeed' field.
   * @param value the value to set.
   */
  public void setVehicleSpeed(java.lang.Double value) {
    this.vehicleSpeed = value;
  }

  /**
   * Gets the value of the 'throttlePosition' field.
   * @return The value of the 'throttlePosition' field.
   */
  public java.lang.Double getThrottlePosition() {
    return throttlePosition;
  }

  /**
   * Sets the value of the 'throttlePosition' field.
   * @param value the value to set.
   */
  public void setThrottlePosition(java.lang.Double value) {
    this.throttlePosition = value;
  }

  /**
   * Gets the value of the 'runTimeSinceEngineStart' field.
   * @return The value of the 'runTimeSinceEngineStart' field.
   */
  public java.lang.Long getRunTimeSinceEngineStart() {
    return runTimeSinceEngineStart;
  }

  /**
   * Sets the value of the 'runTimeSinceEngineStart' field.
   * @param value the value to set.
   */
  public void setRunTimeSinceEngineStart(java.lang.Long value) {
    this.runTimeSinceEngineStart = value;
  }

  /**
   * Gets the value of the 'fuelLevel' field.
   * @return The value of the 'fuelLevel' field.
   */
  public java.lang.Double getFuelLevel() {
    return fuelLevel;
  }

  /**
   * Sets the value of the 'fuelLevel' field.
   * @param value the value to set.
   */
  public void setFuelLevel(java.lang.Double value) {
    this.fuelLevel = value;
  }

  /**
   * Gets the value of the 'totalOdometer' field.
   * @return The value of the 'totalOdometer' field.
   */
  public java.lang.Double getTotalOdometer() {
    return totalOdometer;
  }

  /**
   * Sets the value of the 'totalOdometer' field.
   * @param value the value to set.
   */
  public void setTotalOdometer(java.lang.Double value) {
    this.totalOdometer = value;
  }

  /**
   * Gets the value of the 'distanceTravelledMILOn' field.
   * @return The value of the 'distanceTravelledMILOn' field.
   */
  public java.lang.Double getDistanceTravelledMILOn() {
    return distanceTravelledMILOn;
  }

  /**
   * Sets the value of the 'distanceTravelledMILOn' field.
   * @param value the value to set.
   */
  public void setDistanceTravelledMILOn(java.lang.Double value) {
    this.distanceTravelledMILOn = value;
  }

  /**
   * Gets the value of the 'timeRunWithMILOn' field.
   * @return The value of the 'timeRunWithMILOn' field.
   */
  public java.lang.Long getTimeRunWithMILOn() {
    return timeRunWithMILOn;
  }

  /**
   * Sets the value of the 'timeRunWithMILOn' field.
   * @param value the value to set.
   */
  public void setTimeRunWithMILOn(java.lang.Long value) {
    this.timeRunWithMILOn = value;
  }

  /**
   * Gets the value of the 'engineOilTemp' field.
   * @return The value of the 'engineOilTemp' field.
   */
  public java.lang.Double getEngineOilTemp() {
    return engineOilTemp;
  }

  /**
   * Sets the value of the 'engineOilTemp' field.
   * @param value the value to set.
   */
  public void setEngineOilTemp(java.lang.Double value) {
    this.engineOilTemp = value;
  }

  /**
   * Gets the value of the 'engineFuelRate' field.
   * @return The value of the 'engineFuelRate' field.
   */
  public java.lang.Double getEngineFuelRate() {
    return engineFuelRate;
  }

  /**
   * Sets the value of the 'engineFuelRate' field.
   * @param value the value to set.
   */
  public void setEngineFuelRate(java.lang.Double value) {
    this.engineFuelRate = value;
  }

  /**
   * Gets the value of the 'movement' field.
   * @return The value of the 'movement' field.
   */
  public java.lang.Integer getMovement() {
    return movement;
  }

  /**
   * Sets the value of the 'movement' field.
   * @param value the value to set.
   */
  public void setMovement(java.lang.Integer value) {
    this.movement = value;
  }

  /**
   * Gets the value of the 'axisX' field.
   * @return The value of the 'axisX' field.
   */
  public java.lang.Double getAxisX() {
    return axisX;
  }

  /**
   * Sets the value of the 'axisX' field.
   * @param value the value to set.
   */
  public void setAxisX(java.lang.Double value) {
    this.axisX = value;
  }

  /**
   * Gets the value of the 'axisY' field.
   * @return The value of the 'axisY' field.
   */
  public java.lang.Double getAxisY() {
    return axisY;
  }

  /**
   * Sets the value of the 'axisY' field.
   * @param value the value to set.
   */
  public void setAxisY(java.lang.Double value) {
    this.axisY = value;
  }

  /**
   * Gets the value of the 'axisZ' field.
   * @return The value of the 'axisZ' field.
   */
  public java.lang.Double getAxisZ() {
    return axisZ;
  }

  /**
   * Sets the value of the 'axisZ' field.
   * @param value the value to set.
   */
  public void setAxisZ(java.lang.Double value) {
    this.axisZ = value;
  }

  /**
   * Creates a new OBDAttributes RecordBuilder.
   * @return A new OBDAttributes RecordBuilder
   */
  public static com.fretron.Model.OBDAttributes.Builder newBuilder() {
    return new com.fretron.Model.OBDAttributes.Builder();
  }

  /**
   * Creates a new OBDAttributes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OBDAttributes RecordBuilder
   */
  public static com.fretron.Model.OBDAttributes.Builder newBuilder(com.fretron.Model.OBDAttributes.Builder other) {
    return new com.fretron.Model.OBDAttributes.Builder(other);
  }

  /**
   * Creates a new OBDAttributes RecordBuilder by copying an existing OBDAttributes instance.
   * @param other The existing instance to copy.
   * @return A new OBDAttributes RecordBuilder
   */
  public static com.fretron.Model.OBDAttributes.Builder newBuilder(com.fretron.Model.OBDAttributes other) {
    return new com.fretron.Model.OBDAttributes.Builder(other);
  }

  /**
   * RecordBuilder for OBDAttributes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OBDAttributes>
    implements org.apache.avro.data.RecordBuilder<OBDAttributes> {

    private java.lang.Integer numberOfDTC;
    private java.lang.Double engineLoad;
    private java.lang.Double coolantTemperature;
    private java.lang.Double fuelPressure;
    private java.lang.Double engineRPM;
    private java.lang.Double intakeTemp;
    private java.lang.Double vehicleSpeed;
    private java.lang.Double throttlePosition;
    private java.lang.Long runTimeSinceEngineStart;
    private java.lang.Double fuelLevel;
    private java.lang.Double totalOdometer;
    private java.lang.Double distanceTravelledMILOn;
    private java.lang.Long timeRunWithMILOn;
    private java.lang.Double engineOilTemp;
    private java.lang.Double engineFuelRate;
    private java.lang.Integer movement;
    private java.lang.Double axisX;
    private java.lang.Double axisY;
    private java.lang.Double axisZ;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.OBDAttributes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.numberOfDTC)) {
        this.numberOfDTC = data().deepCopy(fields()[0].schema(), other.numberOfDTC);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.engineLoad)) {
        this.engineLoad = data().deepCopy(fields()[1].schema(), other.engineLoad);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coolantTemperature)) {
        this.coolantTemperature = data().deepCopy(fields()[2].schema(), other.coolantTemperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fuelPressure)) {
        this.fuelPressure = data().deepCopy(fields()[3].schema(), other.fuelPressure);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.engineRPM)) {
        this.engineRPM = data().deepCopy(fields()[4].schema(), other.engineRPM);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.intakeTemp)) {
        this.intakeTemp = data().deepCopy(fields()[5].schema(), other.intakeTemp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.vehicleSpeed)) {
        this.vehicleSpeed = data().deepCopy(fields()[6].schema(), other.vehicleSpeed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.throttlePosition)) {
        this.throttlePosition = data().deepCopy(fields()[7].schema(), other.throttlePosition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.runTimeSinceEngineStart)) {
        this.runTimeSinceEngineStart = data().deepCopy(fields()[8].schema(), other.runTimeSinceEngineStart);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.fuelLevel)) {
        this.fuelLevel = data().deepCopy(fields()[9].schema(), other.fuelLevel);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.totalOdometer)) {
        this.totalOdometer = data().deepCopy(fields()[10].schema(), other.totalOdometer);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.distanceTravelledMILOn)) {
        this.distanceTravelledMILOn = data().deepCopy(fields()[11].schema(), other.distanceTravelledMILOn);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.timeRunWithMILOn)) {
        this.timeRunWithMILOn = data().deepCopy(fields()[12].schema(), other.timeRunWithMILOn);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.engineOilTemp)) {
        this.engineOilTemp = data().deepCopy(fields()[13].schema(), other.engineOilTemp);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.engineFuelRate)) {
        this.engineFuelRate = data().deepCopy(fields()[14].schema(), other.engineFuelRate);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.movement)) {
        this.movement = data().deepCopy(fields()[15].schema(), other.movement);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.axisX)) {
        this.axisX = data().deepCopy(fields()[16].schema(), other.axisX);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.axisY)) {
        this.axisY = data().deepCopy(fields()[17].schema(), other.axisY);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.axisZ)) {
        this.axisZ = data().deepCopy(fields()[18].schema(), other.axisZ);
        fieldSetFlags()[18] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OBDAttributes instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.OBDAttributes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.numberOfDTC)) {
        this.numberOfDTC = data().deepCopy(fields()[0].schema(), other.numberOfDTC);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.engineLoad)) {
        this.engineLoad = data().deepCopy(fields()[1].schema(), other.engineLoad);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coolantTemperature)) {
        this.coolantTemperature = data().deepCopy(fields()[2].schema(), other.coolantTemperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fuelPressure)) {
        this.fuelPressure = data().deepCopy(fields()[3].schema(), other.fuelPressure);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.engineRPM)) {
        this.engineRPM = data().deepCopy(fields()[4].schema(), other.engineRPM);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.intakeTemp)) {
        this.intakeTemp = data().deepCopy(fields()[5].schema(), other.intakeTemp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.vehicleSpeed)) {
        this.vehicleSpeed = data().deepCopy(fields()[6].schema(), other.vehicleSpeed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.throttlePosition)) {
        this.throttlePosition = data().deepCopy(fields()[7].schema(), other.throttlePosition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.runTimeSinceEngineStart)) {
        this.runTimeSinceEngineStart = data().deepCopy(fields()[8].schema(), other.runTimeSinceEngineStart);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.fuelLevel)) {
        this.fuelLevel = data().deepCopy(fields()[9].schema(), other.fuelLevel);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.totalOdometer)) {
        this.totalOdometer = data().deepCopy(fields()[10].schema(), other.totalOdometer);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.distanceTravelledMILOn)) {
        this.distanceTravelledMILOn = data().deepCopy(fields()[11].schema(), other.distanceTravelledMILOn);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.timeRunWithMILOn)) {
        this.timeRunWithMILOn = data().deepCopy(fields()[12].schema(), other.timeRunWithMILOn);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.engineOilTemp)) {
        this.engineOilTemp = data().deepCopy(fields()[13].schema(), other.engineOilTemp);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.engineFuelRate)) {
        this.engineFuelRate = data().deepCopy(fields()[14].schema(), other.engineFuelRate);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.movement)) {
        this.movement = data().deepCopy(fields()[15].schema(), other.movement);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.axisX)) {
        this.axisX = data().deepCopy(fields()[16].schema(), other.axisX);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.axisY)) {
        this.axisY = data().deepCopy(fields()[17].schema(), other.axisY);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.axisZ)) {
        this.axisZ = data().deepCopy(fields()[18].schema(), other.axisZ);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'numberOfDTC' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOfDTC() {
      return numberOfDTC;
    }

    /**
      * Sets the value of the 'numberOfDTC' field.
      * @param value The value of 'numberOfDTC'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setNumberOfDTC(java.lang.Integer value) {
      validate(fields()[0], value);
      this.numberOfDTC = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfDTC' field has been set.
      * @return True if the 'numberOfDTC' field has been set, false otherwise.
      */
    public boolean hasNumberOfDTC() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'numberOfDTC' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearNumberOfDTC() {
      numberOfDTC = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineLoad' field.
      * @return The value.
      */
    public java.lang.Double getEngineLoad() {
      return engineLoad;
    }

    /**
      * Sets the value of the 'engineLoad' field.
      * @param value The value of 'engineLoad'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setEngineLoad(java.lang.Double value) {
      validate(fields()[1], value);
      this.engineLoad = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'engineLoad' field has been set.
      * @return True if the 'engineLoad' field has been set, false otherwise.
      */
    public boolean hasEngineLoad() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'engineLoad' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearEngineLoad() {
      engineLoad = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'coolantTemperature' field.
      * @return The value.
      */
    public java.lang.Double getCoolantTemperature() {
      return coolantTemperature;
    }

    /**
      * Sets the value of the 'coolantTemperature' field.
      * @param value The value of 'coolantTemperature'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setCoolantTemperature(java.lang.Double value) {
      validate(fields()[2], value);
      this.coolantTemperature = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'coolantTemperature' field has been set.
      * @return True if the 'coolantTemperature' field has been set, false otherwise.
      */
    public boolean hasCoolantTemperature() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'coolantTemperature' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearCoolantTemperature() {
      coolantTemperature = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fuelPressure' field.
      * @return The value.
      */
    public java.lang.Double getFuelPressure() {
      return fuelPressure;
    }

    /**
      * Sets the value of the 'fuelPressure' field.
      * @param value The value of 'fuelPressure'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setFuelPressure(java.lang.Double value) {
      validate(fields()[3], value);
      this.fuelPressure = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fuelPressure' field has been set.
      * @return True if the 'fuelPressure' field has been set, false otherwise.
      */
    public boolean hasFuelPressure() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fuelPressure' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearFuelPressure() {
      fuelPressure = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineRPM' field.
      * @return The value.
      */
    public java.lang.Double getEngineRPM() {
      return engineRPM;
    }

    /**
      * Sets the value of the 'engineRPM' field.
      * @param value The value of 'engineRPM'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setEngineRPM(java.lang.Double value) {
      validate(fields()[4], value);
      this.engineRPM = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'engineRPM' field has been set.
      * @return True if the 'engineRPM' field has been set, false otherwise.
      */
    public boolean hasEngineRPM() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'engineRPM' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearEngineRPM() {
      engineRPM = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'intakeTemp' field.
      * @return The value.
      */
    public java.lang.Double getIntakeTemp() {
      return intakeTemp;
    }

    /**
      * Sets the value of the 'intakeTemp' field.
      * @param value The value of 'intakeTemp'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setIntakeTemp(java.lang.Double value) {
      validate(fields()[5], value);
      this.intakeTemp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'intakeTemp' field has been set.
      * @return True if the 'intakeTemp' field has been set, false otherwise.
      */
    public boolean hasIntakeTemp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'intakeTemp' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearIntakeTemp() {
      intakeTemp = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleSpeed' field.
      * @return The value.
      */
    public java.lang.Double getVehicleSpeed() {
      return vehicleSpeed;
    }

    /**
      * Sets the value of the 'vehicleSpeed' field.
      * @param value The value of 'vehicleSpeed'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setVehicleSpeed(java.lang.Double value) {
      validate(fields()[6], value);
      this.vehicleSpeed = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleSpeed' field has been set.
      * @return True if the 'vehicleSpeed' field has been set, false otherwise.
      */
    public boolean hasVehicleSpeed() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'vehicleSpeed' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearVehicleSpeed() {
      vehicleSpeed = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'throttlePosition' field.
      * @return The value.
      */
    public java.lang.Double getThrottlePosition() {
      return throttlePosition;
    }

    /**
      * Sets the value of the 'throttlePosition' field.
      * @param value The value of 'throttlePosition'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setThrottlePosition(java.lang.Double value) {
      validate(fields()[7], value);
      this.throttlePosition = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'throttlePosition' field has been set.
      * @return True if the 'throttlePosition' field has been set, false otherwise.
      */
    public boolean hasThrottlePosition() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'throttlePosition' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearThrottlePosition() {
      throttlePosition = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'runTimeSinceEngineStart' field.
      * @return The value.
      */
    public java.lang.Long getRunTimeSinceEngineStart() {
      return runTimeSinceEngineStart;
    }

    /**
      * Sets the value of the 'runTimeSinceEngineStart' field.
      * @param value The value of 'runTimeSinceEngineStart'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setRunTimeSinceEngineStart(java.lang.Long value) {
      validate(fields()[8], value);
      this.runTimeSinceEngineStart = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'runTimeSinceEngineStart' field has been set.
      * @return True if the 'runTimeSinceEngineStart' field has been set, false otherwise.
      */
    public boolean hasRunTimeSinceEngineStart() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'runTimeSinceEngineStart' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearRunTimeSinceEngineStart() {
      runTimeSinceEngineStart = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'fuelLevel' field.
      * @return The value.
      */
    public java.lang.Double getFuelLevel() {
      return fuelLevel;
    }

    /**
      * Sets the value of the 'fuelLevel' field.
      * @param value The value of 'fuelLevel'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setFuelLevel(java.lang.Double value) {
      validate(fields()[9], value);
      this.fuelLevel = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'fuelLevel' field has been set.
      * @return True if the 'fuelLevel' field has been set, false otherwise.
      */
    public boolean hasFuelLevel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'fuelLevel' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearFuelLevel() {
      fuelLevel = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalOdometer' field.
      * @return The value.
      */
    public java.lang.Double getTotalOdometer() {
      return totalOdometer;
    }

    /**
      * Sets the value of the 'totalOdometer' field.
      * @param value The value of 'totalOdometer'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setTotalOdometer(java.lang.Double value) {
      validate(fields()[10], value);
      this.totalOdometer = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'totalOdometer' field has been set.
      * @return True if the 'totalOdometer' field has been set, false otherwise.
      */
    public boolean hasTotalOdometer() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'totalOdometer' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearTotalOdometer() {
      totalOdometer = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'distanceTravelledMILOn' field.
      * @return The value.
      */
    public java.lang.Double getDistanceTravelledMILOn() {
      return distanceTravelledMILOn;
    }

    /**
      * Sets the value of the 'distanceTravelledMILOn' field.
      * @param value The value of 'distanceTravelledMILOn'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setDistanceTravelledMILOn(java.lang.Double value) {
      validate(fields()[11], value);
      this.distanceTravelledMILOn = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'distanceTravelledMILOn' field has been set.
      * @return True if the 'distanceTravelledMILOn' field has been set, false otherwise.
      */
    public boolean hasDistanceTravelledMILOn() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'distanceTravelledMILOn' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearDistanceTravelledMILOn() {
      distanceTravelledMILOn = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeRunWithMILOn' field.
      * @return The value.
      */
    public java.lang.Long getTimeRunWithMILOn() {
      return timeRunWithMILOn;
    }

    /**
      * Sets the value of the 'timeRunWithMILOn' field.
      * @param value The value of 'timeRunWithMILOn'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setTimeRunWithMILOn(java.lang.Long value) {
      validate(fields()[12], value);
      this.timeRunWithMILOn = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'timeRunWithMILOn' field has been set.
      * @return True if the 'timeRunWithMILOn' field has been set, false otherwise.
      */
    public boolean hasTimeRunWithMILOn() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'timeRunWithMILOn' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearTimeRunWithMILOn() {
      timeRunWithMILOn = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineOilTemp' field.
      * @return The value.
      */
    public java.lang.Double getEngineOilTemp() {
      return engineOilTemp;
    }

    /**
      * Sets the value of the 'engineOilTemp' field.
      * @param value The value of 'engineOilTemp'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setEngineOilTemp(java.lang.Double value) {
      validate(fields()[13], value);
      this.engineOilTemp = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'engineOilTemp' field has been set.
      * @return True if the 'engineOilTemp' field has been set, false otherwise.
      */
    public boolean hasEngineOilTemp() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'engineOilTemp' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearEngineOilTemp() {
      engineOilTemp = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineFuelRate' field.
      * @return The value.
      */
    public java.lang.Double getEngineFuelRate() {
      return engineFuelRate;
    }

    /**
      * Sets the value of the 'engineFuelRate' field.
      * @param value The value of 'engineFuelRate'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setEngineFuelRate(java.lang.Double value) {
      validate(fields()[14], value);
      this.engineFuelRate = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'engineFuelRate' field has been set.
      * @return True if the 'engineFuelRate' field has been set, false otherwise.
      */
    public boolean hasEngineFuelRate() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'engineFuelRate' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearEngineFuelRate() {
      engineFuelRate = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'movement' field.
      * @return The value.
      */
    public java.lang.Integer getMovement() {
      return movement;
    }

    /**
      * Sets the value of the 'movement' field.
      * @param value The value of 'movement'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setMovement(java.lang.Integer value) {
      validate(fields()[15], value);
      this.movement = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'movement' field has been set.
      * @return True if the 'movement' field has been set, false otherwise.
      */
    public boolean hasMovement() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'movement' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearMovement() {
      movement = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'axisX' field.
      * @return The value.
      */
    public java.lang.Double getAxisX() {
      return axisX;
    }

    /**
      * Sets the value of the 'axisX' field.
      * @param value The value of 'axisX'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setAxisX(java.lang.Double value) {
      validate(fields()[16], value);
      this.axisX = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'axisX' field has been set.
      * @return True if the 'axisX' field has been set, false otherwise.
      */
    public boolean hasAxisX() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'axisX' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearAxisX() {
      axisX = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'axisY' field.
      * @return The value.
      */
    public java.lang.Double getAxisY() {
      return axisY;
    }

    /**
      * Sets the value of the 'axisY' field.
      * @param value The value of 'axisY'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setAxisY(java.lang.Double value) {
      validate(fields()[17], value);
      this.axisY = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'axisY' field has been set.
      * @return True if the 'axisY' field has been set, false otherwise.
      */
    public boolean hasAxisY() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'axisY' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearAxisY() {
      axisY = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'axisZ' field.
      * @return The value.
      */
    public java.lang.Double getAxisZ() {
      return axisZ;
    }

    /**
      * Sets the value of the 'axisZ' field.
      * @param value The value of 'axisZ'.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder setAxisZ(java.lang.Double value) {
      validate(fields()[18], value);
      this.axisZ = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'axisZ' field has been set.
      * @return True if the 'axisZ' field has been set, false otherwise.
      */
    public boolean hasAxisZ() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'axisZ' field.
      * @return This builder.
      */
    public com.fretron.Model.OBDAttributes.Builder clearAxisZ() {
      axisZ = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    public OBDAttributes build() {
      try {
        OBDAttributes record = new OBDAttributes();
        record.numberOfDTC = fieldSetFlags()[0] ? this.numberOfDTC : (java.lang.Integer) defaultValue(fields()[0]);
        record.engineLoad = fieldSetFlags()[1] ? this.engineLoad : (java.lang.Double) defaultValue(fields()[1]);
        record.coolantTemperature = fieldSetFlags()[2] ? this.coolantTemperature : (java.lang.Double) defaultValue(fields()[2]);
        record.fuelPressure = fieldSetFlags()[3] ? this.fuelPressure : (java.lang.Double) defaultValue(fields()[3]);
        record.engineRPM = fieldSetFlags()[4] ? this.engineRPM : (java.lang.Double) defaultValue(fields()[4]);
        record.intakeTemp = fieldSetFlags()[5] ? this.intakeTemp : (java.lang.Double) defaultValue(fields()[5]);
        record.vehicleSpeed = fieldSetFlags()[6] ? this.vehicleSpeed : (java.lang.Double) defaultValue(fields()[6]);
        record.throttlePosition = fieldSetFlags()[7] ? this.throttlePosition : (java.lang.Double) defaultValue(fields()[7]);
        record.runTimeSinceEngineStart = fieldSetFlags()[8] ? this.runTimeSinceEngineStart : (java.lang.Long) defaultValue(fields()[8]);
        record.fuelLevel = fieldSetFlags()[9] ? this.fuelLevel : (java.lang.Double) defaultValue(fields()[9]);
        record.totalOdometer = fieldSetFlags()[10] ? this.totalOdometer : (java.lang.Double) defaultValue(fields()[10]);
        record.distanceTravelledMILOn = fieldSetFlags()[11] ? this.distanceTravelledMILOn : (java.lang.Double) defaultValue(fields()[11]);
        record.timeRunWithMILOn = fieldSetFlags()[12] ? this.timeRunWithMILOn : (java.lang.Long) defaultValue(fields()[12]);
        record.engineOilTemp = fieldSetFlags()[13] ? this.engineOilTemp : (java.lang.Double) defaultValue(fields()[13]);
        record.engineFuelRate = fieldSetFlags()[14] ? this.engineFuelRate : (java.lang.Double) defaultValue(fields()[14]);
        record.movement = fieldSetFlags()[15] ? this.movement : (java.lang.Integer) defaultValue(fields()[15]);
        record.axisX = fieldSetFlags()[16] ? this.axisX : (java.lang.Double) defaultValue(fields()[16]);
        record.axisY = fieldSetFlags()[17] ? this.axisY : (java.lang.Double) defaultValue(fields()[17]);
        record.axisZ = fieldSetFlags()[18] ? this.axisZ : (java.lang.Double) defaultValue(fields()[18]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
