/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContractClause extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2655132901421250846L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContractClause\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"clauseNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"pageNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"text\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customerClauseNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isApplicable\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String clauseNumber;
  @Deprecated public java.lang.String pageNumber;
  @Deprecated public java.lang.String text;
  @Deprecated public java.lang.String customerClauseNumber;
  @Deprecated public java.lang.Boolean isApplicable;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContractClause() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param clauseNumber The new value for clauseNumber
   * @param pageNumber The new value for pageNumber
   * @param text The new value for text
   * @param customerClauseNumber The new value for customerClauseNumber
   * @param isApplicable The new value for isApplicable
   */
  public ContractClause(java.lang.String name, java.lang.String clauseNumber, java.lang.String pageNumber, java.lang.String text, java.lang.String customerClauseNumber, java.lang.Boolean isApplicable) {
    this.name = name;
    this.clauseNumber = clauseNumber;
    this.pageNumber = pageNumber;
    this.text = text;
    this.customerClauseNumber = customerClauseNumber;
    this.isApplicable = isApplicable;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return clauseNumber;
    case 2: return pageNumber;
    case 3: return text;
    case 4: return customerClauseNumber;
    case 5: return isApplicable;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: clauseNumber = (java.lang.String)value$; break;
    case 2: pageNumber = (java.lang.String)value$; break;
    case 3: text = (java.lang.String)value$; break;
    case 4: customerClauseNumber = (java.lang.String)value$; break;
    case 5: isApplicable = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'clauseNumber' field.
   * @return The value of the 'clauseNumber' field.
   */
  public java.lang.String getClauseNumber() {
    return clauseNumber;
  }

  /**
   * Sets the value of the 'clauseNumber' field.
   * @param value the value to set.
   */
  public void setClauseNumber(java.lang.String value) {
    this.clauseNumber = value;
  }

  /**
   * Gets the value of the 'pageNumber' field.
   * @return The value of the 'pageNumber' field.
   */
  public java.lang.String getPageNumber() {
    return pageNumber;
  }

  /**
   * Sets the value of the 'pageNumber' field.
   * @param value the value to set.
   */
  public void setPageNumber(java.lang.String value) {
    this.pageNumber = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'customerClauseNumber' field.
   * @return The value of the 'customerClauseNumber' field.
   */
  public java.lang.String getCustomerClauseNumber() {
    return customerClauseNumber;
  }

  /**
   * Sets the value of the 'customerClauseNumber' field.
   * @param value the value to set.
   */
  public void setCustomerClauseNumber(java.lang.String value) {
    this.customerClauseNumber = value;
  }

  /**
   * Gets the value of the 'isApplicable' field.
   * @return The value of the 'isApplicable' field.
   */
  public java.lang.Boolean getIsApplicable() {
    return isApplicable;
  }

  /**
   * Sets the value of the 'isApplicable' field.
   * @param value the value to set.
   */
  public void setIsApplicable(java.lang.Boolean value) {
    this.isApplicable = value;
  }

  /**
   * Creates a new ContractClause RecordBuilder.
   * @return A new ContractClause RecordBuilder
   */
  public static com.fretron.Model.ContractClause.Builder newBuilder() {
    return new com.fretron.Model.ContractClause.Builder();
  }

  /**
   * Creates a new ContractClause RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContractClause RecordBuilder
   */
  public static com.fretron.Model.ContractClause.Builder newBuilder(com.fretron.Model.ContractClause.Builder other) {
    return new com.fretron.Model.ContractClause.Builder(other);
  }

  /**
   * Creates a new ContractClause RecordBuilder by copying an existing ContractClause instance.
   * @param other The existing instance to copy.
   * @return A new ContractClause RecordBuilder
   */
  public static com.fretron.Model.ContractClause.Builder newBuilder(com.fretron.Model.ContractClause other) {
    return new com.fretron.Model.ContractClause.Builder(other);
  }

  /**
   * RecordBuilder for ContractClause instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContractClause>
    implements org.apache.avro.data.RecordBuilder<ContractClause> {

    private java.lang.String name;
    private java.lang.String clauseNumber;
    private java.lang.String pageNumber;
    private java.lang.String text;
    private java.lang.String customerClauseNumber;
    private java.lang.Boolean isApplicable;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ContractClause.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.clauseNumber)) {
        this.clauseNumber = data().deepCopy(fields()[1].schema(), other.clauseNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pageNumber)) {
        this.pageNumber = data().deepCopy(fields()[2].schema(), other.pageNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.text)) {
        this.text = data().deepCopy(fields()[3].schema(), other.text);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.customerClauseNumber)) {
        this.customerClauseNumber = data().deepCopy(fields()[4].schema(), other.customerClauseNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isApplicable)) {
        this.isApplicable = data().deepCopy(fields()[5].schema(), other.isApplicable);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ContractClause instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ContractClause other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.clauseNumber)) {
        this.clauseNumber = data().deepCopy(fields()[1].schema(), other.clauseNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pageNumber)) {
        this.pageNumber = data().deepCopy(fields()[2].schema(), other.pageNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.text)) {
        this.text = data().deepCopy(fields()[3].schema(), other.text);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.customerClauseNumber)) {
        this.customerClauseNumber = data().deepCopy(fields()[4].schema(), other.customerClauseNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isApplicable)) {
        this.isApplicable = data().deepCopy(fields()[5].schema(), other.isApplicable);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'clauseNumber' field.
      * @return The value.
      */
    public java.lang.String getClauseNumber() {
      return clauseNumber;
    }

    /**
      * Sets the value of the 'clauseNumber' field.
      * @param value The value of 'clauseNumber'.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder setClauseNumber(java.lang.String value) {
      validate(fields()[1], value);
      this.clauseNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'clauseNumber' field has been set.
      * @return True if the 'clauseNumber' field has been set, false otherwise.
      */
    public boolean hasClauseNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'clauseNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder clearClauseNumber() {
      clauseNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pageNumber' field.
      * @return The value.
      */
    public java.lang.String getPageNumber() {
      return pageNumber;
    }

    /**
      * Sets the value of the 'pageNumber' field.
      * @param value The value of 'pageNumber'.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder setPageNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.pageNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pageNumber' field has been set.
      * @return True if the 'pageNumber' field has been set, false otherwise.
      */
    public boolean hasPageNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pageNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder clearPageNumber() {
      pageNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.String getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder setText(java.lang.String value) {
      validate(fields()[3], value);
      this.text = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder clearText() {
      text = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerClauseNumber' field.
      * @return The value.
      */
    public java.lang.String getCustomerClauseNumber() {
      return customerClauseNumber;
    }

    /**
      * Sets the value of the 'customerClauseNumber' field.
      * @param value The value of 'customerClauseNumber'.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder setCustomerClauseNumber(java.lang.String value) {
      validate(fields()[4], value);
      this.customerClauseNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'customerClauseNumber' field has been set.
      * @return True if the 'customerClauseNumber' field has been set, false otherwise.
      */
    public boolean hasCustomerClauseNumber() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'customerClauseNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder clearCustomerClauseNumber() {
      customerClauseNumber = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isApplicable' field.
      * @return The value.
      */
    public java.lang.Boolean getIsApplicable() {
      return isApplicable;
    }

    /**
      * Sets the value of the 'isApplicable' field.
      * @param value The value of 'isApplicable'.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder setIsApplicable(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.isApplicable = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isApplicable' field has been set.
      * @return True if the 'isApplicable' field has been set, false otherwise.
      */
    public boolean hasIsApplicable() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isApplicable' field.
      * @return This builder.
      */
    public com.fretron.Model.ContractClause.Builder clearIsApplicable() {
      isApplicable = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public ContractClause build() {
      try {
        ContractClause record = new ContractClause();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.clauseNumber = fieldSetFlags()[1] ? this.clauseNumber : (java.lang.String) defaultValue(fields()[1]);
        record.pageNumber = fieldSetFlags()[2] ? this.pageNumber : (java.lang.String) defaultValue(fields()[2]);
        record.text = fieldSetFlags()[3] ? this.text : (java.lang.String) defaultValue(fields()[3]);
        record.customerClauseNumber = fieldSetFlags()[4] ? this.customerClauseNumber : (java.lang.String) defaultValue(fields()[4]);
        record.isApplicable = fieldSetFlags()[5] ? this.isApplicable : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
