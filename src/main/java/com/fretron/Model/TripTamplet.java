/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TripTamplet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8403063837001693183L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TripTamplet\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"origin\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FreightLocation\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"geofence\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geofence\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundry\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Circle\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"radius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GeofenceType\",\"symbols\":[\"Proximity\",\"Polygon\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"favouriteOf\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"FreightLocType\",\"symbols\":[\"Private\",\"Public\"]}],\"default\":null},{\"name\":\"isDeleted\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",\"FreightLocation\"],\"default\":null},{\"name\":\"transitDays\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"distance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"quantity\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String orgId;
  @Deprecated public com.fretron.Model.FreightLocation origin;
  @Deprecated public com.fretron.Model.FreightLocation destination;
  @Deprecated public java.lang.Integer transitDays;
  @Deprecated public java.lang.Double distance;
  @Deprecated public java.lang.String material;
  @Deprecated public java.lang.Double quantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TripTamplet() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param orgId The new value for orgId
   * @param origin The new value for origin
   * @param destination The new value for destination
   * @param transitDays The new value for transitDays
   * @param distance The new value for distance
   * @param material The new value for material
   * @param quantity The new value for quantity
   */
  public TripTamplet(java.lang.String uuid, java.lang.String orgId, com.fretron.Model.FreightLocation origin, com.fretron.Model.FreightLocation destination, java.lang.Integer transitDays, java.lang.Double distance, java.lang.String material, java.lang.Double quantity) {
    this.uuid = uuid;
    this.orgId = orgId;
    this.origin = origin;
    this.destination = destination;
    this.transitDays = transitDays;
    this.distance = distance;
    this.material = material;
    this.quantity = quantity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return orgId;
    case 2: return origin;
    case 3: return destination;
    case 4: return transitDays;
    case 5: return distance;
    case 6: return material;
    case 7: return quantity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: orgId = (java.lang.String)value$; break;
    case 2: origin = (com.fretron.Model.FreightLocation)value$; break;
    case 3: destination = (com.fretron.Model.FreightLocation)value$; break;
    case 4: transitDays = (java.lang.Integer)value$; break;
    case 5: distance = (java.lang.Double)value$; break;
    case 6: material = (java.lang.String)value$; break;
    case 7: quantity = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public java.lang.String getOrgId() {
    return orgId;
  }

  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(java.lang.String value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'origin' field.
   * @return The value of the 'origin' field.
   */
  public com.fretron.Model.FreightLocation getOrigin() {
    return origin;
  }

  /**
   * Sets the value of the 'origin' field.
   * @param value the value to set.
   */
  public void setOrigin(com.fretron.Model.FreightLocation value) {
    this.origin = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public com.fretron.Model.FreightLocation getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(com.fretron.Model.FreightLocation value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'transitDays' field.
   * @return The value of the 'transitDays' field.
   */
  public java.lang.Integer getTransitDays() {
    return transitDays;
  }

  /**
   * Sets the value of the 'transitDays' field.
   * @param value the value to set.
   */
  public void setTransitDays(java.lang.Integer value) {
    this.transitDays = value;
  }

  /**
   * Gets the value of the 'distance' field.
   * @return The value of the 'distance' field.
   */
  public java.lang.Double getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(java.lang.Double value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'material' field.
   * @return The value of the 'material' field.
   */
  public java.lang.String getMaterial() {
    return material;
  }

  /**
   * Sets the value of the 'material' field.
   * @param value the value to set.
   */
  public void setMaterial(java.lang.String value) {
    this.material = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.Double getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Double value) {
    this.quantity = value;
  }

  /**
   * Creates a new TripTamplet RecordBuilder.
   * @return A new TripTamplet RecordBuilder
   */
  public static com.fretron.Model.TripTamplet.Builder newBuilder() {
    return new com.fretron.Model.TripTamplet.Builder();
  }

  /**
   * Creates a new TripTamplet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TripTamplet RecordBuilder
   */
  public static com.fretron.Model.TripTamplet.Builder newBuilder(com.fretron.Model.TripTamplet.Builder other) {
    return new com.fretron.Model.TripTamplet.Builder(other);
  }

  /**
   * Creates a new TripTamplet RecordBuilder by copying an existing TripTamplet instance.
   * @param other The existing instance to copy.
   * @return A new TripTamplet RecordBuilder
   */
  public static com.fretron.Model.TripTamplet.Builder newBuilder(com.fretron.Model.TripTamplet other) {
    return new com.fretron.Model.TripTamplet.Builder(other);
  }

  /**
   * RecordBuilder for TripTamplet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TripTamplet>
    implements org.apache.avro.data.RecordBuilder<TripTamplet> {

    private java.lang.String uuid;
    private java.lang.String orgId;
    private com.fretron.Model.FreightLocation origin;
    private com.fretron.Model.FreightLocation.Builder originBuilder;
    private com.fretron.Model.FreightLocation destination;
    private com.fretron.Model.FreightLocation.Builder destinationBuilder;
    private java.lang.Integer transitDays;
    private java.lang.Double distance;
    private java.lang.String material;
    private java.lang.Double quantity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.TripTamplet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.origin)) {
        this.origin = data().deepCopy(fields()[2].schema(), other.origin);
        fieldSetFlags()[2] = true;
      }
      if (other.hasOriginBuilder()) {
        this.originBuilder = com.fretron.Model.FreightLocation.newBuilder(other.getOriginBuilder());
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      if (other.hasDestinationBuilder()) {
        this.destinationBuilder = com.fretron.Model.FreightLocation.newBuilder(other.getDestinationBuilder());
      }
      if (isValidValue(fields()[4], other.transitDays)) {
        this.transitDays = data().deepCopy(fields()[4].schema(), other.transitDays);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.distance)) {
        this.distance = data().deepCopy(fields()[5].schema(), other.distance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.material)) {
        this.material = data().deepCopy(fields()[6].schema(), other.material);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.quantity)) {
        this.quantity = data().deepCopy(fields()[7].schema(), other.quantity);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TripTamplet instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.TripTamplet other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orgId)) {
        this.orgId = data().deepCopy(fields()[1].schema(), other.orgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.origin)) {
        this.origin = data().deepCopy(fields()[2].schema(), other.origin);
        fieldSetFlags()[2] = true;
      }
      this.originBuilder = null;
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      this.destinationBuilder = null;
      if (isValidValue(fields()[4], other.transitDays)) {
        this.transitDays = data().deepCopy(fields()[4].schema(), other.transitDays);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.distance)) {
        this.distance = data().deepCopy(fields()[5].schema(), other.distance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.material)) {
        this.material = data().deepCopy(fields()[6].schema(), other.material);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.quantity)) {
        this.quantity = data().deepCopy(fields()[7].schema(), other.quantity);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public java.lang.String getOrgId() {
      return orgId;
    }

    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder setOrgId(java.lang.String value) {
      validate(fields()[1], value);
      this.orgId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'origin' field.
      * @return The value.
      */
    public com.fretron.Model.FreightLocation getOrigin() {
      return origin;
    }

    /**
      * Sets the value of the 'origin' field.
      * @param value The value of 'origin'.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder setOrigin(com.fretron.Model.FreightLocation value) {
      validate(fields()[2], value);
      this.originBuilder = null;
      this.origin = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'origin' field has been set.
      * @return True if the 'origin' field has been set, false otherwise.
      */
    public boolean hasOrigin() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'origin' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.FreightLocation.Builder getOriginBuilder() {
      if (originBuilder == null) {
        if (hasOrigin()) {
          setOriginBuilder(com.fretron.Model.FreightLocation.newBuilder(origin));
        } else {
          setOriginBuilder(com.fretron.Model.FreightLocation.newBuilder());
        }
      }
      return originBuilder;
    }

    /**
     * Sets the Builder instance for the 'origin' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripTamplet.Builder setOriginBuilder(com.fretron.Model.FreightLocation.Builder value) {
      clearOrigin();
      originBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'origin' field has an active Builder instance
     * @return True if the 'origin' field has an active Builder instance
     */
    public boolean hasOriginBuilder() {
      return originBuilder != null;
    }

    /**
      * Clears the value of the 'origin' field.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder clearOrigin() {
      origin = null;
      originBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public com.fretron.Model.FreightLocation getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder setDestination(com.fretron.Model.FreightLocation value) {
      validate(fields()[3], value);
      this.destinationBuilder = null;
      this.destination = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'destination' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.FreightLocation.Builder getDestinationBuilder() {
      if (destinationBuilder == null) {
        if (hasDestination()) {
          setDestinationBuilder(com.fretron.Model.FreightLocation.newBuilder(destination));
        } else {
          setDestinationBuilder(com.fretron.Model.FreightLocation.newBuilder());
        }
      }
      return destinationBuilder;
    }

    /**
     * Sets the Builder instance for the 'destination' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.TripTamplet.Builder setDestinationBuilder(com.fretron.Model.FreightLocation.Builder value) {
      clearDestination();
      destinationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'destination' field has an active Builder instance
     * @return True if the 'destination' field has an active Builder instance
     */
    public boolean hasDestinationBuilder() {
      return destinationBuilder != null;
    }

    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder clearDestination() {
      destination = null;
      destinationBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transitDays' field.
      * @return The value.
      */
    public java.lang.Integer getTransitDays() {
      return transitDays;
    }

    /**
      * Sets the value of the 'transitDays' field.
      * @param value The value of 'transitDays'.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder setTransitDays(java.lang.Integer value) {
      validate(fields()[4], value);
      this.transitDays = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transitDays' field has been set.
      * @return True if the 'transitDays' field has been set, false otherwise.
      */
    public boolean hasTransitDays() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transitDays' field.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder clearTransitDays() {
      transitDays = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * @return The value.
      */
    public java.lang.Double getDistance() {
      return distance;
    }

    /**
      * Sets the value of the 'distance' field.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder setDistance(java.lang.Double value) {
      validate(fields()[5], value);
      this.distance = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'distance' field.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder clearDistance() {
      distance = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'material' field.
      * @return The value.
      */
    public java.lang.String getMaterial() {
      return material;
    }

    /**
      * Sets the value of the 'material' field.
      * @param value The value of 'material'.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder setMaterial(java.lang.String value) {
      validate(fields()[6], value);
      this.material = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'material' field has been set.
      * @return True if the 'material' field has been set, false otherwise.
      */
    public boolean hasMaterial() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'material' field.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder clearMaterial() {
      material = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.Double getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder setQuantity(java.lang.Double value) {
      validate(fields()[7], value);
      this.quantity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.fretron.Model.TripTamplet.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public TripTamplet build() {
      try {
        TripTamplet record = new TripTamplet();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.orgId = fieldSetFlags()[1] ? this.orgId : (java.lang.String) defaultValue(fields()[1]);
        if (originBuilder != null) {
          record.origin = this.originBuilder.build();
        } else {
          record.origin = fieldSetFlags()[2] ? this.origin : (com.fretron.Model.FreightLocation) defaultValue(fields()[2]);
        }
        if (destinationBuilder != null) {
          record.destination = this.destinationBuilder.build();
        } else {
          record.destination = fieldSetFlags()[3] ? this.destination : (com.fretron.Model.FreightLocation) defaultValue(fields()[3]);
        }
        record.transitDays = fieldSetFlags()[4] ? this.transitDays : (java.lang.Integer) defaultValue(fields()[4]);
        record.distance = fieldSetFlags()[5] ? this.distance : (java.lang.Double) defaultValue(fields()[5]);
        record.material = fieldSetFlags()[6] ? this.material : (java.lang.String) defaultValue(fields()[6]);
        record.quantity = fieldSetFlags()[7] ? this.quantity : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
