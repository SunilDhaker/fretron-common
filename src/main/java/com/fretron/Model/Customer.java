/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -951034612057606341L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"contactPersonName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"emailAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mobileNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"organizationName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"organizationBillingAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"organizationShippingAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"typeOfCustomer\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"isDeleted\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"createTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"updateTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String contactPersonName;
  @Deprecated public java.lang.String emailAddress;
  @Deprecated public java.lang.String mobileNumber;
  @Deprecated public java.lang.String organizationName;
  @Deprecated public java.lang.String organizationBillingAddress;
  @Deprecated public java.lang.String organizationShippingAddress;
  @Deprecated public java.lang.String typeOfCustomer;
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String isDeleted;
  @Deprecated public java.lang.Long createTime;
  @Deprecated public java.lang.Long updateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param contactPersonName The new value for contactPersonName
   * @param emailAddress The new value for emailAddress
   * @param mobileNumber The new value for mobileNumber
   * @param organizationName The new value for organizationName
   * @param organizationBillingAddress The new value for organizationBillingAddress
   * @param organizationShippingAddress The new value for organizationShippingAddress
   * @param typeOfCustomer The new value for typeOfCustomer
   * @param uuid The new value for uuid
   * @param isDeleted The new value for isDeleted
   * @param createTime The new value for createTime
   * @param updateTime The new value for updateTime
   */
  public Customer(java.lang.String contactPersonName, java.lang.String emailAddress, java.lang.String mobileNumber, java.lang.String organizationName, java.lang.String organizationBillingAddress, java.lang.String organizationShippingAddress, java.lang.String typeOfCustomer, java.lang.String uuid, java.lang.String isDeleted, java.lang.Long createTime, java.lang.Long updateTime) {
    this.contactPersonName = contactPersonName;
    this.emailAddress = emailAddress;
    this.mobileNumber = mobileNumber;
    this.organizationName = organizationName;
    this.organizationBillingAddress = organizationBillingAddress;
    this.organizationShippingAddress = organizationShippingAddress;
    this.typeOfCustomer = typeOfCustomer;
    this.uuid = uuid;
    this.isDeleted = isDeleted;
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return contactPersonName;
    case 1: return emailAddress;
    case 2: return mobileNumber;
    case 3: return organizationName;
    case 4: return organizationBillingAddress;
    case 5: return organizationShippingAddress;
    case 6: return typeOfCustomer;
    case 7: return uuid;
    case 8: return isDeleted;
    case 9: return createTime;
    case 10: return updateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: contactPersonName = (java.lang.String)value$; break;
    case 1: emailAddress = (java.lang.String)value$; break;
    case 2: mobileNumber = (java.lang.String)value$; break;
    case 3: organizationName = (java.lang.String)value$; break;
    case 4: organizationBillingAddress = (java.lang.String)value$; break;
    case 5: organizationShippingAddress = (java.lang.String)value$; break;
    case 6: typeOfCustomer = (java.lang.String)value$; break;
    case 7: uuid = (java.lang.String)value$; break;
    case 8: isDeleted = (java.lang.String)value$; break;
    case 9: createTime = (java.lang.Long)value$; break;
    case 10: updateTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'contactPersonName' field.
   * @return The value of the 'contactPersonName' field.
   */
  public java.lang.String getContactPersonName() {
    return contactPersonName;
  }

  /**
   * Sets the value of the 'contactPersonName' field.
   * @param value the value to set.
   */
  public void setContactPersonName(java.lang.String value) {
    this.contactPersonName = value;
  }

  /**
   * Gets the value of the 'emailAddress' field.
   * @return The value of the 'emailAddress' field.
   */
  public java.lang.String getEmailAddress() {
    return emailAddress;
  }

  /**
   * Sets the value of the 'emailAddress' field.
   * @param value the value to set.
   */
  public void setEmailAddress(java.lang.String value) {
    this.emailAddress = value;
  }

  /**
   * Gets the value of the 'mobileNumber' field.
   * @return The value of the 'mobileNumber' field.
   */
  public java.lang.String getMobileNumber() {
    return mobileNumber;
  }

  /**
   * Sets the value of the 'mobileNumber' field.
   * @param value the value to set.
   */
  public void setMobileNumber(java.lang.String value) {
    this.mobileNumber = value;
  }

  /**
   * Gets the value of the 'organizationName' field.
   * @return The value of the 'organizationName' field.
   */
  public java.lang.String getOrganizationName() {
    return organizationName;
  }

  /**
   * Sets the value of the 'organizationName' field.
   * @param value the value to set.
   */
  public void setOrganizationName(java.lang.String value) {
    this.organizationName = value;
  }

  /**
   * Gets the value of the 'organizationBillingAddress' field.
   * @return The value of the 'organizationBillingAddress' field.
   */
  public java.lang.String getOrganizationBillingAddress() {
    return organizationBillingAddress;
  }

  /**
   * Sets the value of the 'organizationBillingAddress' field.
   * @param value the value to set.
   */
  public void setOrganizationBillingAddress(java.lang.String value) {
    this.organizationBillingAddress = value;
  }

  /**
   * Gets the value of the 'organizationShippingAddress' field.
   * @return The value of the 'organizationShippingAddress' field.
   */
  public java.lang.String getOrganizationShippingAddress() {
    return organizationShippingAddress;
  }

  /**
   * Sets the value of the 'organizationShippingAddress' field.
   * @param value the value to set.
   */
  public void setOrganizationShippingAddress(java.lang.String value) {
    this.organizationShippingAddress = value;
  }

  /**
   * Gets the value of the 'typeOfCustomer' field.
   * @return The value of the 'typeOfCustomer' field.
   */
  public java.lang.String getTypeOfCustomer() {
    return typeOfCustomer;
  }

  /**
   * Sets the value of the 'typeOfCustomer' field.
   * @param value the value to set.
   */
  public void setTypeOfCustomer(java.lang.String value) {
    this.typeOfCustomer = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'isDeleted' field.
   * @return The value of the 'isDeleted' field.
   */
  public java.lang.String getIsDeleted() {
    return isDeleted;
  }

  /**
   * Sets the value of the 'isDeleted' field.
   * @param value the value to set.
   */
  public void setIsDeleted(java.lang.String value) {
    this.isDeleted = value;
  }

  /**
   * Gets the value of the 'createTime' field.
   * @return The value of the 'createTime' field.
   */
  public java.lang.Long getCreateTime() {
    return createTime;
  }

  /**
   * Sets the value of the 'createTime' field.
   * @param value the value to set.
   */
  public void setCreateTime(java.lang.Long value) {
    this.createTime = value;
  }

  /**
   * Gets the value of the 'updateTime' field.
   * @return The value of the 'updateTime' field.
   */
  public java.lang.Long getUpdateTime() {
    return updateTime;
  }

  /**
   * Sets the value of the 'updateTime' field.
   * @param value the value to set.
   */
  public void setUpdateTime(java.lang.Long value) {
    this.updateTime = value;
  }

  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static com.fretron.Model.Customer.Builder newBuilder() {
    return new com.fretron.Model.Customer.Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static com.fretron.Model.Customer.Builder newBuilder(com.fretron.Model.Customer.Builder other) {
    return new com.fretron.Model.Customer.Builder(other);
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static com.fretron.Model.Customer.Builder newBuilder(com.fretron.Model.Customer other) {
    return new com.fretron.Model.Customer.Builder(other);
  }

  /**
   * RecordBuilder for Customer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    private java.lang.String contactPersonName;
    private java.lang.String emailAddress;
    private java.lang.String mobileNumber;
    private java.lang.String organizationName;
    private java.lang.String organizationBillingAddress;
    private java.lang.String organizationShippingAddress;
    private java.lang.String typeOfCustomer;
    private java.lang.String uuid;
    private java.lang.String isDeleted;
    private java.lang.Long createTime;
    private java.lang.Long updateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.contactPersonName)) {
        this.contactPersonName = data().deepCopy(fields()[0].schema(), other.contactPersonName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[1].schema(), other.emailAddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[2].schema(), other.mobileNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.organizationName)) {
        this.organizationName = data().deepCopy(fields()[3].schema(), other.organizationName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.organizationBillingAddress)) {
        this.organizationBillingAddress = data().deepCopy(fields()[4].schema(), other.organizationBillingAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.organizationShippingAddress)) {
        this.organizationShippingAddress = data().deepCopy(fields()[5].schema(), other.organizationShippingAddress);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.typeOfCustomer)) {
        this.typeOfCustomer = data().deepCopy(fields()[6].schema(), other.typeOfCustomer);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.uuid)) {
        this.uuid = data().deepCopy(fields()[7].schema(), other.uuid);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isDeleted)) {
        this.isDeleted = data().deepCopy(fields()[8].schema(), other.isDeleted);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.createTime)) {
        this.createTime = data().deepCopy(fields()[9].schema(), other.createTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[10].schema(), other.updateTime);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Customer other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.contactPersonName)) {
        this.contactPersonName = data().deepCopy(fields()[0].schema(), other.contactPersonName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[1].schema(), other.emailAddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[2].schema(), other.mobileNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.organizationName)) {
        this.organizationName = data().deepCopy(fields()[3].schema(), other.organizationName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.organizationBillingAddress)) {
        this.organizationBillingAddress = data().deepCopy(fields()[4].schema(), other.organizationBillingAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.organizationShippingAddress)) {
        this.organizationShippingAddress = data().deepCopy(fields()[5].schema(), other.organizationShippingAddress);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.typeOfCustomer)) {
        this.typeOfCustomer = data().deepCopy(fields()[6].schema(), other.typeOfCustomer);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.uuid)) {
        this.uuid = data().deepCopy(fields()[7].schema(), other.uuid);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isDeleted)) {
        this.isDeleted = data().deepCopy(fields()[8].schema(), other.isDeleted);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.createTime)) {
        this.createTime = data().deepCopy(fields()[9].schema(), other.createTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[10].schema(), other.updateTime);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'contactPersonName' field.
      * @return The value.
      */
    public java.lang.String getContactPersonName() {
      return contactPersonName;
    }

    /**
      * Sets the value of the 'contactPersonName' field.
      * @param value The value of 'contactPersonName'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setContactPersonName(java.lang.String value) {
      validate(fields()[0], value);
      this.contactPersonName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'contactPersonName' field has been set.
      * @return True if the 'contactPersonName' field has been set, false otherwise.
      */
    public boolean hasContactPersonName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'contactPersonName' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearContactPersonName() {
      contactPersonName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailAddress' field.
      * @return The value.
      */
    public java.lang.String getEmailAddress() {
      return emailAddress;
    }

    /**
      * Sets the value of the 'emailAddress' field.
      * @param value The value of 'emailAddress'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setEmailAddress(java.lang.String value) {
      validate(fields()[1], value);
      this.emailAddress = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'emailAddress' field has been set.
      * @return True if the 'emailAddress' field has been set, false otherwise.
      */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'emailAddress' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearEmailAddress() {
      emailAddress = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileNumber' field.
      * @return The value.
      */
    public java.lang.String getMobileNumber() {
      return mobileNumber;
    }

    /**
      * Sets the value of the 'mobileNumber' field.
      * @param value The value of 'mobileNumber'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setMobileNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.mobileNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileNumber' field has been set.
      * @return True if the 'mobileNumber' field has been set, false otherwise.
      */
    public boolean hasMobileNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mobileNumber' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearMobileNumber() {
      mobileNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationName' field.
      * @return The value.
      */
    public java.lang.String getOrganizationName() {
      return organizationName;
    }

    /**
      * Sets the value of the 'organizationName' field.
      * @param value The value of 'organizationName'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setOrganizationName(java.lang.String value) {
      validate(fields()[3], value);
      this.organizationName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationName' field has been set.
      * @return True if the 'organizationName' field has been set, false otherwise.
      */
    public boolean hasOrganizationName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'organizationName' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearOrganizationName() {
      organizationName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationBillingAddress' field.
      * @return The value.
      */
    public java.lang.String getOrganizationBillingAddress() {
      return organizationBillingAddress;
    }

    /**
      * Sets the value of the 'organizationBillingAddress' field.
      * @param value The value of 'organizationBillingAddress'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setOrganizationBillingAddress(java.lang.String value) {
      validate(fields()[4], value);
      this.organizationBillingAddress = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationBillingAddress' field has been set.
      * @return True if the 'organizationBillingAddress' field has been set, false otherwise.
      */
    public boolean hasOrganizationBillingAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'organizationBillingAddress' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearOrganizationBillingAddress() {
      organizationBillingAddress = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationShippingAddress' field.
      * @return The value.
      */
    public java.lang.String getOrganizationShippingAddress() {
      return organizationShippingAddress;
    }

    /**
      * Sets the value of the 'organizationShippingAddress' field.
      * @param value The value of 'organizationShippingAddress'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setOrganizationShippingAddress(java.lang.String value) {
      validate(fields()[5], value);
      this.organizationShippingAddress = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationShippingAddress' field has been set.
      * @return True if the 'organizationShippingAddress' field has been set, false otherwise.
      */
    public boolean hasOrganizationShippingAddress() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'organizationShippingAddress' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearOrganizationShippingAddress() {
      organizationShippingAddress = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'typeOfCustomer' field.
      * @return The value.
      */
    public java.lang.String getTypeOfCustomer() {
      return typeOfCustomer;
    }

    /**
      * Sets the value of the 'typeOfCustomer' field.
      * @param value The value of 'typeOfCustomer'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setTypeOfCustomer(java.lang.String value) {
      validate(fields()[6], value);
      this.typeOfCustomer = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'typeOfCustomer' field has been set.
      * @return True if the 'typeOfCustomer' field has been set, false otherwise.
      */
    public boolean hasTypeOfCustomer() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'typeOfCustomer' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearTypeOfCustomer() {
      typeOfCustomer = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setUuid(java.lang.String value) {
      validate(fields()[7], value);
      this.uuid = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'isDeleted' field.
      * @return The value.
      */
    public java.lang.String getIsDeleted() {
      return isDeleted;
    }

    /**
      * Sets the value of the 'isDeleted' field.
      * @param value The value of 'isDeleted'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setIsDeleted(java.lang.String value) {
      validate(fields()[8], value);
      this.isDeleted = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'isDeleted' field has been set.
      * @return True if the 'isDeleted' field has been set, false otherwise.
      */
    public boolean hasIsDeleted() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'isDeleted' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearIsDeleted() {
      isDeleted = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'createTime' field.
      * @return The value.
      */
    public java.lang.Long getCreateTime() {
      return createTime;
    }

    /**
      * Sets the value of the 'createTime' field.
      * @param value The value of 'createTime'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setCreateTime(java.lang.Long value) {
      validate(fields()[9], value);
      this.createTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'createTime' field has been set.
      * @return True if the 'createTime' field has been set, false otherwise.
      */
    public boolean hasCreateTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'createTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearCreateTime() {
      createTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateTime' field.
      * @return The value.
      */
    public java.lang.Long getUpdateTime() {
      return updateTime;
    }

    /**
      * Sets the value of the 'updateTime' field.
      * @param value The value of 'updateTime'.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder setUpdateTime(java.lang.Long value) {
      validate(fields()[10], value);
      this.updateTime = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'updateTime' field has been set.
      * @return True if the 'updateTime' field has been set, false otherwise.
      */
    public boolean hasUpdateTime() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'updateTime' field.
      * @return This builder.
      */
    public com.fretron.Model.Customer.Builder clearUpdateTime() {
      updateTime = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public Customer build() {
      try {
        Customer record = new Customer();
        record.contactPersonName = fieldSetFlags()[0] ? this.contactPersonName : (java.lang.String) defaultValue(fields()[0]);
        record.emailAddress = fieldSetFlags()[1] ? this.emailAddress : (java.lang.String) defaultValue(fields()[1]);
        record.mobileNumber = fieldSetFlags()[2] ? this.mobileNumber : (java.lang.String) defaultValue(fields()[2]);
        record.organizationName = fieldSetFlags()[3] ? this.organizationName : (java.lang.String) defaultValue(fields()[3]);
        record.organizationBillingAddress = fieldSetFlags()[4] ? this.organizationBillingAddress : (java.lang.String) defaultValue(fields()[4]);
        record.organizationShippingAddress = fieldSetFlags()[5] ? this.organizationShippingAddress : (java.lang.String) defaultValue(fields()[5]);
        record.typeOfCustomer = fieldSetFlags()[6] ? this.typeOfCustomer : (java.lang.String) defaultValue(fields()[6]);
        record.uuid = fieldSetFlags()[7] ? this.uuid : (java.lang.String) defaultValue(fields()[7]);
        record.isDeleted = fieldSetFlags()[8] ? this.isDeleted : (java.lang.String) defaultValue(fields()[8]);
        record.createTime = fieldSetFlags()[9] ? this.createTime : (java.lang.Long) defaultValue(fields()[9]);
        record.updateTime = fieldSetFlags()[10] ? this.updateTime : (java.lang.Long) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
