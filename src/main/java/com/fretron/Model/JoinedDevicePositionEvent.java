/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class JoinedDevicePositionEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2165514699302567694L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JoinedDevicePositionEvent\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"device\",\"type\":{\"type\":\"record\",\"name\":\"DeviceSession\",\"fields\":[{\"name\":\"remoteAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"imei\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timeZoneOffset\",\"type\":[\"null\",\"int\"],\"default\":null}]},\"default\":null},{\"name\":\"event\",\"type\":{\"type\":\"record\",\"name\":\"ProtocolEvent\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"data\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null}]},\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.DeviceSession device;
  @Deprecated public com.fretron.Model.ProtocolEvent event;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JoinedDevicePositionEvent() {}

  /**
   * All-args constructor.
   * @param device The new value for device
   * @param event The new value for event
   */
  public JoinedDevicePositionEvent(com.fretron.Model.DeviceSession device, com.fretron.Model.ProtocolEvent event) {
    this.device = device;
    this.event = event;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return device;
    case 1: return event;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: device = (com.fretron.Model.DeviceSession)value$; break;
    case 1: event = (com.fretron.Model.ProtocolEvent)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'device' field.
   * @return The value of the 'device' field.
   */
  public com.fretron.Model.DeviceSession getDevice() {
    return device;
  }

  /**
   * Sets the value of the 'device' field.
   * @param value the value to set.
   */
  public void setDevice(com.fretron.Model.DeviceSession value) {
    this.device = value;
  }

  /**
   * Gets the value of the 'event' field.
   * @return The value of the 'event' field.
   */
  public com.fretron.Model.ProtocolEvent getEvent() {
    return event;
  }

  /**
   * Sets the value of the 'event' field.
   * @param value the value to set.
   */
  public void setEvent(com.fretron.Model.ProtocolEvent value) {
    this.event = value;
  }

  /**
   * Creates a new JoinedDevicePositionEvent RecordBuilder.
   * @return A new JoinedDevicePositionEvent RecordBuilder
   */
  public static com.fretron.Model.JoinedDevicePositionEvent.Builder newBuilder() {
    return new com.fretron.Model.JoinedDevicePositionEvent.Builder();
  }

  /**
   * Creates a new JoinedDevicePositionEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JoinedDevicePositionEvent RecordBuilder
   */
  public static com.fretron.Model.JoinedDevicePositionEvent.Builder newBuilder(com.fretron.Model.JoinedDevicePositionEvent.Builder other) {
    return new com.fretron.Model.JoinedDevicePositionEvent.Builder(other);
  }

  /**
   * Creates a new JoinedDevicePositionEvent RecordBuilder by copying an existing JoinedDevicePositionEvent instance.
   * @param other The existing instance to copy.
   * @return A new JoinedDevicePositionEvent RecordBuilder
   */
  public static com.fretron.Model.JoinedDevicePositionEvent.Builder newBuilder(com.fretron.Model.JoinedDevicePositionEvent other) {
    return new com.fretron.Model.JoinedDevicePositionEvent.Builder(other);
  }

  /**
   * RecordBuilder for JoinedDevicePositionEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JoinedDevicePositionEvent>
    implements org.apache.avro.data.RecordBuilder<JoinedDevicePositionEvent> {

    private com.fretron.Model.DeviceSession device;
    private com.fretron.Model.DeviceSession.Builder deviceBuilder;
    private com.fretron.Model.ProtocolEvent event;
    private com.fretron.Model.ProtocolEvent.Builder eventBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.JoinedDevicePositionEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.device)) {
        this.device = data().deepCopy(fields()[0].schema(), other.device);
        fieldSetFlags()[0] = true;
      }
      if (other.hasDeviceBuilder()) {
        this.deviceBuilder = com.fretron.Model.DeviceSession.newBuilder(other.getDeviceBuilder());
      }
      if (isValidValue(fields()[1], other.event)) {
        this.event = data().deepCopy(fields()[1].schema(), other.event);
        fieldSetFlags()[1] = true;
      }
      if (other.hasEventBuilder()) {
        this.eventBuilder = com.fretron.Model.ProtocolEvent.newBuilder(other.getEventBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing JoinedDevicePositionEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.JoinedDevicePositionEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.device)) {
        this.device = data().deepCopy(fields()[0].schema(), other.device);
        fieldSetFlags()[0] = true;
      }
      this.deviceBuilder = null;
      if (isValidValue(fields()[1], other.event)) {
        this.event = data().deepCopy(fields()[1].schema(), other.event);
        fieldSetFlags()[1] = true;
      }
      this.eventBuilder = null;
    }

    /**
      * Gets the value of the 'device' field.
      * @return The value.
      */
    public com.fretron.Model.DeviceSession getDevice() {
      return device;
    }

    /**
      * Sets the value of the 'device' field.
      * @param value The value of 'device'.
      * @return This builder.
      */
    public com.fretron.Model.JoinedDevicePositionEvent.Builder setDevice(com.fretron.Model.DeviceSession value) {
      validate(fields()[0], value);
      this.deviceBuilder = null;
      this.device = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'device' field has been set.
      * @return True if the 'device' field has been set, false otherwise.
      */
    public boolean hasDevice() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'device' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.DeviceSession.Builder getDeviceBuilder() {
      if (deviceBuilder == null) {
        if (hasDevice()) {
          setDeviceBuilder(com.fretron.Model.DeviceSession.newBuilder(device));
        } else {
          setDeviceBuilder(com.fretron.Model.DeviceSession.newBuilder());
        }
      }
      return deviceBuilder;
    }

    /**
     * Sets the Builder instance for the 'device' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.JoinedDevicePositionEvent.Builder setDeviceBuilder(com.fretron.Model.DeviceSession.Builder value) {
      clearDevice();
      deviceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'device' field has an active Builder instance
     * @return True if the 'device' field has an active Builder instance
     */
    public boolean hasDeviceBuilder() {
      return deviceBuilder != null;
    }

    /**
      * Clears the value of the 'device' field.
      * @return This builder.
      */
    public com.fretron.Model.JoinedDevicePositionEvent.Builder clearDevice() {
      device = null;
      deviceBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'event' field.
      * @return The value.
      */
    public com.fretron.Model.ProtocolEvent getEvent() {
      return event;
    }

    /**
      * Sets the value of the 'event' field.
      * @param value The value of 'event'.
      * @return This builder.
      */
    public com.fretron.Model.JoinedDevicePositionEvent.Builder setEvent(com.fretron.Model.ProtocolEvent value) {
      validate(fields()[1], value);
      this.eventBuilder = null;
      this.event = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'event' field has been set.
      * @return True if the 'event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'event' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.ProtocolEvent.Builder getEventBuilder() {
      if (eventBuilder == null) {
        if (hasEvent()) {
          setEventBuilder(com.fretron.Model.ProtocolEvent.newBuilder(event));
        } else {
          setEventBuilder(com.fretron.Model.ProtocolEvent.newBuilder());
        }
      }
      return eventBuilder;
    }

    /**
     * Sets the Builder instance for the 'event' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.JoinedDevicePositionEvent.Builder setEventBuilder(com.fretron.Model.ProtocolEvent.Builder value) {
      clearEvent();
      eventBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'event' field has an active Builder instance
     * @return True if the 'event' field has an active Builder instance
     */
    public boolean hasEventBuilder() {
      return eventBuilder != null;
    }

    /**
      * Clears the value of the 'event' field.
      * @return This builder.
      */
    public com.fretron.Model.JoinedDevicePositionEvent.Builder clearEvent() {
      event = null;
      eventBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public JoinedDevicePositionEvent build() {
      try {
        JoinedDevicePositionEvent record = new JoinedDevicePositionEvent();
        if (deviceBuilder != null) {
          record.device = this.deviceBuilder.build();
        } else {
          record.device = fieldSetFlags()[0] ? this.device : (com.fretron.Model.DeviceSession) defaultValue(fields()[0]);
        }
        if (eventBuilder != null) {
          record.event = this.eventBuilder.build();
        } else {
          record.event = fieldSetFlags()[1] ? this.event : (com.fretron.Model.ProtocolEvent) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
