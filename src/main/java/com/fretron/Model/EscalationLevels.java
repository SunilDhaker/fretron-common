/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EscalationLevels extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8358887015104928153L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EscalationLevels\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"escalationToId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"escalatedToIdType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"escalationLevelName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"escalationLevel\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"resolutionTime\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"resolutionHourType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"issueFieldMapping\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IssueFieldMapping\",\"fields\":[{\"name\":\"issueFilledId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"roleFilledId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String escalationToId;
  @Deprecated public java.lang.String escalatedToIdType;
  @Deprecated public java.lang.String escalationLevelName;
  @Deprecated public java.lang.Integer escalationLevel;
  @Deprecated public java.lang.Long resolutionTime;
  @Deprecated public java.lang.String resolutionHourType;
  @Deprecated public java.util.List<com.fretron.Model.IssueFieldMapping> issueFieldMapping;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EscalationLevels() {}

  /**
   * All-args constructor.
   * @param escalationToId The new value for escalationToId
   * @param escalatedToIdType The new value for escalatedToIdType
   * @param escalationLevelName The new value for escalationLevelName
   * @param escalationLevel The new value for escalationLevel
   * @param resolutionTime The new value for resolutionTime
   * @param resolutionHourType The new value for resolutionHourType
   * @param issueFieldMapping The new value for issueFieldMapping
   */
  public EscalationLevels(java.lang.String escalationToId, java.lang.String escalatedToIdType, java.lang.String escalationLevelName, java.lang.Integer escalationLevel, java.lang.Long resolutionTime, java.lang.String resolutionHourType, java.util.List<com.fretron.Model.IssueFieldMapping> issueFieldMapping) {
    this.escalationToId = escalationToId;
    this.escalatedToIdType = escalatedToIdType;
    this.escalationLevelName = escalationLevelName;
    this.escalationLevel = escalationLevel;
    this.resolutionTime = resolutionTime;
    this.resolutionHourType = resolutionHourType;
    this.issueFieldMapping = issueFieldMapping;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return escalationToId;
    case 1: return escalatedToIdType;
    case 2: return escalationLevelName;
    case 3: return escalationLevel;
    case 4: return resolutionTime;
    case 5: return resolutionHourType;
    case 6: return issueFieldMapping;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: escalationToId = (java.lang.String)value$; break;
    case 1: escalatedToIdType = (java.lang.String)value$; break;
    case 2: escalationLevelName = (java.lang.String)value$; break;
    case 3: escalationLevel = (java.lang.Integer)value$; break;
    case 4: resolutionTime = (java.lang.Long)value$; break;
    case 5: resolutionHourType = (java.lang.String)value$; break;
    case 6: issueFieldMapping = (java.util.List<com.fretron.Model.IssueFieldMapping>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'escalationToId' field.
   * @return The value of the 'escalationToId' field.
   */
  public java.lang.String getEscalationToId() {
    return escalationToId;
  }

  /**
   * Sets the value of the 'escalationToId' field.
   * @param value the value to set.
   */
  public void setEscalationToId(java.lang.String value) {
    this.escalationToId = value;
  }

  /**
   * Gets the value of the 'escalatedToIdType' field.
   * @return The value of the 'escalatedToIdType' field.
   */
  public java.lang.String getEscalatedToIdType() {
    return escalatedToIdType;
  }

  /**
   * Sets the value of the 'escalatedToIdType' field.
   * @param value the value to set.
   */
  public void setEscalatedToIdType(java.lang.String value) {
    this.escalatedToIdType = value;
  }

  /**
   * Gets the value of the 'escalationLevelName' field.
   * @return The value of the 'escalationLevelName' field.
   */
  public java.lang.String getEscalationLevelName() {
    return escalationLevelName;
  }

  /**
   * Sets the value of the 'escalationLevelName' field.
   * @param value the value to set.
   */
  public void setEscalationLevelName(java.lang.String value) {
    this.escalationLevelName = value;
  }

  /**
   * Gets the value of the 'escalationLevel' field.
   * @return The value of the 'escalationLevel' field.
   */
  public java.lang.Integer getEscalationLevel() {
    return escalationLevel;
  }

  /**
   * Sets the value of the 'escalationLevel' field.
   * @param value the value to set.
   */
  public void setEscalationLevel(java.lang.Integer value) {
    this.escalationLevel = value;
  }

  /**
   * Gets the value of the 'resolutionTime' field.
   * @return The value of the 'resolutionTime' field.
   */
  public java.lang.Long getResolutionTime() {
    return resolutionTime;
  }

  /**
   * Sets the value of the 'resolutionTime' field.
   * @param value the value to set.
   */
  public void setResolutionTime(java.lang.Long value) {
    this.resolutionTime = value;
  }

  /**
   * Gets the value of the 'resolutionHourType' field.
   * @return The value of the 'resolutionHourType' field.
   */
  public java.lang.String getResolutionHourType() {
    return resolutionHourType;
  }

  /**
   * Sets the value of the 'resolutionHourType' field.
   * @param value the value to set.
   */
  public void setResolutionHourType(java.lang.String value) {
    this.resolutionHourType = value;
  }

  /**
   * Gets the value of the 'issueFieldMapping' field.
   * @return The value of the 'issueFieldMapping' field.
   */
  public java.util.List<com.fretron.Model.IssueFieldMapping> getIssueFieldMapping() {
    return issueFieldMapping;
  }

  /**
   * Sets the value of the 'issueFieldMapping' field.
   * @param value the value to set.
   */
  public void setIssueFieldMapping(java.util.List<com.fretron.Model.IssueFieldMapping> value) {
    this.issueFieldMapping = value;
  }

  /**
   * Creates a new EscalationLevels RecordBuilder.
   * @return A new EscalationLevels RecordBuilder
   */
  public static com.fretron.Model.EscalationLevels.Builder newBuilder() {
    return new com.fretron.Model.EscalationLevels.Builder();
  }

  /**
   * Creates a new EscalationLevels RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EscalationLevels RecordBuilder
   */
  public static com.fretron.Model.EscalationLevels.Builder newBuilder(com.fretron.Model.EscalationLevels.Builder other) {
    return new com.fretron.Model.EscalationLevels.Builder(other);
  }

  /**
   * Creates a new EscalationLevels RecordBuilder by copying an existing EscalationLevels instance.
   * @param other The existing instance to copy.
   * @return A new EscalationLevels RecordBuilder
   */
  public static com.fretron.Model.EscalationLevels.Builder newBuilder(com.fretron.Model.EscalationLevels other) {
    return new com.fretron.Model.EscalationLevels.Builder(other);
  }

  /**
   * RecordBuilder for EscalationLevels instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EscalationLevels>
    implements org.apache.avro.data.RecordBuilder<EscalationLevels> {

    private java.lang.String escalationToId;
    private java.lang.String escalatedToIdType;
    private java.lang.String escalationLevelName;
    private java.lang.Integer escalationLevel;
    private java.lang.Long resolutionTime;
    private java.lang.String resolutionHourType;
    private java.util.List<com.fretron.Model.IssueFieldMapping> issueFieldMapping;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.EscalationLevels.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.escalationToId)) {
        this.escalationToId = data().deepCopy(fields()[0].schema(), other.escalationToId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.escalatedToIdType)) {
        this.escalatedToIdType = data().deepCopy(fields()[1].schema(), other.escalatedToIdType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.escalationLevelName)) {
        this.escalationLevelName = data().deepCopy(fields()[2].schema(), other.escalationLevelName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.escalationLevel)) {
        this.escalationLevel = data().deepCopy(fields()[3].schema(), other.escalationLevel);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.resolutionTime)) {
        this.resolutionTime = data().deepCopy(fields()[4].schema(), other.resolutionTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.resolutionHourType)) {
        this.resolutionHourType = data().deepCopy(fields()[5].schema(), other.resolutionHourType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.issueFieldMapping)) {
        this.issueFieldMapping = data().deepCopy(fields()[6].schema(), other.issueFieldMapping);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EscalationLevels instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.EscalationLevels other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.escalationToId)) {
        this.escalationToId = data().deepCopy(fields()[0].schema(), other.escalationToId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.escalatedToIdType)) {
        this.escalatedToIdType = data().deepCopy(fields()[1].schema(), other.escalatedToIdType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.escalationLevelName)) {
        this.escalationLevelName = data().deepCopy(fields()[2].schema(), other.escalationLevelName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.escalationLevel)) {
        this.escalationLevel = data().deepCopy(fields()[3].schema(), other.escalationLevel);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.resolutionTime)) {
        this.resolutionTime = data().deepCopy(fields()[4].schema(), other.resolutionTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.resolutionHourType)) {
        this.resolutionHourType = data().deepCopy(fields()[5].schema(), other.resolutionHourType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.issueFieldMapping)) {
        this.issueFieldMapping = data().deepCopy(fields()[6].schema(), other.issueFieldMapping);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'escalationToId' field.
      * @return The value.
      */
    public java.lang.String getEscalationToId() {
      return escalationToId;
    }

    /**
      * Sets the value of the 'escalationToId' field.
      * @param value The value of 'escalationToId'.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder setEscalationToId(java.lang.String value) {
      validate(fields()[0], value);
      this.escalationToId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'escalationToId' field has been set.
      * @return True if the 'escalationToId' field has been set, false otherwise.
      */
    public boolean hasEscalationToId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'escalationToId' field.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder clearEscalationToId() {
      escalationToId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'escalatedToIdType' field.
      * @return The value.
      */
    public java.lang.String getEscalatedToIdType() {
      return escalatedToIdType;
    }

    /**
      * Sets the value of the 'escalatedToIdType' field.
      * @param value The value of 'escalatedToIdType'.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder setEscalatedToIdType(java.lang.String value) {
      validate(fields()[1], value);
      this.escalatedToIdType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'escalatedToIdType' field has been set.
      * @return True if the 'escalatedToIdType' field has been set, false otherwise.
      */
    public boolean hasEscalatedToIdType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'escalatedToIdType' field.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder clearEscalatedToIdType() {
      escalatedToIdType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'escalationLevelName' field.
      * @return The value.
      */
    public java.lang.String getEscalationLevelName() {
      return escalationLevelName;
    }

    /**
      * Sets the value of the 'escalationLevelName' field.
      * @param value The value of 'escalationLevelName'.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder setEscalationLevelName(java.lang.String value) {
      validate(fields()[2], value);
      this.escalationLevelName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'escalationLevelName' field has been set.
      * @return True if the 'escalationLevelName' field has been set, false otherwise.
      */
    public boolean hasEscalationLevelName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'escalationLevelName' field.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder clearEscalationLevelName() {
      escalationLevelName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'escalationLevel' field.
      * @return The value.
      */
    public java.lang.Integer getEscalationLevel() {
      return escalationLevel;
    }

    /**
      * Sets the value of the 'escalationLevel' field.
      * @param value The value of 'escalationLevel'.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder setEscalationLevel(java.lang.Integer value) {
      validate(fields()[3], value);
      this.escalationLevel = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'escalationLevel' field has been set.
      * @return True if the 'escalationLevel' field has been set, false otherwise.
      */
    public boolean hasEscalationLevel() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'escalationLevel' field.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder clearEscalationLevel() {
      escalationLevel = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'resolutionTime' field.
      * @return The value.
      */
    public java.lang.Long getResolutionTime() {
      return resolutionTime;
    }

    /**
      * Sets the value of the 'resolutionTime' field.
      * @param value The value of 'resolutionTime'.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder setResolutionTime(java.lang.Long value) {
      validate(fields()[4], value);
      this.resolutionTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'resolutionTime' field has been set.
      * @return True if the 'resolutionTime' field has been set, false otherwise.
      */
    public boolean hasResolutionTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'resolutionTime' field.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder clearResolutionTime() {
      resolutionTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'resolutionHourType' field.
      * @return The value.
      */
    public java.lang.String getResolutionHourType() {
      return resolutionHourType;
    }

    /**
      * Sets the value of the 'resolutionHourType' field.
      * @param value The value of 'resolutionHourType'.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder setResolutionHourType(java.lang.String value) {
      validate(fields()[5], value);
      this.resolutionHourType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'resolutionHourType' field has been set.
      * @return True if the 'resolutionHourType' field has been set, false otherwise.
      */
    public boolean hasResolutionHourType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'resolutionHourType' field.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder clearResolutionHourType() {
      resolutionHourType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'issueFieldMapping' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.IssueFieldMapping> getIssueFieldMapping() {
      return issueFieldMapping;
    }

    /**
      * Sets the value of the 'issueFieldMapping' field.
      * @param value The value of 'issueFieldMapping'.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder setIssueFieldMapping(java.util.List<com.fretron.Model.IssueFieldMapping> value) {
      validate(fields()[6], value);
      this.issueFieldMapping = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'issueFieldMapping' field has been set.
      * @return True if the 'issueFieldMapping' field has been set, false otherwise.
      */
    public boolean hasIssueFieldMapping() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'issueFieldMapping' field.
      * @return This builder.
      */
    public com.fretron.Model.EscalationLevels.Builder clearIssueFieldMapping() {
      issueFieldMapping = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public EscalationLevels build() {
      try {
        EscalationLevels record = new EscalationLevels();
        record.escalationToId = fieldSetFlags()[0] ? this.escalationToId : (java.lang.String) defaultValue(fields()[0]);
        record.escalatedToIdType = fieldSetFlags()[1] ? this.escalatedToIdType : (java.lang.String) defaultValue(fields()[1]);
        record.escalationLevelName = fieldSetFlags()[2] ? this.escalationLevelName : (java.lang.String) defaultValue(fields()[2]);
        record.escalationLevel = fieldSetFlags()[3] ? this.escalationLevel : (java.lang.Integer) defaultValue(fields()[3]);
        record.resolutionTime = fieldSetFlags()[4] ? this.resolutionTime : (java.lang.Long) defaultValue(fields()[4]);
        record.resolutionHourType = fieldSetFlags()[5] ? this.resolutionHourType : (java.lang.String) defaultValue(fields()[5]);
        record.issueFieldMapping = fieldSetFlags()[6] ? this.issueFieldMapping : (java.util.List<com.fretron.Model.IssueFieldMapping>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
