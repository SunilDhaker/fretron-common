/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AlertCondition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4025179023991216779L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlertCondition\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"field\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"windowSize\",\"type\":\"long\",\"default\":0},{\"name\":\"fieldType\",\"type\":{\"type\":\"enum\",\"name\":\"AlertFieldType\",\"symbols\":[\"PRIMITIVE\",\"CALCULATED\",\"AGGREGATE\"]}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valueType\",\"type\":{\"type\":\"enum\",\"name\":\"AlertParamValueType\",\"symbols\":[\"INT\",\"LONG\",\"DOUBLE\",\"STRING\",\"INT_RANGE\",\"LONG_RANGE\",\"DOUBLE_RANGE\",\"LOCATION_PROXIMITY\",\"LOCATION_GEOFENCE\"]}},{\"name\":\"operator\",\"type\":{\"type\":\"enum\",\"name\":\"AlertOperator\",\"symbols\":[\"IS\",\"IN\",\"NIN\",\"GT\",\"GTE\",\"LT\",\"LTE\",\"EQ\",\"REGEX\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String field;
  @Deprecated public long windowSize;
  @Deprecated public com.fretron.Model.AlertFieldType fieldType;
  @Deprecated public java.lang.String value;
  @Deprecated public com.fretron.Model.AlertParamValueType valueType;
  @Deprecated public com.fretron.Model.AlertOperator operator;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AlertCondition() {}

  /**
   * All-args constructor.
   * @param field The new value for field
   * @param windowSize The new value for windowSize
   * @param fieldType The new value for fieldType
   * @param value The new value for value
   * @param valueType The new value for valueType
   * @param operator The new value for operator
   */
  public AlertCondition(java.lang.String field, java.lang.Long windowSize, com.fretron.Model.AlertFieldType fieldType, java.lang.String value, com.fretron.Model.AlertParamValueType valueType, com.fretron.Model.AlertOperator operator) {
    this.field = field;
    this.windowSize = windowSize;
    this.fieldType = fieldType;
    this.value = value;
    this.valueType = valueType;
    this.operator = operator;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return field;
    case 1: return windowSize;
    case 2: return fieldType;
    case 3: return value;
    case 4: return valueType;
    case 5: return operator;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: field = (java.lang.String)value$; break;
    case 1: windowSize = (java.lang.Long)value$; break;
    case 2: fieldType = (com.fretron.Model.AlertFieldType)value$; break;
    case 3: value = (java.lang.String)value$; break;
    case 4: valueType = (com.fretron.Model.AlertParamValueType)value$; break;
    case 5: operator = (com.fretron.Model.AlertOperator)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'field' field.
   * @return The value of the 'field' field.
   */
  public java.lang.String getField() {
    return field;
  }

  /**
   * Sets the value of the 'field' field.
   * @param value the value to set.
   */
  public void setField(java.lang.String value) {
    this.field = value;
  }

  /**
   * Gets the value of the 'windowSize' field.
   * @return The value of the 'windowSize' field.
   */
  public java.lang.Long getWindowSize() {
    return windowSize;
  }

  /**
   * Sets the value of the 'windowSize' field.
   * @param value the value to set.
   */
  public void setWindowSize(java.lang.Long value) {
    this.windowSize = value;
  }

  /**
   * Gets the value of the 'fieldType' field.
   * @return The value of the 'fieldType' field.
   */
  public com.fretron.Model.AlertFieldType getFieldType() {
    return fieldType;
  }

  /**
   * Sets the value of the 'fieldType' field.
   * @param value the value to set.
   */
  public void setFieldType(com.fretron.Model.AlertFieldType value) {
    this.fieldType = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'valueType' field.
   * @return The value of the 'valueType' field.
   */
  public com.fretron.Model.AlertParamValueType getValueType() {
    return valueType;
  }

  /**
   * Sets the value of the 'valueType' field.
   * @param value the value to set.
   */
  public void setValueType(com.fretron.Model.AlertParamValueType value) {
    this.valueType = value;
  }

  /**
   * Gets the value of the 'operator' field.
   * @return The value of the 'operator' field.
   */
  public com.fretron.Model.AlertOperator getOperator() {
    return operator;
  }

  /**
   * Sets the value of the 'operator' field.
   * @param value the value to set.
   */
  public void setOperator(com.fretron.Model.AlertOperator value) {
    this.operator = value;
  }

  /**
   * Creates a new AlertCondition RecordBuilder.
   * @return A new AlertCondition RecordBuilder
   */
  public static com.fretron.Model.AlertCondition.Builder newBuilder() {
    return new com.fretron.Model.AlertCondition.Builder();
  }

  /**
   * Creates a new AlertCondition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AlertCondition RecordBuilder
   */
  public static com.fretron.Model.AlertCondition.Builder newBuilder(com.fretron.Model.AlertCondition.Builder other) {
    return new com.fretron.Model.AlertCondition.Builder(other);
  }

  /**
   * Creates a new AlertCondition RecordBuilder by copying an existing AlertCondition instance.
   * @param other The existing instance to copy.
   * @return A new AlertCondition RecordBuilder
   */
  public static com.fretron.Model.AlertCondition.Builder newBuilder(com.fretron.Model.AlertCondition other) {
    return new com.fretron.Model.AlertCondition.Builder(other);
  }

  /**
   * RecordBuilder for AlertCondition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlertCondition>
    implements org.apache.avro.data.RecordBuilder<AlertCondition> {

    private java.lang.String field;
    private long windowSize;
    private com.fretron.Model.AlertFieldType fieldType;
    private java.lang.String value;
    private com.fretron.Model.AlertParamValueType valueType;
    private com.fretron.Model.AlertOperator operator;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.AlertCondition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.field)) {
        this.field = data().deepCopy(fields()[0].schema(), other.field);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.windowSize)) {
        this.windowSize = data().deepCopy(fields()[1].schema(), other.windowSize);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fieldType)) {
        this.fieldType = data().deepCopy(fields()[2].schema(), other.fieldType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.valueType)) {
        this.valueType = data().deepCopy(fields()[4].schema(), other.valueType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.operator)) {
        this.operator = data().deepCopy(fields()[5].schema(), other.operator);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AlertCondition instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.AlertCondition other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.field)) {
        this.field = data().deepCopy(fields()[0].schema(), other.field);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.windowSize)) {
        this.windowSize = data().deepCopy(fields()[1].schema(), other.windowSize);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fieldType)) {
        this.fieldType = data().deepCopy(fields()[2].schema(), other.fieldType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.valueType)) {
        this.valueType = data().deepCopy(fields()[4].schema(), other.valueType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.operator)) {
        this.operator = data().deepCopy(fields()[5].schema(), other.operator);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'field' field.
      * @return The value.
      */
    public java.lang.String getField() {
      return field;
    }

    /**
      * Sets the value of the 'field' field.
      * @param value The value of 'field'.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder setField(java.lang.String value) {
      validate(fields()[0], value);
      this.field = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'field' field has been set.
      * @return True if the 'field' field has been set, false otherwise.
      */
    public boolean hasField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'field' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder clearField() {
      field = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'windowSize' field.
      * @return The value.
      */
    public java.lang.Long getWindowSize() {
      return windowSize;
    }

    /**
      * Sets the value of the 'windowSize' field.
      * @param value The value of 'windowSize'.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder setWindowSize(long value) {
      validate(fields()[1], value);
      this.windowSize = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'windowSize' field has been set.
      * @return True if the 'windowSize' field has been set, false otherwise.
      */
    public boolean hasWindowSize() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'windowSize' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder clearWindowSize() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldType' field.
      * @return The value.
      */
    public com.fretron.Model.AlertFieldType getFieldType() {
      return fieldType;
    }

    /**
      * Sets the value of the 'fieldType' field.
      * @param value The value of 'fieldType'.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder setFieldType(com.fretron.Model.AlertFieldType value) {
      validate(fields()[2], value);
      this.fieldType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldType' field has been set.
      * @return True if the 'fieldType' field has been set, false otherwise.
      */
    public boolean hasFieldType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fieldType' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder clearFieldType() {
      fieldType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder setValue(java.lang.String value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder clearValue() {
      value = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueType' field.
      * @return The value.
      */
    public com.fretron.Model.AlertParamValueType getValueType() {
      return valueType;
    }

    /**
      * Sets the value of the 'valueType' field.
      * @param value The value of 'valueType'.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder setValueType(com.fretron.Model.AlertParamValueType value) {
      validate(fields()[4], value);
      this.valueType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'valueType' field has been set.
      * @return True if the 'valueType' field has been set, false otherwise.
      */
    public boolean hasValueType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'valueType' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder clearValueType() {
      valueType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'operator' field.
      * @return The value.
      */
    public com.fretron.Model.AlertOperator getOperator() {
      return operator;
    }

    /**
      * Sets the value of the 'operator' field.
      * @param value The value of 'operator'.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder setOperator(com.fretron.Model.AlertOperator value) {
      validate(fields()[5], value);
      this.operator = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'operator' field has been set.
      * @return True if the 'operator' field has been set, false otherwise.
      */
    public boolean hasOperator() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'operator' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertCondition.Builder clearOperator() {
      operator = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AlertCondition build() {
      try {
        AlertCondition record = new AlertCondition();
        record.field = fieldSetFlags()[0] ? this.field : (java.lang.String) defaultValue(fields()[0]);
        record.windowSize = fieldSetFlags()[1] ? this.windowSize : (java.lang.Long) defaultValue(fields()[1]);
        record.fieldType = fieldSetFlags()[2] ? this.fieldType : (com.fretron.Model.AlertFieldType) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (java.lang.String) defaultValue(fields()[3]);
        record.valueType = fieldSetFlags()[4] ? this.valueType : (com.fretron.Model.AlertParamValueType) defaultValue(fields()[4]);
        record.operator = fieldSetFlags()[5] ? this.operator : (com.fretron.Model.AlertOperator) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
