/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CustomerZone extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3306720497757448948L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomerZone\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"partnerId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"zoneName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"hubs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ResourceInfo\",\"fields\":[{\"name\":\"resourceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"resourceType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"resourceIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"externalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String partnerId;
  @Deprecated public java.lang.String zoneName;
  @Deprecated public java.util.List<com.fretron.Model.ResourceInfo> hubs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomerZone() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param partnerId The new value for partnerId
   * @param zoneName The new value for zoneName
   * @param hubs The new value for hubs
   */
  public CustomerZone(java.lang.String uuid, java.lang.String partnerId, java.lang.String zoneName, java.util.List<com.fretron.Model.ResourceInfo> hubs) {
    this.uuid = uuid;
    this.partnerId = partnerId;
    this.zoneName = zoneName;
    this.hubs = hubs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return partnerId;
    case 2: return zoneName;
    case 3: return hubs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: partnerId = (java.lang.String)value$; break;
    case 2: zoneName = (java.lang.String)value$; break;
    case 3: hubs = (java.util.List<com.fretron.Model.ResourceInfo>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'partnerId' field.
   * @return The value of the 'partnerId' field.
   */
  public java.lang.String getPartnerId() {
    return partnerId;
  }

  /**
   * Sets the value of the 'partnerId' field.
   * @param value the value to set.
   */
  public void setPartnerId(java.lang.String value) {
    this.partnerId = value;
  }

  /**
   * Gets the value of the 'zoneName' field.
   * @return The value of the 'zoneName' field.
   */
  public java.lang.String getZoneName() {
    return zoneName;
  }

  /**
   * Sets the value of the 'zoneName' field.
   * @param value the value to set.
   */
  public void setZoneName(java.lang.String value) {
    this.zoneName = value;
  }

  /**
   * Gets the value of the 'hubs' field.
   * @return The value of the 'hubs' field.
   */
  public java.util.List<com.fretron.Model.ResourceInfo> getHubs() {
    return hubs;
  }

  /**
   * Sets the value of the 'hubs' field.
   * @param value the value to set.
   */
  public void setHubs(java.util.List<com.fretron.Model.ResourceInfo> value) {
    this.hubs = value;
  }

  /**
   * Creates a new CustomerZone RecordBuilder.
   * @return A new CustomerZone RecordBuilder
   */
  public static com.fretron.Model.CustomerZone.Builder newBuilder() {
    return new com.fretron.Model.CustomerZone.Builder();
  }

  /**
   * Creates a new CustomerZone RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomerZone RecordBuilder
   */
  public static com.fretron.Model.CustomerZone.Builder newBuilder(com.fretron.Model.CustomerZone.Builder other) {
    return new com.fretron.Model.CustomerZone.Builder(other);
  }

  /**
   * Creates a new CustomerZone RecordBuilder by copying an existing CustomerZone instance.
   * @param other The existing instance to copy.
   * @return A new CustomerZone RecordBuilder
   */
  public static com.fretron.Model.CustomerZone.Builder newBuilder(com.fretron.Model.CustomerZone other) {
    return new com.fretron.Model.CustomerZone.Builder(other);
  }

  /**
   * RecordBuilder for CustomerZone instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomerZone>
    implements org.apache.avro.data.RecordBuilder<CustomerZone> {

    private java.lang.String uuid;
    private java.lang.String partnerId;
    private java.lang.String zoneName;
    private java.util.List<com.fretron.Model.ResourceInfo> hubs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.CustomerZone.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.partnerId)) {
        this.partnerId = data().deepCopy(fields()[1].schema(), other.partnerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.zoneName)) {
        this.zoneName = data().deepCopy(fields()[2].schema(), other.zoneName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hubs)) {
        this.hubs = data().deepCopy(fields()[3].schema(), other.hubs);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CustomerZone instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.CustomerZone other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.partnerId)) {
        this.partnerId = data().deepCopy(fields()[1].schema(), other.partnerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.zoneName)) {
        this.zoneName = data().deepCopy(fields()[2].schema(), other.zoneName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hubs)) {
        this.hubs = data().deepCopy(fields()[3].schema(), other.hubs);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.CustomerZone.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomerZone.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'partnerId' field.
      * @return The value.
      */
    public java.lang.String getPartnerId() {
      return partnerId;
    }

    /**
      * Sets the value of the 'partnerId' field.
      * @param value The value of 'partnerId'.
      * @return This builder.
      */
    public com.fretron.Model.CustomerZone.Builder setPartnerId(java.lang.String value) {
      validate(fields()[1], value);
      this.partnerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'partnerId' field has been set.
      * @return True if the 'partnerId' field has been set, false otherwise.
      */
    public boolean hasPartnerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'partnerId' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomerZone.Builder clearPartnerId() {
      partnerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'zoneName' field.
      * @return The value.
      */
    public java.lang.String getZoneName() {
      return zoneName;
    }

    /**
      * Sets the value of the 'zoneName' field.
      * @param value The value of 'zoneName'.
      * @return This builder.
      */
    public com.fretron.Model.CustomerZone.Builder setZoneName(java.lang.String value) {
      validate(fields()[2], value);
      this.zoneName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'zoneName' field has been set.
      * @return True if the 'zoneName' field has been set, false otherwise.
      */
    public boolean hasZoneName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'zoneName' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomerZone.Builder clearZoneName() {
      zoneName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'hubs' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.ResourceInfo> getHubs() {
      return hubs;
    }

    /**
      * Sets the value of the 'hubs' field.
      * @param value The value of 'hubs'.
      * @return This builder.
      */
    public com.fretron.Model.CustomerZone.Builder setHubs(java.util.List<com.fretron.Model.ResourceInfo> value) {
      validate(fields()[3], value);
      this.hubs = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'hubs' field has been set.
      * @return True if the 'hubs' field has been set, false otherwise.
      */
    public boolean hasHubs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'hubs' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomerZone.Builder clearHubs() {
      hubs = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public CustomerZone build() {
      try {
        CustomerZone record = new CustomerZone();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.partnerId = fieldSetFlags()[1] ? this.partnerId : (java.lang.String) defaultValue(fields()[1]);
        record.zoneName = fieldSetFlags()[2] ? this.zoneName : (java.lang.String) defaultValue(fields()[2]);
        record.hubs = fieldSetFlags()[3] ? this.hubs : (java.util.List<com.fretron.Model.ResourceInfo>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
