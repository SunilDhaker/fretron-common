/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EnrichedHub extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4944183379605428260L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnrichedHub\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"hub\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Place\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"category\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"center\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"centerCoordinates\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"suggestedRadius\",\"type\":\"double\",\"default\":null},{\"name\":\"viewport\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ViewPort\",\"fields\":[{\"name\":\"northeast\",\"type\":[\"null\",\"Location\"],\"default\":null},{\"name\":\"southwest\",\"type\":[\"null\",\"Location\"],\"default\":null}]}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"externalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"hubId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"district\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"subDistrict\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"boundary\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}],\"default\":null},{\"name\":\"places\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Place\"}],\"default\":null},{\"name\":\"accessibility\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isOwned\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"geoJsonBoundry\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geometry\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"coordinates\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}],\"default\":null}]}],\"default\":null},{\"name\":\"controllingBranchId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"evaluationLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LitePosition\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"course\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decoder\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"imei\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lngLat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"isFillingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"odometer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Odometer\",\"fields\":[{\"name\":\"softwareMeter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"lastUpdateTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isSoftwareMeterManuallyCalibrated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"lastCalibrationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"hardwareReading\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"hardwareDistance\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}],\"default\":null},{\"name\":\"lastEvaluationTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.Place hub;
  @Deprecated public com.fretron.Model.LitePosition evaluationLocation;
  @Deprecated public java.lang.Long lastEvaluationTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnrichedHub() {}

  /**
   * All-args constructor.
   * @param hub The new value for hub
   * @param evaluationLocation The new value for evaluationLocation
   * @param lastEvaluationTime The new value for lastEvaluationTime
   */
  public EnrichedHub(com.fretron.Model.Place hub, com.fretron.Model.LitePosition evaluationLocation, java.lang.Long lastEvaluationTime) {
    this.hub = hub;
    this.evaluationLocation = evaluationLocation;
    this.lastEvaluationTime = lastEvaluationTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hub;
    case 1: return evaluationLocation;
    case 2: return lastEvaluationTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hub = (com.fretron.Model.Place)value$; break;
    case 1: evaluationLocation = (com.fretron.Model.LitePosition)value$; break;
    case 2: lastEvaluationTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hub' field.
   * @return The value of the 'hub' field.
   */
  public com.fretron.Model.Place getHub() {
    return hub;
  }

  /**
   * Sets the value of the 'hub' field.
   * @param value the value to set.
   */
  public void setHub(com.fretron.Model.Place value) {
    this.hub = value;
  }

  /**
   * Gets the value of the 'evaluationLocation' field.
   * @return The value of the 'evaluationLocation' field.
   */
  public com.fretron.Model.LitePosition getEvaluationLocation() {
    return evaluationLocation;
  }

  /**
   * Sets the value of the 'evaluationLocation' field.
   * @param value the value to set.
   */
  public void setEvaluationLocation(com.fretron.Model.LitePosition value) {
    this.evaluationLocation = value;
  }

  /**
   * Gets the value of the 'lastEvaluationTime' field.
   * @return The value of the 'lastEvaluationTime' field.
   */
  public java.lang.Long getLastEvaluationTime() {
    return lastEvaluationTime;
  }

  /**
   * Sets the value of the 'lastEvaluationTime' field.
   * @param value the value to set.
   */
  public void setLastEvaluationTime(java.lang.Long value) {
    this.lastEvaluationTime = value;
  }

  /**
   * Creates a new EnrichedHub RecordBuilder.
   * @return A new EnrichedHub RecordBuilder
   */
  public static com.fretron.Model.EnrichedHub.Builder newBuilder() {
    return new com.fretron.Model.EnrichedHub.Builder();
  }

  /**
   * Creates a new EnrichedHub RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnrichedHub RecordBuilder
   */
  public static com.fretron.Model.EnrichedHub.Builder newBuilder(com.fretron.Model.EnrichedHub.Builder other) {
    return new com.fretron.Model.EnrichedHub.Builder(other);
  }

  /**
   * Creates a new EnrichedHub RecordBuilder by copying an existing EnrichedHub instance.
   * @param other The existing instance to copy.
   * @return A new EnrichedHub RecordBuilder
   */
  public static com.fretron.Model.EnrichedHub.Builder newBuilder(com.fretron.Model.EnrichedHub other) {
    return new com.fretron.Model.EnrichedHub.Builder(other);
  }

  /**
   * RecordBuilder for EnrichedHub instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnrichedHub>
    implements org.apache.avro.data.RecordBuilder<EnrichedHub> {

    private com.fretron.Model.Place hub;
    private com.fretron.Model.Place.Builder hubBuilder;
    private com.fretron.Model.LitePosition evaluationLocation;
    private com.fretron.Model.LitePosition.Builder evaluationLocationBuilder;
    private java.lang.Long lastEvaluationTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.EnrichedHub.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hub)) {
        this.hub = data().deepCopy(fields()[0].schema(), other.hub);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHubBuilder()) {
        this.hubBuilder = com.fretron.Model.Place.newBuilder(other.getHubBuilder());
      }
      if (isValidValue(fields()[1], other.evaluationLocation)) {
        this.evaluationLocation = data().deepCopy(fields()[1].schema(), other.evaluationLocation);
        fieldSetFlags()[1] = true;
      }
      if (other.hasEvaluationLocationBuilder()) {
        this.evaluationLocationBuilder = com.fretron.Model.LitePosition.newBuilder(other.getEvaluationLocationBuilder());
      }
      if (isValidValue(fields()[2], other.lastEvaluationTime)) {
        this.lastEvaluationTime = data().deepCopy(fields()[2].schema(), other.lastEvaluationTime);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EnrichedHub instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.EnrichedHub other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.hub)) {
        this.hub = data().deepCopy(fields()[0].schema(), other.hub);
        fieldSetFlags()[0] = true;
      }
      this.hubBuilder = null;
      if (isValidValue(fields()[1], other.evaluationLocation)) {
        this.evaluationLocation = data().deepCopy(fields()[1].schema(), other.evaluationLocation);
        fieldSetFlags()[1] = true;
      }
      this.evaluationLocationBuilder = null;
      if (isValidValue(fields()[2], other.lastEvaluationTime)) {
        this.lastEvaluationTime = data().deepCopy(fields()[2].schema(), other.lastEvaluationTime);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'hub' field.
      * @return The value.
      */
    public com.fretron.Model.Place getHub() {
      return hub;
    }

    /**
      * Sets the value of the 'hub' field.
      * @param value The value of 'hub'.
      * @return This builder.
      */
    public com.fretron.Model.EnrichedHub.Builder setHub(com.fretron.Model.Place value) {
      validate(fields()[0], value);
      this.hubBuilder = null;
      this.hub = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hub' field has been set.
      * @return True if the 'hub' field has been set, false otherwise.
      */
    public boolean hasHub() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'hub' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Place.Builder getHubBuilder() {
      if (hubBuilder == null) {
        if (hasHub()) {
          setHubBuilder(com.fretron.Model.Place.newBuilder(hub));
        } else {
          setHubBuilder(com.fretron.Model.Place.newBuilder());
        }
      }
      return hubBuilder;
    }

    /**
     * Sets the Builder instance for the 'hub' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.EnrichedHub.Builder setHubBuilder(com.fretron.Model.Place.Builder value) {
      clearHub();
      hubBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'hub' field has an active Builder instance
     * @return True if the 'hub' field has an active Builder instance
     */
    public boolean hasHubBuilder() {
      return hubBuilder != null;
    }

    /**
      * Clears the value of the 'hub' field.
      * @return This builder.
      */
    public com.fretron.Model.EnrichedHub.Builder clearHub() {
      hub = null;
      hubBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'evaluationLocation' field.
      * @return The value.
      */
    public com.fretron.Model.LitePosition getEvaluationLocation() {
      return evaluationLocation;
    }

    /**
      * Sets the value of the 'evaluationLocation' field.
      * @param value The value of 'evaluationLocation'.
      * @return This builder.
      */
    public com.fretron.Model.EnrichedHub.Builder setEvaluationLocation(com.fretron.Model.LitePosition value) {
      validate(fields()[1], value);
      this.evaluationLocationBuilder = null;
      this.evaluationLocation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'evaluationLocation' field has been set.
      * @return True if the 'evaluationLocation' field has been set, false otherwise.
      */
    public boolean hasEvaluationLocation() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'evaluationLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.LitePosition.Builder getEvaluationLocationBuilder() {
      if (evaluationLocationBuilder == null) {
        if (hasEvaluationLocation()) {
          setEvaluationLocationBuilder(com.fretron.Model.LitePosition.newBuilder(evaluationLocation));
        } else {
          setEvaluationLocationBuilder(com.fretron.Model.LitePosition.newBuilder());
        }
      }
      return evaluationLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'evaluationLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.EnrichedHub.Builder setEvaluationLocationBuilder(com.fretron.Model.LitePosition.Builder value) {
      clearEvaluationLocation();
      evaluationLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'evaluationLocation' field has an active Builder instance
     * @return True if the 'evaluationLocation' field has an active Builder instance
     */
    public boolean hasEvaluationLocationBuilder() {
      return evaluationLocationBuilder != null;
    }

    /**
      * Clears the value of the 'evaluationLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.EnrichedHub.Builder clearEvaluationLocation() {
      evaluationLocation = null;
      evaluationLocationBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastEvaluationTime' field.
      * @return The value.
      */
    public java.lang.Long getLastEvaluationTime() {
      return lastEvaluationTime;
    }

    /**
      * Sets the value of the 'lastEvaluationTime' field.
      * @param value The value of 'lastEvaluationTime'.
      * @return This builder.
      */
    public com.fretron.Model.EnrichedHub.Builder setLastEvaluationTime(java.lang.Long value) {
      validate(fields()[2], value);
      this.lastEvaluationTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastEvaluationTime' field has been set.
      * @return True if the 'lastEvaluationTime' field has been set, false otherwise.
      */
    public boolean hasLastEvaluationTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastEvaluationTime' field.
      * @return This builder.
      */
    public com.fretron.Model.EnrichedHub.Builder clearLastEvaluationTime() {
      lastEvaluationTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public EnrichedHub build() {
      try {
        EnrichedHub record = new EnrichedHub();
        if (hubBuilder != null) {
          record.hub = this.hubBuilder.build();
        } else {
          record.hub = fieldSetFlags()[0] ? this.hub : (com.fretron.Model.Place) defaultValue(fields()[0]);
        }
        if (evaluationLocationBuilder != null) {
          record.evaluationLocation = this.evaluationLocationBuilder.build();
        } else {
          record.evaluationLocation = fieldSetFlags()[1] ? this.evaluationLocation : (com.fretron.Model.LitePosition) defaultValue(fields()[1]);
        }
        record.lastEvaluationTime = fieldSetFlags()[2] ? this.lastEvaluationTime : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
