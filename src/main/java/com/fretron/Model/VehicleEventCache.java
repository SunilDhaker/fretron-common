/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VehicleEventCache extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1158517469108879035L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VehicleEventCache\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"cache\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EventCache\",\"fields\":[{\"name\":\"eventTopic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Event\",\"fields\":[{\"name\":\"vehicleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"eventData\",\"type\":\"bytes\"},{\"name\":\"eventTopic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"]}]}}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String vehicleId;
  @Deprecated public java.util.List<com.fretron.Model.EventCache> cache;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VehicleEventCache() {}

  /**
   * All-args constructor.
   * @param vehicleId The new value for vehicleId
   * @param cache The new value for cache
   */
  public VehicleEventCache(java.lang.String vehicleId, java.util.List<com.fretron.Model.EventCache> cache) {
    this.vehicleId = vehicleId;
    this.cache = cache;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vehicleId;
    case 1: return cache;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vehicleId = (java.lang.String)value$; break;
    case 1: cache = (java.util.List<com.fretron.Model.EventCache>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.String getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.String value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'cache' field.
   * @return The value of the 'cache' field.
   */
  public java.util.List<com.fretron.Model.EventCache> getCache() {
    return cache;
  }

  /**
   * Sets the value of the 'cache' field.
   * @param value the value to set.
   */
  public void setCache(java.util.List<com.fretron.Model.EventCache> value) {
    this.cache = value;
  }

  /**
   * Creates a new VehicleEventCache RecordBuilder.
   * @return A new VehicleEventCache RecordBuilder
   */
  public static com.fretron.Model.VehicleEventCache.Builder newBuilder() {
    return new com.fretron.Model.VehicleEventCache.Builder();
  }

  /**
   * Creates a new VehicleEventCache RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VehicleEventCache RecordBuilder
   */
  public static com.fretron.Model.VehicleEventCache.Builder newBuilder(com.fretron.Model.VehicleEventCache.Builder other) {
    return new com.fretron.Model.VehicleEventCache.Builder(other);
  }

  /**
   * Creates a new VehicleEventCache RecordBuilder by copying an existing VehicleEventCache instance.
   * @param other The existing instance to copy.
   * @return A new VehicleEventCache RecordBuilder
   */
  public static com.fretron.Model.VehicleEventCache.Builder newBuilder(com.fretron.Model.VehicleEventCache other) {
    return new com.fretron.Model.VehicleEventCache.Builder(other);
  }

  /**
   * RecordBuilder for VehicleEventCache instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VehicleEventCache>
    implements org.apache.avro.data.RecordBuilder<VehicleEventCache> {

    private java.lang.String vehicleId;
    private java.util.List<com.fretron.Model.EventCache> cache;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.VehicleEventCache.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[0].schema(), other.vehicleId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cache)) {
        this.cache = data().deepCopy(fields()[1].schema(), other.cache);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VehicleEventCache instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.VehicleEventCache other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[0].schema(), other.vehicleId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cache)) {
        this.cache = data().deepCopy(fields()[1].schema(), other.cache);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.String getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleEventCache.Builder setVehicleId(java.lang.String value) {
      validate(fields()[0], value);
      this.vehicleId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleEventCache.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cache' field.
      * @return The value.
      */
    public java.util.List<com.fretron.Model.EventCache> getCache() {
      return cache;
    }

    /**
      * Sets the value of the 'cache' field.
      * @param value The value of 'cache'.
      * @return This builder.
      */
    public com.fretron.Model.VehicleEventCache.Builder setCache(java.util.List<com.fretron.Model.EventCache> value) {
      validate(fields()[1], value);
      this.cache = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cache' field has been set.
      * @return True if the 'cache' field has been set, false otherwise.
      */
    public boolean hasCache() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cache' field.
      * @return This builder.
      */
    public com.fretron.Model.VehicleEventCache.Builder clearCache() {
      cache = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public VehicleEventCache build() {
      try {
        VehicleEventCache record = new VehicleEventCache();
        record.vehicleId = fieldSetFlags()[0] ? this.vehicleId : (java.lang.String) defaultValue(fields()[0]);
        record.cache = fieldSetFlags()[1] ? this.cache : (java.util.List<com.fretron.Model.EventCache>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
