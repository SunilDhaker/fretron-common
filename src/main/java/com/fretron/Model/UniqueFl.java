/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UniqueFl extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5303208944213826247L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UniqueFl\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"flName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"originCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"destinationCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"cityGeofence\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geofence\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundry\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Circle\",\"fields\":[{\"name\":\"center\",\"type\":\"Location\"},{\"name\":\"radius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"GeofenceType\",\"symbols\":[\"Proximity\",\"Polygon\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"googleLocation\",\"type\":[\"null\",\"Location\"],\"default\":null},{\"name\":\"jobId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userMarkedBoundry\",\"type\":[\"null\",\"Geofence\"],\"default\":null},{\"name\":\"totalCount\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String flName;
  @Deprecated public java.lang.Integer originCount;
  @Deprecated public java.lang.Integer destinationCount;
  @Deprecated public com.fretron.Model.Geofence cityGeofence;
  @Deprecated public com.fretron.Model.Location googleLocation;
  @Deprecated public java.lang.String jobId;
  @Deprecated public com.fretron.Model.Geofence userMarkedBoundry;
  @Deprecated public java.lang.Integer totalCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UniqueFl() {}

  /**
   * All-args constructor.
   * @param flName The new value for flName
   * @param originCount The new value for originCount
   * @param destinationCount The new value for destinationCount
   * @param cityGeofence The new value for cityGeofence
   * @param googleLocation The new value for googleLocation
   * @param jobId The new value for jobId
   * @param userMarkedBoundry The new value for userMarkedBoundry
   * @param totalCount The new value for totalCount
   */
  public UniqueFl(java.lang.String flName, java.lang.Integer originCount, java.lang.Integer destinationCount, com.fretron.Model.Geofence cityGeofence, com.fretron.Model.Location googleLocation, java.lang.String jobId, com.fretron.Model.Geofence userMarkedBoundry, java.lang.Integer totalCount) {
    this.flName = flName;
    this.originCount = originCount;
    this.destinationCount = destinationCount;
    this.cityGeofence = cityGeofence;
    this.googleLocation = googleLocation;
    this.jobId = jobId;
    this.userMarkedBoundry = userMarkedBoundry;
    this.totalCount = totalCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flName;
    case 1: return originCount;
    case 2: return destinationCount;
    case 3: return cityGeofence;
    case 4: return googleLocation;
    case 5: return jobId;
    case 6: return userMarkedBoundry;
    case 7: return totalCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flName = (java.lang.String)value$; break;
    case 1: originCount = (java.lang.Integer)value$; break;
    case 2: destinationCount = (java.lang.Integer)value$; break;
    case 3: cityGeofence = (com.fretron.Model.Geofence)value$; break;
    case 4: googleLocation = (com.fretron.Model.Location)value$; break;
    case 5: jobId = (java.lang.String)value$; break;
    case 6: userMarkedBoundry = (com.fretron.Model.Geofence)value$; break;
    case 7: totalCount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'flName' field.
   * @return The value of the 'flName' field.
   */
  public java.lang.String getFlName() {
    return flName;
  }

  /**
   * Sets the value of the 'flName' field.
   * @param value the value to set.
   */
  public void setFlName(java.lang.String value) {
    this.flName = value;
  }

  /**
   * Gets the value of the 'originCount' field.
   * @return The value of the 'originCount' field.
   */
  public java.lang.Integer getOriginCount() {
    return originCount;
  }

  /**
   * Sets the value of the 'originCount' field.
   * @param value the value to set.
   */
  public void setOriginCount(java.lang.Integer value) {
    this.originCount = value;
  }

  /**
   * Gets the value of the 'destinationCount' field.
   * @return The value of the 'destinationCount' field.
   */
  public java.lang.Integer getDestinationCount() {
    return destinationCount;
  }

  /**
   * Sets the value of the 'destinationCount' field.
   * @param value the value to set.
   */
  public void setDestinationCount(java.lang.Integer value) {
    this.destinationCount = value;
  }

  /**
   * Gets the value of the 'cityGeofence' field.
   * @return The value of the 'cityGeofence' field.
   */
  public com.fretron.Model.Geofence getCityGeofence() {
    return cityGeofence;
  }

  /**
   * Sets the value of the 'cityGeofence' field.
   * @param value the value to set.
   */
  public void setCityGeofence(com.fretron.Model.Geofence value) {
    this.cityGeofence = value;
  }

  /**
   * Gets the value of the 'googleLocation' field.
   * @return The value of the 'googleLocation' field.
   */
  public com.fretron.Model.Location getGoogleLocation() {
    return googleLocation;
  }

  /**
   * Sets the value of the 'googleLocation' field.
   * @param value the value to set.
   */
  public void setGoogleLocation(com.fretron.Model.Location value) {
    this.googleLocation = value;
  }

  /**
   * Gets the value of the 'jobId' field.
   * @return The value of the 'jobId' field.
   */
  public java.lang.String getJobId() {
    return jobId;
  }

  /**
   * Sets the value of the 'jobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.String value) {
    this.jobId = value;
  }

  /**
   * Gets the value of the 'userMarkedBoundry' field.
   * @return The value of the 'userMarkedBoundry' field.
   */
  public com.fretron.Model.Geofence getUserMarkedBoundry() {
    return userMarkedBoundry;
  }

  /**
   * Sets the value of the 'userMarkedBoundry' field.
   * @param value the value to set.
   */
  public void setUserMarkedBoundry(com.fretron.Model.Geofence value) {
    this.userMarkedBoundry = value;
  }

  /**
   * Gets the value of the 'totalCount' field.
   * @return The value of the 'totalCount' field.
   */
  public java.lang.Integer getTotalCount() {
    return totalCount;
  }

  /**
   * Sets the value of the 'totalCount' field.
   * @param value the value to set.
   */
  public void setTotalCount(java.lang.Integer value) {
    this.totalCount = value;
  }

  /**
   * Creates a new UniqueFl RecordBuilder.
   * @return A new UniqueFl RecordBuilder
   */
  public static com.fretron.Model.UniqueFl.Builder newBuilder() {
    return new com.fretron.Model.UniqueFl.Builder();
  }

  /**
   * Creates a new UniqueFl RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UniqueFl RecordBuilder
   */
  public static com.fretron.Model.UniqueFl.Builder newBuilder(com.fretron.Model.UniqueFl.Builder other) {
    return new com.fretron.Model.UniqueFl.Builder(other);
  }

  /**
   * Creates a new UniqueFl RecordBuilder by copying an existing UniqueFl instance.
   * @param other The existing instance to copy.
   * @return A new UniqueFl RecordBuilder
   */
  public static com.fretron.Model.UniqueFl.Builder newBuilder(com.fretron.Model.UniqueFl other) {
    return new com.fretron.Model.UniqueFl.Builder(other);
  }

  /**
   * RecordBuilder for UniqueFl instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UniqueFl>
    implements org.apache.avro.data.RecordBuilder<UniqueFl> {

    private java.lang.String flName;
    private java.lang.Integer originCount;
    private java.lang.Integer destinationCount;
    private com.fretron.Model.Geofence cityGeofence;
    private com.fretron.Model.Geofence.Builder cityGeofenceBuilder;
    private com.fretron.Model.Location googleLocation;
    private com.fretron.Model.Location.Builder googleLocationBuilder;
    private java.lang.String jobId;
    private com.fretron.Model.Geofence userMarkedBoundry;
    private com.fretron.Model.Geofence.Builder userMarkedBoundryBuilder;
    private java.lang.Integer totalCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.UniqueFl.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flName)) {
        this.flName = data().deepCopy(fields()[0].schema(), other.flName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.originCount)) {
        this.originCount = data().deepCopy(fields()[1].schema(), other.originCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.destinationCount)) {
        this.destinationCount = data().deepCopy(fields()[2].schema(), other.destinationCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cityGeofence)) {
        this.cityGeofence = data().deepCopy(fields()[3].schema(), other.cityGeofence);
        fieldSetFlags()[3] = true;
      }
      if (other.hasCityGeofenceBuilder()) {
        this.cityGeofenceBuilder = com.fretron.Model.Geofence.newBuilder(other.getCityGeofenceBuilder());
      }
      if (isValidValue(fields()[4], other.googleLocation)) {
        this.googleLocation = data().deepCopy(fields()[4].schema(), other.googleLocation);
        fieldSetFlags()[4] = true;
      }
      if (other.hasGoogleLocationBuilder()) {
        this.googleLocationBuilder = com.fretron.Model.Location.newBuilder(other.getGoogleLocationBuilder());
      }
      if (isValidValue(fields()[5], other.jobId)) {
        this.jobId = data().deepCopy(fields()[5].schema(), other.jobId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.userMarkedBoundry)) {
        this.userMarkedBoundry = data().deepCopy(fields()[6].schema(), other.userMarkedBoundry);
        fieldSetFlags()[6] = true;
      }
      if (other.hasUserMarkedBoundryBuilder()) {
        this.userMarkedBoundryBuilder = com.fretron.Model.Geofence.newBuilder(other.getUserMarkedBoundryBuilder());
      }
      if (isValidValue(fields()[7], other.totalCount)) {
        this.totalCount = data().deepCopy(fields()[7].schema(), other.totalCount);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UniqueFl instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.UniqueFl other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.flName)) {
        this.flName = data().deepCopy(fields()[0].schema(), other.flName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.originCount)) {
        this.originCount = data().deepCopy(fields()[1].schema(), other.originCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.destinationCount)) {
        this.destinationCount = data().deepCopy(fields()[2].schema(), other.destinationCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cityGeofence)) {
        this.cityGeofence = data().deepCopy(fields()[3].schema(), other.cityGeofence);
        fieldSetFlags()[3] = true;
      }
      this.cityGeofenceBuilder = null;
      if (isValidValue(fields()[4], other.googleLocation)) {
        this.googleLocation = data().deepCopy(fields()[4].schema(), other.googleLocation);
        fieldSetFlags()[4] = true;
      }
      this.googleLocationBuilder = null;
      if (isValidValue(fields()[5], other.jobId)) {
        this.jobId = data().deepCopy(fields()[5].schema(), other.jobId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.userMarkedBoundry)) {
        this.userMarkedBoundry = data().deepCopy(fields()[6].schema(), other.userMarkedBoundry);
        fieldSetFlags()[6] = true;
      }
      this.userMarkedBoundryBuilder = null;
      if (isValidValue(fields()[7], other.totalCount)) {
        this.totalCount = data().deepCopy(fields()[7].schema(), other.totalCount);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'flName' field.
      * @return The value.
      */
    public java.lang.String getFlName() {
      return flName;
    }

    /**
      * Sets the value of the 'flName' field.
      * @param value The value of 'flName'.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder setFlName(java.lang.String value) {
      validate(fields()[0], value);
      this.flName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flName' field has been set.
      * @return True if the 'flName' field has been set, false otherwise.
      */
    public boolean hasFlName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'flName' field.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder clearFlName() {
      flName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'originCount' field.
      * @return The value.
      */
    public java.lang.Integer getOriginCount() {
      return originCount;
    }

    /**
      * Sets the value of the 'originCount' field.
      * @param value The value of 'originCount'.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder setOriginCount(java.lang.Integer value) {
      validate(fields()[1], value);
      this.originCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'originCount' field has been set.
      * @return True if the 'originCount' field has been set, false otherwise.
      */
    public boolean hasOriginCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'originCount' field.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder clearOriginCount() {
      originCount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationCount' field.
      * @return The value.
      */
    public java.lang.Integer getDestinationCount() {
      return destinationCount;
    }

    /**
      * Sets the value of the 'destinationCount' field.
      * @param value The value of 'destinationCount'.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder setDestinationCount(java.lang.Integer value) {
      validate(fields()[2], value);
      this.destinationCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationCount' field has been set.
      * @return True if the 'destinationCount' field has been set, false otherwise.
      */
    public boolean hasDestinationCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'destinationCount' field.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder clearDestinationCount() {
      destinationCount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cityGeofence' field.
      * @return The value.
      */
    public com.fretron.Model.Geofence getCityGeofence() {
      return cityGeofence;
    }

    /**
      * Sets the value of the 'cityGeofence' field.
      * @param value The value of 'cityGeofence'.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder setCityGeofence(com.fretron.Model.Geofence value) {
      validate(fields()[3], value);
      this.cityGeofenceBuilder = null;
      this.cityGeofence = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cityGeofence' field has been set.
      * @return True if the 'cityGeofence' field has been set, false otherwise.
      */
    public boolean hasCityGeofence() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'cityGeofence' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Geofence.Builder getCityGeofenceBuilder() {
      if (cityGeofenceBuilder == null) {
        if (hasCityGeofence()) {
          setCityGeofenceBuilder(com.fretron.Model.Geofence.newBuilder(cityGeofence));
        } else {
          setCityGeofenceBuilder(com.fretron.Model.Geofence.newBuilder());
        }
      }
      return cityGeofenceBuilder;
    }

    /**
     * Sets the Builder instance for the 'cityGeofence' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.UniqueFl.Builder setCityGeofenceBuilder(com.fretron.Model.Geofence.Builder value) {
      clearCityGeofence();
      cityGeofenceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'cityGeofence' field has an active Builder instance
     * @return True if the 'cityGeofence' field has an active Builder instance
     */
    public boolean hasCityGeofenceBuilder() {
      return cityGeofenceBuilder != null;
    }

    /**
      * Clears the value of the 'cityGeofence' field.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder clearCityGeofence() {
      cityGeofence = null;
      cityGeofenceBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'googleLocation' field.
      * @return The value.
      */
    public com.fretron.Model.Location getGoogleLocation() {
      return googleLocation;
    }

    /**
      * Sets the value of the 'googleLocation' field.
      * @param value The value of 'googleLocation'.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder setGoogleLocation(com.fretron.Model.Location value) {
      validate(fields()[4], value);
      this.googleLocationBuilder = null;
      this.googleLocation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'googleLocation' field has been set.
      * @return True if the 'googleLocation' field has been set, false otherwise.
      */
    public boolean hasGoogleLocation() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'googleLocation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Location.Builder getGoogleLocationBuilder() {
      if (googleLocationBuilder == null) {
        if (hasGoogleLocation()) {
          setGoogleLocationBuilder(com.fretron.Model.Location.newBuilder(googleLocation));
        } else {
          setGoogleLocationBuilder(com.fretron.Model.Location.newBuilder());
        }
      }
      return googleLocationBuilder;
    }

    /**
     * Sets the Builder instance for the 'googleLocation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.UniqueFl.Builder setGoogleLocationBuilder(com.fretron.Model.Location.Builder value) {
      clearGoogleLocation();
      googleLocationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'googleLocation' field has an active Builder instance
     * @return True if the 'googleLocation' field has an active Builder instance
     */
    public boolean hasGoogleLocationBuilder() {
      return googleLocationBuilder != null;
    }

    /**
      * Clears the value of the 'googleLocation' field.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder clearGoogleLocation() {
      googleLocation = null;
      googleLocationBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobId' field.
      * @return The value.
      */
    public java.lang.String getJobId() {
      return jobId;
    }

    /**
      * Sets the value of the 'jobId' field.
      * @param value The value of 'jobId'.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder setJobId(java.lang.String value) {
      validate(fields()[5], value);
      this.jobId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'jobId' field has been set.
      * @return True if the 'jobId' field has been set, false otherwise.
      */
    public boolean hasJobId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'jobId' field.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder clearJobId() {
      jobId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'userMarkedBoundry' field.
      * @return The value.
      */
    public com.fretron.Model.Geofence getUserMarkedBoundry() {
      return userMarkedBoundry;
    }

    /**
      * Sets the value of the 'userMarkedBoundry' field.
      * @param value The value of 'userMarkedBoundry'.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder setUserMarkedBoundry(com.fretron.Model.Geofence value) {
      validate(fields()[6], value);
      this.userMarkedBoundryBuilder = null;
      this.userMarkedBoundry = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'userMarkedBoundry' field has been set.
      * @return True if the 'userMarkedBoundry' field has been set, false otherwise.
      */
    public boolean hasUserMarkedBoundry() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'userMarkedBoundry' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.Geofence.Builder getUserMarkedBoundryBuilder() {
      if (userMarkedBoundryBuilder == null) {
        if (hasUserMarkedBoundry()) {
          setUserMarkedBoundryBuilder(com.fretron.Model.Geofence.newBuilder(userMarkedBoundry));
        } else {
          setUserMarkedBoundryBuilder(com.fretron.Model.Geofence.newBuilder());
        }
      }
      return userMarkedBoundryBuilder;
    }

    /**
     * Sets the Builder instance for the 'userMarkedBoundry' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.UniqueFl.Builder setUserMarkedBoundryBuilder(com.fretron.Model.Geofence.Builder value) {
      clearUserMarkedBoundry();
      userMarkedBoundryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'userMarkedBoundry' field has an active Builder instance
     * @return True if the 'userMarkedBoundry' field has an active Builder instance
     */
    public boolean hasUserMarkedBoundryBuilder() {
      return userMarkedBoundryBuilder != null;
    }

    /**
      * Clears the value of the 'userMarkedBoundry' field.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder clearUserMarkedBoundry() {
      userMarkedBoundry = null;
      userMarkedBoundryBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalCount' field.
      * @return The value.
      */
    public java.lang.Integer getTotalCount() {
      return totalCount;
    }

    /**
      * Sets the value of the 'totalCount' field.
      * @param value The value of 'totalCount'.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder setTotalCount(java.lang.Integer value) {
      validate(fields()[7], value);
      this.totalCount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'totalCount' field has been set.
      * @return True if the 'totalCount' field has been set, false otherwise.
      */
    public boolean hasTotalCount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'totalCount' field.
      * @return This builder.
      */
    public com.fretron.Model.UniqueFl.Builder clearTotalCount() {
      totalCount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public UniqueFl build() {
      try {
        UniqueFl record = new UniqueFl();
        record.flName = fieldSetFlags()[0] ? this.flName : (java.lang.String) defaultValue(fields()[0]);
        record.originCount = fieldSetFlags()[1] ? this.originCount : (java.lang.Integer) defaultValue(fields()[1]);
        record.destinationCount = fieldSetFlags()[2] ? this.destinationCount : (java.lang.Integer) defaultValue(fields()[2]);
        if (cityGeofenceBuilder != null) {
          record.cityGeofence = this.cityGeofenceBuilder.build();
        } else {
          record.cityGeofence = fieldSetFlags()[3] ? this.cityGeofence : (com.fretron.Model.Geofence) defaultValue(fields()[3]);
        }
        if (googleLocationBuilder != null) {
          record.googleLocation = this.googleLocationBuilder.build();
        } else {
          record.googleLocation = fieldSetFlags()[4] ? this.googleLocation : (com.fretron.Model.Location) defaultValue(fields()[4]);
        }
        record.jobId = fieldSetFlags()[5] ? this.jobId : (java.lang.String) defaultValue(fields()[5]);
        if (userMarkedBoundryBuilder != null) {
          record.userMarkedBoundry = this.userMarkedBoundryBuilder.build();
        } else {
          record.userMarkedBoundry = fieldSetFlags()[6] ? this.userMarkedBoundry : (com.fretron.Model.Geofence) defaultValue(fields()[6]);
        }
        record.totalCount = fieldSetFlags()[7] ? this.totalCount : (java.lang.Integer) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
