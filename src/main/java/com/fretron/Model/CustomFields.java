/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CustomFields extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3738627198267299173L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomFields\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"fieldType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fieldKey\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"multiple\",\"type\":\"boolean\",\"default\":false},{\"name\":\"isRemark\",\"type\":\"boolean\",\"default\":false},{\"name\":\"remark\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"required\",\"type\":\"boolean\",\"default\":false},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"options\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"indexedValue\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"valueType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"input\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"unit\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String fieldType;
  @Deprecated public java.lang.String fieldKey;
  @Deprecated public java.lang.String value;
  @Deprecated public boolean multiple;
  @Deprecated public boolean isRemark;
  @Deprecated public java.lang.String remark;
  @Deprecated public boolean required;
  @Deprecated public java.lang.String description;
  @Deprecated public java.util.List<java.lang.String> options;
  @Deprecated public java.util.List<java.lang.String> indexedValue;
  @Deprecated public java.lang.String valueType;
  @Deprecated public java.lang.String input;
  @Deprecated public java.lang.String unit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomFields() {}

  /**
   * All-args constructor.
   * @param fieldType The new value for fieldType
   * @param fieldKey The new value for fieldKey
   * @param value The new value for value
   * @param multiple The new value for multiple
   * @param isRemark The new value for isRemark
   * @param remark The new value for remark
   * @param required The new value for required
   * @param description The new value for description
   * @param options The new value for options
   * @param indexedValue The new value for indexedValue
   * @param valueType The new value for valueType
   * @param input The new value for input
   * @param unit The new value for unit
   */
  public CustomFields(java.lang.String fieldType, java.lang.String fieldKey, java.lang.String value, java.lang.Boolean multiple, java.lang.Boolean isRemark, java.lang.String remark, java.lang.Boolean required, java.lang.String description, java.util.List<java.lang.String> options, java.util.List<java.lang.String> indexedValue, java.lang.String valueType, java.lang.String input, java.lang.String unit) {
    this.fieldType = fieldType;
    this.fieldKey = fieldKey;
    this.value = value;
    this.multiple = multiple;
    this.isRemark = isRemark;
    this.remark = remark;
    this.required = required;
    this.description = description;
    this.options = options;
    this.indexedValue = indexedValue;
    this.valueType = valueType;
    this.input = input;
    this.unit = unit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fieldType;
    case 1: return fieldKey;
    case 2: return value;
    case 3: return multiple;
    case 4: return isRemark;
    case 5: return remark;
    case 6: return required;
    case 7: return description;
    case 8: return options;
    case 9: return indexedValue;
    case 10: return valueType;
    case 11: return input;
    case 12: return unit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fieldType = (java.lang.String)value$; break;
    case 1: fieldKey = (java.lang.String)value$; break;
    case 2: value = (java.lang.String)value$; break;
    case 3: multiple = (java.lang.Boolean)value$; break;
    case 4: isRemark = (java.lang.Boolean)value$; break;
    case 5: remark = (java.lang.String)value$; break;
    case 6: required = (java.lang.Boolean)value$; break;
    case 7: description = (java.lang.String)value$; break;
    case 8: options = (java.util.List<java.lang.String>)value$; break;
    case 9: indexedValue = (java.util.List<java.lang.String>)value$; break;
    case 10: valueType = (java.lang.String)value$; break;
    case 11: input = (java.lang.String)value$; break;
    case 12: unit = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fieldType' field.
   * @return The value of the 'fieldType' field.
   */
  public java.lang.String getFieldType() {
    return fieldType;
  }

  /**
   * Sets the value of the 'fieldType' field.
   * @param value the value to set.
   */
  public void setFieldType(java.lang.String value) {
    this.fieldType = value;
  }

  /**
   * Gets the value of the 'fieldKey' field.
   * @return The value of the 'fieldKey' field.
   */
  public java.lang.String getFieldKey() {
    return fieldKey;
  }

  /**
   * Sets the value of the 'fieldKey' field.
   * @param value the value to set.
   */
  public void setFieldKey(java.lang.String value) {
    this.fieldKey = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'multiple' field.
   * @return The value of the 'multiple' field.
   */
  public java.lang.Boolean getMultiple() {
    return multiple;
  }

  /**
   * Sets the value of the 'multiple' field.
   * @param value the value to set.
   */
  public void setMultiple(java.lang.Boolean value) {
    this.multiple = value;
  }

  /**
   * Gets the value of the 'isRemark' field.
   * @return The value of the 'isRemark' field.
   */
  public java.lang.Boolean getIsRemark() {
    return isRemark;
  }

  /**
   * Sets the value of the 'isRemark' field.
   * @param value the value to set.
   */
  public void setIsRemark(java.lang.Boolean value) {
    this.isRemark = value;
  }

  /**
   * Gets the value of the 'remark' field.
   * @return The value of the 'remark' field.
   */
  public java.lang.String getRemark() {
    return remark;
  }

  /**
   * Sets the value of the 'remark' field.
   * @param value the value to set.
   */
  public void setRemark(java.lang.String value) {
    this.remark = value;
  }

  /**
   * Gets the value of the 'required' field.
   * @return The value of the 'required' field.
   */
  public java.lang.Boolean getRequired() {
    return required;
  }

  /**
   * Sets the value of the 'required' field.
   * @param value the value to set.
   */
  public void setRequired(java.lang.Boolean value) {
    this.required = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'options' field.
   * @return The value of the 'options' field.
   */
  public java.util.List<java.lang.String> getOptions() {
    return options;
  }

  /**
   * Sets the value of the 'options' field.
   * @param value the value to set.
   */
  public void setOptions(java.util.List<java.lang.String> value) {
    this.options = value;
  }

  /**
   * Gets the value of the 'indexedValue' field.
   * @return The value of the 'indexedValue' field.
   */
  public java.util.List<java.lang.String> getIndexedValue() {
    return indexedValue;
  }

  /**
   * Sets the value of the 'indexedValue' field.
   * @param value the value to set.
   */
  public void setIndexedValue(java.util.List<java.lang.String> value) {
    this.indexedValue = value;
  }

  /**
   * Gets the value of the 'valueType' field.
   * @return The value of the 'valueType' field.
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * Sets the value of the 'valueType' field.
   * @param value the value to set.
   */
  public void setValueType(java.lang.String value) {
    this.valueType = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return The value of the 'input' field.
   */
  public java.lang.String getInput() {
    return input;
  }

  /**
   * Sets the value of the 'input' field.
   * @param value the value to set.
   */
  public void setInput(java.lang.String value) {
    this.input = value;
  }

  /**
   * Gets the value of the 'unit' field.
   * @return The value of the 'unit' field.
   */
  public java.lang.String getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * @param value the value to set.
   */
  public void setUnit(java.lang.String value) {
    this.unit = value;
  }

  /**
   * Creates a new CustomFields RecordBuilder.
   * @return A new CustomFields RecordBuilder
   */
  public static com.fretron.Model.CustomFields.Builder newBuilder() {
    return new com.fretron.Model.CustomFields.Builder();
  }

  /**
   * Creates a new CustomFields RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomFields RecordBuilder
   */
  public static com.fretron.Model.CustomFields.Builder newBuilder(com.fretron.Model.CustomFields.Builder other) {
    return new com.fretron.Model.CustomFields.Builder(other);
  }

  /**
   * Creates a new CustomFields RecordBuilder by copying an existing CustomFields instance.
   * @param other The existing instance to copy.
   * @return A new CustomFields RecordBuilder
   */
  public static com.fretron.Model.CustomFields.Builder newBuilder(com.fretron.Model.CustomFields other) {
    return new com.fretron.Model.CustomFields.Builder(other);
  }

  /**
   * RecordBuilder for CustomFields instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomFields>
    implements org.apache.avro.data.RecordBuilder<CustomFields> {

    private java.lang.String fieldType;
    private java.lang.String fieldKey;
    private java.lang.String value;
    private boolean multiple;
    private boolean isRemark;
    private java.lang.String remark;
    private boolean required;
    private java.lang.String description;
    private java.util.List<java.lang.String> options;
    private java.util.List<java.lang.String> indexedValue;
    private java.lang.String valueType;
    private java.lang.String input;
    private java.lang.String unit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.CustomFields.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fieldType)) {
        this.fieldType = data().deepCopy(fields()[0].schema(), other.fieldType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldKey)) {
        this.fieldKey = data().deepCopy(fields()[1].schema(), other.fieldKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.multiple)) {
        this.multiple = data().deepCopy(fields()[3].schema(), other.multiple);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isRemark)) {
        this.isRemark = data().deepCopy(fields()[4].schema(), other.isRemark);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.remark)) {
        this.remark = data().deepCopy(fields()[5].schema(), other.remark);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.required)) {
        this.required = data().deepCopy(fields()[6].schema(), other.required);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.description)) {
        this.description = data().deepCopy(fields()[7].schema(), other.description);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.options)) {
        this.options = data().deepCopy(fields()[8].schema(), other.options);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.indexedValue)) {
        this.indexedValue = data().deepCopy(fields()[9].schema(), other.indexedValue);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.valueType)) {
        this.valueType = data().deepCopy(fields()[10].schema(), other.valueType);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.input)) {
        this.input = data().deepCopy(fields()[11].schema(), other.input);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.unit)) {
        this.unit = data().deepCopy(fields()[12].schema(), other.unit);
        fieldSetFlags()[12] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CustomFields instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.CustomFields other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fieldType)) {
        this.fieldType = data().deepCopy(fields()[0].schema(), other.fieldType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldKey)) {
        this.fieldKey = data().deepCopy(fields()[1].schema(), other.fieldKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.multiple)) {
        this.multiple = data().deepCopy(fields()[3].schema(), other.multiple);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isRemark)) {
        this.isRemark = data().deepCopy(fields()[4].schema(), other.isRemark);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.remark)) {
        this.remark = data().deepCopy(fields()[5].schema(), other.remark);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.required)) {
        this.required = data().deepCopy(fields()[6].schema(), other.required);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.description)) {
        this.description = data().deepCopy(fields()[7].schema(), other.description);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.options)) {
        this.options = data().deepCopy(fields()[8].schema(), other.options);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.indexedValue)) {
        this.indexedValue = data().deepCopy(fields()[9].schema(), other.indexedValue);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.valueType)) {
        this.valueType = data().deepCopy(fields()[10].schema(), other.valueType);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.input)) {
        this.input = data().deepCopy(fields()[11].schema(), other.input);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.unit)) {
        this.unit = data().deepCopy(fields()[12].schema(), other.unit);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'fieldType' field.
      * @return The value.
      */
    public java.lang.String getFieldType() {
      return fieldType;
    }

    /**
      * Sets the value of the 'fieldType' field.
      * @param value The value of 'fieldType'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setFieldType(java.lang.String value) {
      validate(fields()[0], value);
      this.fieldType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldType' field has been set.
      * @return True if the 'fieldType' field has been set, false otherwise.
      */
    public boolean hasFieldType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fieldType' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearFieldType() {
      fieldType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldKey' field.
      * @return The value.
      */
    public java.lang.String getFieldKey() {
      return fieldKey;
    }

    /**
      * Sets the value of the 'fieldKey' field.
      * @param value The value of 'fieldKey'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setFieldKey(java.lang.String value) {
      validate(fields()[1], value);
      this.fieldKey = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldKey' field has been set.
      * @return True if the 'fieldKey' field has been set, false otherwise.
      */
    public boolean hasFieldKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fieldKey' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearFieldKey() {
      fieldKey = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setValue(java.lang.String value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'multiple' field.
      * @return The value.
      */
    public java.lang.Boolean getMultiple() {
      return multiple;
    }

    /**
      * Sets the value of the 'multiple' field.
      * @param value The value of 'multiple'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setMultiple(boolean value) {
      validate(fields()[3], value);
      this.multiple = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'multiple' field has been set.
      * @return True if the 'multiple' field has been set, false otherwise.
      */
    public boolean hasMultiple() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'multiple' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearMultiple() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRemark' field.
      * @return The value.
      */
    public java.lang.Boolean getIsRemark() {
      return isRemark;
    }

    /**
      * Sets the value of the 'isRemark' field.
      * @param value The value of 'isRemark'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setIsRemark(boolean value) {
      validate(fields()[4], value);
      this.isRemark = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'isRemark' field has been set.
      * @return True if the 'isRemark' field has been set, false otherwise.
      */
    public boolean hasIsRemark() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isRemark' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearIsRemark() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'remark' field.
      * @return The value.
      */
    public java.lang.String getRemark() {
      return remark;
    }

    /**
      * Sets the value of the 'remark' field.
      * @param value The value of 'remark'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setRemark(java.lang.String value) {
      validate(fields()[5], value);
      this.remark = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'remark' field has been set.
      * @return True if the 'remark' field has been set, false otherwise.
      */
    public boolean hasRemark() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'remark' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearRemark() {
      remark = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'required' field.
      * @return The value.
      */
    public java.lang.Boolean getRequired() {
      return required;
    }

    /**
      * Sets the value of the 'required' field.
      * @param value The value of 'required'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setRequired(boolean value) {
      validate(fields()[6], value);
      this.required = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'required' field has been set.
      * @return True if the 'required' field has been set, false otherwise.
      */
    public boolean hasRequired() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'required' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearRequired() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setDescription(java.lang.String value) {
      validate(fields()[7], value);
      this.description = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearDescription() {
      description = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'options' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getOptions() {
      return options;
    }

    /**
      * Sets the value of the 'options' field.
      * @param value The value of 'options'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setOptions(java.util.List<java.lang.String> value) {
      validate(fields()[8], value);
      this.options = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'options' field has been set.
      * @return True if the 'options' field has been set, false otherwise.
      */
    public boolean hasOptions() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'options' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearOptions() {
      options = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'indexedValue' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getIndexedValue() {
      return indexedValue;
    }

    /**
      * Sets the value of the 'indexedValue' field.
      * @param value The value of 'indexedValue'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setIndexedValue(java.util.List<java.lang.String> value) {
      validate(fields()[9], value);
      this.indexedValue = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'indexedValue' field has been set.
      * @return True if the 'indexedValue' field has been set, false otherwise.
      */
    public boolean hasIndexedValue() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'indexedValue' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearIndexedValue() {
      indexedValue = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueType' field.
      * @return The value.
      */
    public java.lang.String getValueType() {
      return valueType;
    }

    /**
      * Sets the value of the 'valueType' field.
      * @param value The value of 'valueType'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setValueType(java.lang.String value) {
      validate(fields()[10], value);
      this.valueType = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'valueType' field has been set.
      * @return True if the 'valueType' field has been set, false otherwise.
      */
    public boolean hasValueType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'valueType' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearValueType() {
      valueType = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * @return The value.
      */
    public java.lang.String getInput() {
      return input;
    }

    /**
      * Sets the value of the 'input' field.
      * @param value The value of 'input'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setInput(java.lang.String value) {
      validate(fields()[11], value);
      this.input = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'input' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearInput() {
      input = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit' field.
      * @return The value.
      */
    public java.lang.String getUnit() {
      return unit;
    }

    /**
      * Sets the value of the 'unit' field.
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder setUnit(java.lang.String value) {
      validate(fields()[12], value);
      this.unit = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'unit' field.
      * @return This builder.
      */
    public com.fretron.Model.CustomFields.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    public CustomFields build() {
      try {
        CustomFields record = new CustomFields();
        record.fieldType = fieldSetFlags()[0] ? this.fieldType : (java.lang.String) defaultValue(fields()[0]);
        record.fieldKey = fieldSetFlags()[1] ? this.fieldKey : (java.lang.String) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.String) defaultValue(fields()[2]);
        record.multiple = fieldSetFlags()[3] ? this.multiple : (java.lang.Boolean) defaultValue(fields()[3]);
        record.isRemark = fieldSetFlags()[4] ? this.isRemark : (java.lang.Boolean) defaultValue(fields()[4]);
        record.remark = fieldSetFlags()[5] ? this.remark : (java.lang.String) defaultValue(fields()[5]);
        record.required = fieldSetFlags()[6] ? this.required : (java.lang.Boolean) defaultValue(fields()[6]);
        record.description = fieldSetFlags()[7] ? this.description : (java.lang.String) defaultValue(fields()[7]);
        record.options = fieldSetFlags()[8] ? this.options : (java.util.List<java.lang.String>) defaultValue(fields()[8]);
        record.indexedValue = fieldSetFlags()[9] ? this.indexedValue : (java.util.List<java.lang.String>) defaultValue(fields()[9]);
        record.valueType = fieldSetFlags()[10] ? this.valueType : (java.lang.String) defaultValue(fields()[10]);
        record.input = fieldSetFlags()[11] ? this.input : (java.lang.String) defaultValue(fields()[11]);
        record.unit = fieldSetFlags()[12] ? this.unit : (java.lang.String) defaultValue(fields()[12]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
