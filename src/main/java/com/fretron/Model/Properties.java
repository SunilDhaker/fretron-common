/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Properties extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2334074176666876240L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Properties\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"catagory\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"level\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customeFields\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"hubId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"district\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"subDistrict\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String catagory;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String address;
  @Deprecated public java.lang.String placeId;
  @Deprecated public java.lang.String level;
  @Deprecated public java.lang.String customeFields;
  @Deprecated public java.lang.String state;
  @Deprecated public java.lang.String hubId;
  @Deprecated public java.lang.String district;
  @Deprecated public java.lang.String subDistrict;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Properties() {}

  /**
   * All-args constructor.
   * @param catagory The new value for catagory
   * @param name The new value for name
   * @param address The new value for address
   * @param placeId The new value for placeId
   * @param level The new value for level
   * @param customeFields The new value for customeFields
   * @param state The new value for state
   * @param hubId The new value for hubId
   * @param district The new value for district
   * @param subDistrict The new value for subDistrict
   */
  public Properties(java.lang.String catagory, java.lang.String name, java.lang.String address, java.lang.String placeId, java.lang.String level, java.lang.String customeFields, java.lang.String state, java.lang.String hubId, java.lang.String district, java.lang.String subDistrict) {
    this.catagory = catagory;
    this.name = name;
    this.address = address;
    this.placeId = placeId;
    this.level = level;
    this.customeFields = customeFields;
    this.state = state;
    this.hubId = hubId;
    this.district = district;
    this.subDistrict = subDistrict;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return catagory;
    case 1: return name;
    case 2: return address;
    case 3: return placeId;
    case 4: return level;
    case 5: return customeFields;
    case 6: return state;
    case 7: return hubId;
    case 8: return district;
    case 9: return subDistrict;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: catagory = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: address = (java.lang.String)value$; break;
    case 3: placeId = (java.lang.String)value$; break;
    case 4: level = (java.lang.String)value$; break;
    case 5: customeFields = (java.lang.String)value$; break;
    case 6: state = (java.lang.String)value$; break;
    case 7: hubId = (java.lang.String)value$; break;
    case 8: district = (java.lang.String)value$; break;
    case 9: subDistrict = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'catagory' field.
   * @return The value of the 'catagory' field.
   */
  public java.lang.String getCatagory() {
    return catagory;
  }

  /**
   * Sets the value of the 'catagory' field.
   * @param value the value to set.
   */
  public void setCatagory(java.lang.String value) {
    this.catagory = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'placeId' field.
   * @return The value of the 'placeId' field.
   */
  public java.lang.String getPlaceId() {
    return placeId;
  }

  /**
   * Sets the value of the 'placeId' field.
   * @param value the value to set.
   */
  public void setPlaceId(java.lang.String value) {
    this.placeId = value;
  }

  /**
   * Gets the value of the 'level' field.
   * @return The value of the 'level' field.
   */
  public java.lang.String getLevel() {
    return level;
  }

  /**
   * Sets the value of the 'level' field.
   * @param value the value to set.
   */
  public void setLevel(java.lang.String value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'customeFields' field.
   * @return The value of the 'customeFields' field.
   */
  public java.lang.String getCustomeFields() {
    return customeFields;
  }

  /**
   * Sets the value of the 'customeFields' field.
   * @param value the value to set.
   */
  public void setCustomeFields(java.lang.String value) {
    this.customeFields = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'hubId' field.
   * @return The value of the 'hubId' field.
   */
  public java.lang.String getHubId() {
    return hubId;
  }

  /**
   * Sets the value of the 'hubId' field.
   * @param value the value to set.
   */
  public void setHubId(java.lang.String value) {
    this.hubId = value;
  }

  /**
   * Gets the value of the 'district' field.
   * @return The value of the 'district' field.
   */
  public java.lang.String getDistrict() {
    return district;
  }

  /**
   * Sets the value of the 'district' field.
   * @param value the value to set.
   */
  public void setDistrict(java.lang.String value) {
    this.district = value;
  }

  /**
   * Gets the value of the 'subDistrict' field.
   * @return The value of the 'subDistrict' field.
   */
  public java.lang.String getSubDistrict() {
    return subDistrict;
  }

  /**
   * Sets the value of the 'subDistrict' field.
   * @param value the value to set.
   */
  public void setSubDistrict(java.lang.String value) {
    this.subDistrict = value;
  }

  /**
   * Creates a new Properties RecordBuilder.
   * @return A new Properties RecordBuilder
   */
  public static com.fretron.Model.Properties.Builder newBuilder() {
    return new com.fretron.Model.Properties.Builder();
  }

  /**
   * Creates a new Properties RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Properties RecordBuilder
   */
  public static com.fretron.Model.Properties.Builder newBuilder(com.fretron.Model.Properties.Builder other) {
    return new com.fretron.Model.Properties.Builder(other);
  }

  /**
   * Creates a new Properties RecordBuilder by copying an existing Properties instance.
   * @param other The existing instance to copy.
   * @return A new Properties RecordBuilder
   */
  public static com.fretron.Model.Properties.Builder newBuilder(com.fretron.Model.Properties other) {
    return new com.fretron.Model.Properties.Builder(other);
  }

  /**
   * RecordBuilder for Properties instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Properties>
    implements org.apache.avro.data.RecordBuilder<Properties> {

    private java.lang.String catagory;
    private java.lang.String name;
    private java.lang.String address;
    private java.lang.String placeId;
    private java.lang.String level;
    private java.lang.String customeFields;
    private java.lang.String state;
    private java.lang.String hubId;
    private java.lang.String district;
    private java.lang.String subDistrict;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Properties.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.catagory)) {
        this.catagory = data().deepCopy(fields()[0].schema(), other.catagory);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.placeId)) {
        this.placeId = data().deepCopy(fields()[3].schema(), other.placeId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.level)) {
        this.level = data().deepCopy(fields()[4].schema(), other.level);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.customeFields)) {
        this.customeFields = data().deepCopy(fields()[5].schema(), other.customeFields);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hubId)) {
        this.hubId = data().deepCopy(fields()[7].schema(), other.hubId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.district)) {
        this.district = data().deepCopy(fields()[8].schema(), other.district);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.subDistrict)) {
        this.subDistrict = data().deepCopy(fields()[9].schema(), other.subDistrict);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Properties instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Properties other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.catagory)) {
        this.catagory = data().deepCopy(fields()[0].schema(), other.catagory);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.placeId)) {
        this.placeId = data().deepCopy(fields()[3].schema(), other.placeId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.level)) {
        this.level = data().deepCopy(fields()[4].schema(), other.level);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.customeFields)) {
        this.customeFields = data().deepCopy(fields()[5].schema(), other.customeFields);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hubId)) {
        this.hubId = data().deepCopy(fields()[7].schema(), other.hubId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.district)) {
        this.district = data().deepCopy(fields()[8].schema(), other.district);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.subDistrict)) {
        this.subDistrict = data().deepCopy(fields()[9].schema(), other.subDistrict);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'catagory' field.
      * @return The value.
      */
    public java.lang.String getCatagory() {
      return catagory;
    }

    /**
      * Sets the value of the 'catagory' field.
      * @param value The value of 'catagory'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setCatagory(java.lang.String value) {
      validate(fields()[0], value);
      this.catagory = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'catagory' field has been set.
      * @return True if the 'catagory' field has been set, false otherwise.
      */
    public boolean hasCatagory() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'catagory' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearCatagory() {
      catagory = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setAddress(java.lang.String value) {
      validate(fields()[2], value);
      this.address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearAddress() {
      address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'placeId' field.
      * @return The value.
      */
    public java.lang.String getPlaceId() {
      return placeId;
    }

    /**
      * Sets the value of the 'placeId' field.
      * @param value The value of 'placeId'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setPlaceId(java.lang.String value) {
      validate(fields()[3], value);
      this.placeId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'placeId' field has been set.
      * @return True if the 'placeId' field has been set, false otherwise.
      */
    public boolean hasPlaceId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'placeId' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearPlaceId() {
      placeId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'level' field.
      * @return The value.
      */
    public java.lang.String getLevel() {
      return level;
    }

    /**
      * Sets the value of the 'level' field.
      * @param value The value of 'level'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setLevel(java.lang.String value) {
      validate(fields()[4], value);
      this.level = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'level' field has been set.
      * @return True if the 'level' field has been set, false otherwise.
      */
    public boolean hasLevel() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'level' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearLevel() {
      level = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'customeFields' field.
      * @return The value.
      */
    public java.lang.String getCustomeFields() {
      return customeFields;
    }

    /**
      * Sets the value of the 'customeFields' field.
      * @param value The value of 'customeFields'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setCustomeFields(java.lang.String value) {
      validate(fields()[5], value);
      this.customeFields = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'customeFields' field has been set.
      * @return True if the 'customeFields' field has been set, false otherwise.
      */
    public boolean hasCustomeFields() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'customeFields' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearCustomeFields() {
      customeFields = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.String getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setState(java.lang.String value) {
      validate(fields()[6], value);
      this.state = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearState() {
      state = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'hubId' field.
      * @return The value.
      */
    public java.lang.String getHubId() {
      return hubId;
    }

    /**
      * Sets the value of the 'hubId' field.
      * @param value The value of 'hubId'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setHubId(java.lang.String value) {
      validate(fields()[7], value);
      this.hubId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'hubId' field has been set.
      * @return True if the 'hubId' field has been set, false otherwise.
      */
    public boolean hasHubId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'hubId' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearHubId() {
      hubId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'district' field.
      * @return The value.
      */
    public java.lang.String getDistrict() {
      return district;
    }

    /**
      * Sets the value of the 'district' field.
      * @param value The value of 'district'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setDistrict(java.lang.String value) {
      validate(fields()[8], value);
      this.district = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'district' field has been set.
      * @return True if the 'district' field has been set, false otherwise.
      */
    public boolean hasDistrict() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'district' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearDistrict() {
      district = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'subDistrict' field.
      * @return The value.
      */
    public java.lang.String getSubDistrict() {
      return subDistrict;
    }

    /**
      * Sets the value of the 'subDistrict' field.
      * @param value The value of 'subDistrict'.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder setSubDistrict(java.lang.String value) {
      validate(fields()[9], value);
      this.subDistrict = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'subDistrict' field has been set.
      * @return True if the 'subDistrict' field has been set, false otherwise.
      */
    public boolean hasSubDistrict() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'subDistrict' field.
      * @return This builder.
      */
    public com.fretron.Model.Properties.Builder clearSubDistrict() {
      subDistrict = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public Properties build() {
      try {
        Properties record = new Properties();
        record.catagory = fieldSetFlags()[0] ? this.catagory : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.address = fieldSetFlags()[2] ? this.address : (java.lang.String) defaultValue(fields()[2]);
        record.placeId = fieldSetFlags()[3] ? this.placeId : (java.lang.String) defaultValue(fields()[3]);
        record.level = fieldSetFlags()[4] ? this.level : (java.lang.String) defaultValue(fields()[4]);
        record.customeFields = fieldSetFlags()[5] ? this.customeFields : (java.lang.String) defaultValue(fields()[5]);
        record.state = fieldSetFlags()[6] ? this.state : (java.lang.String) defaultValue(fields()[6]);
        record.hubId = fieldSetFlags()[7] ? this.hubId : (java.lang.String) defaultValue(fields()[7]);
        record.district = fieldSetFlags()[8] ? this.district : (java.lang.String) defaultValue(fields()[8]);
        record.subDistrict = fieldSetFlags()[9] ? this.subDistrict : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
