/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Updates extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7558674350787918082L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Updates\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"forwardReasons\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"updatedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.String> forwardReasons;
  @Deprecated public java.lang.String updatedBy;
  @Deprecated public java.lang.String userId;
  @Deprecated public java.lang.Long time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Updates() {}

  /**
   * All-args constructor.
   * @param forwardReasons The new value for forwardReasons
   * @param updatedBy The new value for updatedBy
   * @param userId The new value for userId
   * @param time The new value for time
   */
  public Updates(java.util.List<java.lang.String> forwardReasons, java.lang.String updatedBy, java.lang.String userId, java.lang.Long time) {
    this.forwardReasons = forwardReasons;
    this.updatedBy = updatedBy;
    this.userId = userId;
    this.time = time;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return forwardReasons;
    case 1: return updatedBy;
    case 2: return userId;
    case 3: return time;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: forwardReasons = (java.util.List<java.lang.String>)value$; break;
    case 1: updatedBy = (java.lang.String)value$; break;
    case 2: userId = (java.lang.String)value$; break;
    case 3: time = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'forwardReasons' field.
   * @return The value of the 'forwardReasons' field.
   */
  public java.util.List<java.lang.String> getForwardReasons() {
    return forwardReasons;
  }

  /**
   * Sets the value of the 'forwardReasons' field.
   * @param value the value to set.
   */
  public void setForwardReasons(java.util.List<java.lang.String> value) {
    this.forwardReasons = value;
  }

  /**
   * Gets the value of the 'updatedBy' field.
   * @return The value of the 'updatedBy' field.
   */
  public java.lang.String getUpdatedBy() {
    return updatedBy;
  }

  /**
   * Sets the value of the 'updatedBy' field.
   * @param value the value to set.
   */
  public void setUpdatedBy(java.lang.String value) {
    this.updatedBy = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Creates a new Updates RecordBuilder.
   * @return A new Updates RecordBuilder
   */
  public static com.fretron.Model.Updates.Builder newBuilder() {
    return new com.fretron.Model.Updates.Builder();
  }

  /**
   * Creates a new Updates RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Updates RecordBuilder
   */
  public static com.fretron.Model.Updates.Builder newBuilder(com.fretron.Model.Updates.Builder other) {
    return new com.fretron.Model.Updates.Builder(other);
  }

  /**
   * Creates a new Updates RecordBuilder by copying an existing Updates instance.
   * @param other The existing instance to copy.
   * @return A new Updates RecordBuilder
   */
  public static com.fretron.Model.Updates.Builder newBuilder(com.fretron.Model.Updates other) {
    return new com.fretron.Model.Updates.Builder(other);
  }

  /**
   * RecordBuilder for Updates instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Updates>
    implements org.apache.avro.data.RecordBuilder<Updates> {

    private java.util.List<java.lang.String> forwardReasons;
    private java.lang.String updatedBy;
    private java.lang.String userId;
    private java.lang.Long time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Updates.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.forwardReasons)) {
        this.forwardReasons = data().deepCopy(fields()[0].schema(), other.forwardReasons);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updatedBy)) {
        this.updatedBy = data().deepCopy(fields()[1].schema(), other.updatedBy);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Updates instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Updates other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.forwardReasons)) {
        this.forwardReasons = data().deepCopy(fields()[0].schema(), other.forwardReasons);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updatedBy)) {
        this.updatedBy = data().deepCopy(fields()[1].schema(), other.updatedBy);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'forwardReasons' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getForwardReasons() {
      return forwardReasons;
    }

    /**
      * Sets the value of the 'forwardReasons' field.
      * @param value The value of 'forwardReasons'.
      * @return This builder.
      */
    public com.fretron.Model.Updates.Builder setForwardReasons(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.forwardReasons = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'forwardReasons' field has been set.
      * @return True if the 'forwardReasons' field has been set, false otherwise.
      */
    public boolean hasForwardReasons() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'forwardReasons' field.
      * @return This builder.
      */
    public com.fretron.Model.Updates.Builder clearForwardReasons() {
      forwardReasons = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedBy' field.
      * @return The value.
      */
    public java.lang.String getUpdatedBy() {
      return updatedBy;
    }

    /**
      * Sets the value of the 'updatedBy' field.
      * @param value The value of 'updatedBy'.
      * @return This builder.
      */
    public com.fretron.Model.Updates.Builder setUpdatedBy(java.lang.String value) {
      validate(fields()[1], value);
      this.updatedBy = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedBy' field has been set.
      * @return True if the 'updatedBy' field has been set, false otherwise.
      */
    public boolean hasUpdatedBy() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'updatedBy' field.
      * @return This builder.
      */
    public com.fretron.Model.Updates.Builder clearUpdatedBy() {
      updatedBy = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.fretron.Model.Updates.Builder setUserId(java.lang.String value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.fretron.Model.Updates.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.fretron.Model.Updates.Builder setTime(java.lang.Long value) {
      validate(fields()[3], value);
      this.time = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.fretron.Model.Updates.Builder clearTime() {
      time = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Updates build() {
      try {
        Updates record = new Updates();
        record.forwardReasons = fieldSetFlags()[0] ? this.forwardReasons : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.updatedBy = fieldSetFlags()[1] ? this.updatedBy : (java.lang.String) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.String) defaultValue(fields()[2]);
        record.time = fieldSetFlags()[3] ? this.time : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
