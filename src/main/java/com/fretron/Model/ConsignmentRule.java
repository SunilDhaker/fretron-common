/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ConsignmentRule extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6159895972590354676L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ConsignmentRule\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"min\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"max\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"uom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"limitViolationReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Double min;
  @Deprecated public java.lang.Double max;
  @Deprecated public java.lang.String uom;
  @Deprecated public java.lang.String limitViolationReason;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ConsignmentRule() {}

  /**
   * All-args constructor.
   * @param min The new value for min
   * @param max The new value for max
   * @param uom The new value for uom
   * @param limitViolationReason The new value for limitViolationReason
   */
  public ConsignmentRule(java.lang.Double min, java.lang.Double max, java.lang.String uom, java.lang.String limitViolationReason) {
    this.min = min;
    this.max = max;
    this.uom = uom;
    this.limitViolationReason = limitViolationReason;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return min;
    case 1: return max;
    case 2: return uom;
    case 3: return limitViolationReason;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: min = (java.lang.Double)value$; break;
    case 1: max = (java.lang.Double)value$; break;
    case 2: uom = (java.lang.String)value$; break;
    case 3: limitViolationReason = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'min' field.
   * @return The value of the 'min' field.
   */
  public java.lang.Double getMin() {
    return min;
  }

  /**
   * Sets the value of the 'min' field.
   * @param value the value to set.
   */
  public void setMin(java.lang.Double value) {
    this.min = value;
  }

  /**
   * Gets the value of the 'max' field.
   * @return The value of the 'max' field.
   */
  public java.lang.Double getMax() {
    return max;
  }

  /**
   * Sets the value of the 'max' field.
   * @param value the value to set.
   */
  public void setMax(java.lang.Double value) {
    this.max = value;
  }

  /**
   * Gets the value of the 'uom' field.
   * @return The value of the 'uom' field.
   */
  public java.lang.String getUom() {
    return uom;
  }

  /**
   * Sets the value of the 'uom' field.
   * @param value the value to set.
   */
  public void setUom(java.lang.String value) {
    this.uom = value;
  }

  /**
   * Gets the value of the 'limitViolationReason' field.
   * @return The value of the 'limitViolationReason' field.
   */
  public java.lang.String getLimitViolationReason() {
    return limitViolationReason;
  }

  /**
   * Sets the value of the 'limitViolationReason' field.
   * @param value the value to set.
   */
  public void setLimitViolationReason(java.lang.String value) {
    this.limitViolationReason = value;
  }

  /**
   * Creates a new ConsignmentRule RecordBuilder.
   * @return A new ConsignmentRule RecordBuilder
   */
  public static com.fretron.Model.ConsignmentRule.Builder newBuilder() {
    return new com.fretron.Model.ConsignmentRule.Builder();
  }

  /**
   * Creates a new ConsignmentRule RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ConsignmentRule RecordBuilder
   */
  public static com.fretron.Model.ConsignmentRule.Builder newBuilder(com.fretron.Model.ConsignmentRule.Builder other) {
    return new com.fretron.Model.ConsignmentRule.Builder(other);
  }

  /**
   * Creates a new ConsignmentRule RecordBuilder by copying an existing ConsignmentRule instance.
   * @param other The existing instance to copy.
   * @return A new ConsignmentRule RecordBuilder
   */
  public static com.fretron.Model.ConsignmentRule.Builder newBuilder(com.fretron.Model.ConsignmentRule other) {
    return new com.fretron.Model.ConsignmentRule.Builder(other);
  }

  /**
   * RecordBuilder for ConsignmentRule instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ConsignmentRule>
    implements org.apache.avro.data.RecordBuilder<ConsignmentRule> {

    private java.lang.Double min;
    private java.lang.Double max;
    private java.lang.String uom;
    private java.lang.String limitViolationReason;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ConsignmentRule.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.min)) {
        this.min = data().deepCopy(fields()[0].schema(), other.min);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.max)) {
        this.max = data().deepCopy(fields()[1].schema(), other.max);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uom)) {
        this.uom = data().deepCopy(fields()[2].schema(), other.uom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.limitViolationReason)) {
        this.limitViolationReason = data().deepCopy(fields()[3].schema(), other.limitViolationReason);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ConsignmentRule instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ConsignmentRule other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.min)) {
        this.min = data().deepCopy(fields()[0].schema(), other.min);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.max)) {
        this.max = data().deepCopy(fields()[1].schema(), other.max);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uom)) {
        this.uom = data().deepCopy(fields()[2].schema(), other.uom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.limitViolationReason)) {
        this.limitViolationReason = data().deepCopy(fields()[3].schema(), other.limitViolationReason);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'min' field.
      * @return The value.
      */
    public java.lang.Double getMin() {
      return min;
    }

    /**
      * Sets the value of the 'min' field.
      * @param value The value of 'min'.
      * @return This builder.
      */
    public com.fretron.Model.ConsignmentRule.Builder setMin(java.lang.Double value) {
      validate(fields()[0], value);
      this.min = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'min' field has been set.
      * @return True if the 'min' field has been set, false otherwise.
      */
    public boolean hasMin() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'min' field.
      * @return This builder.
      */
    public com.fretron.Model.ConsignmentRule.Builder clearMin() {
      min = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'max' field.
      * @return The value.
      */
    public java.lang.Double getMax() {
      return max;
    }

    /**
      * Sets the value of the 'max' field.
      * @param value The value of 'max'.
      * @return This builder.
      */
    public com.fretron.Model.ConsignmentRule.Builder setMax(java.lang.Double value) {
      validate(fields()[1], value);
      this.max = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'max' field has been set.
      * @return True if the 'max' field has been set, false otherwise.
      */
    public boolean hasMax() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'max' field.
      * @return This builder.
      */
    public com.fretron.Model.ConsignmentRule.Builder clearMax() {
      max = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'uom' field.
      * @return The value.
      */
    public java.lang.String getUom() {
      return uom;
    }

    /**
      * Sets the value of the 'uom' field.
      * @param value The value of 'uom'.
      * @return This builder.
      */
    public com.fretron.Model.ConsignmentRule.Builder setUom(java.lang.String value) {
      validate(fields()[2], value);
      this.uom = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'uom' field has been set.
      * @return True if the 'uom' field has been set, false otherwise.
      */
    public boolean hasUom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'uom' field.
      * @return This builder.
      */
    public com.fretron.Model.ConsignmentRule.Builder clearUom() {
      uom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'limitViolationReason' field.
      * @return The value.
      */
    public java.lang.String getLimitViolationReason() {
      return limitViolationReason;
    }

    /**
      * Sets the value of the 'limitViolationReason' field.
      * @param value The value of 'limitViolationReason'.
      * @return This builder.
      */
    public com.fretron.Model.ConsignmentRule.Builder setLimitViolationReason(java.lang.String value) {
      validate(fields()[3], value);
      this.limitViolationReason = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'limitViolationReason' field has been set.
      * @return True if the 'limitViolationReason' field has been set, false otherwise.
      */
    public boolean hasLimitViolationReason() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'limitViolationReason' field.
      * @return This builder.
      */
    public com.fretron.Model.ConsignmentRule.Builder clearLimitViolationReason() {
      limitViolationReason = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ConsignmentRule build() {
      try {
        ConsignmentRule record = new ConsignmentRule();
        record.min = fieldSetFlags()[0] ? this.min : (java.lang.Double) defaultValue(fields()[0]);
        record.max = fieldSetFlags()[1] ? this.max : (java.lang.Double) defaultValue(fields()[1]);
        record.uom = fieldSetFlags()[2] ? this.uom : (java.lang.String) defaultValue(fields()[2]);
        record.limitViolationReason = fieldSetFlags()[3] ? this.limitViolationReason : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
