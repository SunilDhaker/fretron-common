/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AlertAction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5560639067196547315L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlertAction\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"AlertActionType\",\"symbols\":[\"SMS\",\"EMAIL\"]}},{\"name\":\"valueTemplate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"recipient\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.fretron.Model.AlertActionType type;
  @Deprecated public java.lang.String valueTemplate;
  @Deprecated public java.lang.String value;
  @Deprecated public java.lang.String recipient;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AlertAction() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param valueTemplate The new value for valueTemplate
   * @param value The new value for value
   * @param recipient The new value for recipient
   */
  public AlertAction(com.fretron.Model.AlertActionType type, java.lang.String valueTemplate, java.lang.String value, java.lang.String recipient) {
    this.type = type;
    this.valueTemplate = valueTemplate;
    this.value = value;
    this.recipient = recipient;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return valueTemplate;
    case 2: return value;
    case 3: return recipient;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (com.fretron.Model.AlertActionType)value$; break;
    case 1: valueTemplate = (java.lang.String)value$; break;
    case 2: value = (java.lang.String)value$; break;
    case 3: recipient = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.fretron.Model.AlertActionType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.fretron.Model.AlertActionType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'valueTemplate' field.
   * @return The value of the 'valueTemplate' field.
   */
  public java.lang.String getValueTemplate() {
    return valueTemplate;
  }

  /**
   * Sets the value of the 'valueTemplate' field.
   * @param value the value to set.
   */
  public void setValueTemplate(java.lang.String value) {
    this.valueTemplate = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'recipient' field.
   * @return The value of the 'recipient' field.
   */
  public java.lang.String getRecipient() {
    return recipient;
  }

  /**
   * Sets the value of the 'recipient' field.
   * @param value the value to set.
   */
  public void setRecipient(java.lang.String value) {
    this.recipient = value;
  }

  /**
   * Creates a new AlertAction RecordBuilder.
   * @return A new AlertAction RecordBuilder
   */
  public static com.fretron.Model.AlertAction.Builder newBuilder() {
    return new com.fretron.Model.AlertAction.Builder();
  }

  /**
   * Creates a new AlertAction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AlertAction RecordBuilder
   */
  public static com.fretron.Model.AlertAction.Builder newBuilder(com.fretron.Model.AlertAction.Builder other) {
    return new com.fretron.Model.AlertAction.Builder(other);
  }

  /**
   * Creates a new AlertAction RecordBuilder by copying an existing AlertAction instance.
   * @param other The existing instance to copy.
   * @return A new AlertAction RecordBuilder
   */
  public static com.fretron.Model.AlertAction.Builder newBuilder(com.fretron.Model.AlertAction other) {
    return new com.fretron.Model.AlertAction.Builder(other);
  }

  /**
   * RecordBuilder for AlertAction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlertAction>
    implements org.apache.avro.data.RecordBuilder<AlertAction> {

    private com.fretron.Model.AlertActionType type;
    private java.lang.String valueTemplate;
    private java.lang.String value;
    private java.lang.String recipient;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.AlertAction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.valueTemplate)) {
        this.valueTemplate = data().deepCopy(fields()[1].schema(), other.valueTemplate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recipient)) {
        this.recipient = data().deepCopy(fields()[3].schema(), other.recipient);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AlertAction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.AlertAction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.valueTemplate)) {
        this.valueTemplate = data().deepCopy(fields()[1].schema(), other.valueTemplate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recipient)) {
        this.recipient = data().deepCopy(fields()[3].schema(), other.recipient);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.fretron.Model.AlertActionType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fretron.Model.AlertAction.Builder setType(com.fretron.Model.AlertActionType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertAction.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueTemplate' field.
      * @return The value.
      */
    public java.lang.String getValueTemplate() {
      return valueTemplate;
    }

    /**
      * Sets the value of the 'valueTemplate' field.
      * @param value The value of 'valueTemplate'.
      * @return This builder.
      */
    public com.fretron.Model.AlertAction.Builder setValueTemplate(java.lang.String value) {
      validate(fields()[1], value);
      this.valueTemplate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'valueTemplate' field has been set.
      * @return True if the 'valueTemplate' field has been set, false otherwise.
      */
    public boolean hasValueTemplate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'valueTemplate' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertAction.Builder clearValueTemplate() {
      valueTemplate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.fretron.Model.AlertAction.Builder setValue(java.lang.String value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertAction.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipient' field.
      * @return The value.
      */
    public java.lang.String getRecipient() {
      return recipient;
    }

    /**
      * Sets the value of the 'recipient' field.
      * @param value The value of 'recipient'.
      * @return This builder.
      */
    public com.fretron.Model.AlertAction.Builder setRecipient(java.lang.String value) {
      validate(fields()[3], value);
      this.recipient = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'recipient' field has been set.
      * @return True if the 'recipient' field has been set, false otherwise.
      */
    public boolean hasRecipient() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'recipient' field.
      * @return This builder.
      */
    public com.fretron.Model.AlertAction.Builder clearRecipient() {
      recipient = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AlertAction build() {
      try {
        AlertAction record = new AlertAction();
        record.type = fieldSetFlags()[0] ? this.type : (com.fretron.Model.AlertActionType) defaultValue(fields()[0]);
        record.valueTemplate = fieldSetFlags()[1] ? this.valueTemplate : (java.lang.String) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.String) defaultValue(fields()[2]);
        record.recipient = fieldSetFlags()[3] ? this.recipient : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
