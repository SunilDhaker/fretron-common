/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ExecutedEventResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 450515532713291601L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ExecutedEventResponse\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"successiveFailureCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"totalSuccessCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"successiveSuccessCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"jobId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"recordsReceived\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"selectedRecords\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"recordsForwarded\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"updateTime\",\"type\":[\"null\",\"long\"]},{\"name\":\"lastSuccessTime\",\"type\":[\"null\",\"long\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer successiveFailureCount;
  @Deprecated public java.lang.Integer totalSuccessCount;
  @Deprecated public java.lang.Integer successiveSuccessCount;
  @Deprecated public java.lang.String jobId;
  @Deprecated public java.lang.String recordsReceived;
  @Deprecated public java.lang.String selectedRecords;
  @Deprecated public java.lang.String recordsForwarded;
  @Deprecated public java.lang.Long updateTime;
  @Deprecated public java.lang.Long lastSuccessTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ExecutedEventResponse() {}

  /**
   * All-args constructor.
   * @param successiveFailureCount The new value for successiveFailureCount
   * @param totalSuccessCount The new value for totalSuccessCount
   * @param successiveSuccessCount The new value for successiveSuccessCount
   * @param jobId The new value for jobId
   * @param recordsReceived The new value for recordsReceived
   * @param selectedRecords The new value for selectedRecords
   * @param recordsForwarded The new value for recordsForwarded
   * @param updateTime The new value for updateTime
   * @param lastSuccessTime The new value for lastSuccessTime
   */
  public ExecutedEventResponse(java.lang.Integer successiveFailureCount, java.lang.Integer totalSuccessCount, java.lang.Integer successiveSuccessCount, java.lang.String jobId, java.lang.String recordsReceived, java.lang.String selectedRecords, java.lang.String recordsForwarded, java.lang.Long updateTime, java.lang.Long lastSuccessTime) {
    this.successiveFailureCount = successiveFailureCount;
    this.totalSuccessCount = totalSuccessCount;
    this.successiveSuccessCount = successiveSuccessCount;
    this.jobId = jobId;
    this.recordsReceived = recordsReceived;
    this.selectedRecords = selectedRecords;
    this.recordsForwarded = recordsForwarded;
    this.updateTime = updateTime;
    this.lastSuccessTime = lastSuccessTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return successiveFailureCount;
    case 1: return totalSuccessCount;
    case 2: return successiveSuccessCount;
    case 3: return jobId;
    case 4: return recordsReceived;
    case 5: return selectedRecords;
    case 6: return recordsForwarded;
    case 7: return updateTime;
    case 8: return lastSuccessTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: successiveFailureCount = (java.lang.Integer)value$; break;
    case 1: totalSuccessCount = (java.lang.Integer)value$; break;
    case 2: successiveSuccessCount = (java.lang.Integer)value$; break;
    case 3: jobId = (java.lang.String)value$; break;
    case 4: recordsReceived = (java.lang.String)value$; break;
    case 5: selectedRecords = (java.lang.String)value$; break;
    case 6: recordsForwarded = (java.lang.String)value$; break;
    case 7: updateTime = (java.lang.Long)value$; break;
    case 8: lastSuccessTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'successiveFailureCount' field.
   * @return The value of the 'successiveFailureCount' field.
   */
  public java.lang.Integer getSuccessiveFailureCount() {
    return successiveFailureCount;
  }

  /**
   * Sets the value of the 'successiveFailureCount' field.
   * @param value the value to set.
   */
  public void setSuccessiveFailureCount(java.lang.Integer value) {
    this.successiveFailureCount = value;
  }

  /**
   * Gets the value of the 'totalSuccessCount' field.
   * @return The value of the 'totalSuccessCount' field.
   */
  public java.lang.Integer getTotalSuccessCount() {
    return totalSuccessCount;
  }

  /**
   * Sets the value of the 'totalSuccessCount' field.
   * @param value the value to set.
   */
  public void setTotalSuccessCount(java.lang.Integer value) {
    this.totalSuccessCount = value;
  }

  /**
   * Gets the value of the 'successiveSuccessCount' field.
   * @return The value of the 'successiveSuccessCount' field.
   */
  public java.lang.Integer getSuccessiveSuccessCount() {
    return successiveSuccessCount;
  }

  /**
   * Sets the value of the 'successiveSuccessCount' field.
   * @param value the value to set.
   */
  public void setSuccessiveSuccessCount(java.lang.Integer value) {
    this.successiveSuccessCount = value;
  }

  /**
   * Gets the value of the 'jobId' field.
   * @return The value of the 'jobId' field.
   */
  public java.lang.String getJobId() {
    return jobId;
  }

  /**
   * Sets the value of the 'jobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.String value) {
    this.jobId = value;
  }

  /**
   * Gets the value of the 'recordsReceived' field.
   * @return The value of the 'recordsReceived' field.
   */
  public java.lang.String getRecordsReceived() {
    return recordsReceived;
  }

  /**
   * Sets the value of the 'recordsReceived' field.
   * @param value the value to set.
   */
  public void setRecordsReceived(java.lang.String value) {
    this.recordsReceived = value;
  }

  /**
   * Gets the value of the 'selectedRecords' field.
   * @return The value of the 'selectedRecords' field.
   */
  public java.lang.String getSelectedRecords() {
    return selectedRecords;
  }

  /**
   * Sets the value of the 'selectedRecords' field.
   * @param value the value to set.
   */
  public void setSelectedRecords(java.lang.String value) {
    this.selectedRecords = value;
  }

  /**
   * Gets the value of the 'recordsForwarded' field.
   * @return The value of the 'recordsForwarded' field.
   */
  public java.lang.String getRecordsForwarded() {
    return recordsForwarded;
  }

  /**
   * Sets the value of the 'recordsForwarded' field.
   * @param value the value to set.
   */
  public void setRecordsForwarded(java.lang.String value) {
    this.recordsForwarded = value;
  }

  /**
   * Gets the value of the 'updateTime' field.
   * @return The value of the 'updateTime' field.
   */
  public java.lang.Long getUpdateTime() {
    return updateTime;
  }

  /**
   * Sets the value of the 'updateTime' field.
   * @param value the value to set.
   */
  public void setUpdateTime(java.lang.Long value) {
    this.updateTime = value;
  }

  /**
   * Gets the value of the 'lastSuccessTime' field.
   * @return The value of the 'lastSuccessTime' field.
   */
  public java.lang.Long getLastSuccessTime() {
    return lastSuccessTime;
  }

  /**
   * Sets the value of the 'lastSuccessTime' field.
   * @param value the value to set.
   */
  public void setLastSuccessTime(java.lang.Long value) {
    this.lastSuccessTime = value;
  }

  /**
   * Creates a new ExecutedEventResponse RecordBuilder.
   * @return A new ExecutedEventResponse RecordBuilder
   */
  public static com.fretron.Model.ExecutedEventResponse.Builder newBuilder() {
    return new com.fretron.Model.ExecutedEventResponse.Builder();
  }

  /**
   * Creates a new ExecutedEventResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ExecutedEventResponse RecordBuilder
   */
  public static com.fretron.Model.ExecutedEventResponse.Builder newBuilder(com.fretron.Model.ExecutedEventResponse.Builder other) {
    return new com.fretron.Model.ExecutedEventResponse.Builder(other);
  }

  /**
   * Creates a new ExecutedEventResponse RecordBuilder by copying an existing ExecutedEventResponse instance.
   * @param other The existing instance to copy.
   * @return A new ExecutedEventResponse RecordBuilder
   */
  public static com.fretron.Model.ExecutedEventResponse.Builder newBuilder(com.fretron.Model.ExecutedEventResponse other) {
    return new com.fretron.Model.ExecutedEventResponse.Builder(other);
  }

  /**
   * RecordBuilder for ExecutedEventResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ExecutedEventResponse>
    implements org.apache.avro.data.RecordBuilder<ExecutedEventResponse> {

    private java.lang.Integer successiveFailureCount;
    private java.lang.Integer totalSuccessCount;
    private java.lang.Integer successiveSuccessCount;
    private java.lang.String jobId;
    private java.lang.String recordsReceived;
    private java.lang.String selectedRecords;
    private java.lang.String recordsForwarded;
    private java.lang.Long updateTime;
    private java.lang.Long lastSuccessTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.ExecutedEventResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.successiveFailureCount)) {
        this.successiveFailureCount = data().deepCopy(fields()[0].schema(), other.successiveFailureCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalSuccessCount)) {
        this.totalSuccessCount = data().deepCopy(fields()[1].schema(), other.totalSuccessCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.successiveSuccessCount)) {
        this.successiveSuccessCount = data().deepCopy(fields()[2].schema(), other.successiveSuccessCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.jobId)) {
        this.jobId = data().deepCopy(fields()[3].schema(), other.jobId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recordsReceived)) {
        this.recordsReceived = data().deepCopy(fields()[4].schema(), other.recordsReceived);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.selectedRecords)) {
        this.selectedRecords = data().deepCopy(fields()[5].schema(), other.selectedRecords);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.recordsForwarded)) {
        this.recordsForwarded = data().deepCopy(fields()[6].schema(), other.recordsForwarded);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[7].schema(), other.updateTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lastSuccessTime)) {
        this.lastSuccessTime = data().deepCopy(fields()[8].schema(), other.lastSuccessTime);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ExecutedEventResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.ExecutedEventResponse other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.successiveFailureCount)) {
        this.successiveFailureCount = data().deepCopy(fields()[0].schema(), other.successiveFailureCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalSuccessCount)) {
        this.totalSuccessCount = data().deepCopy(fields()[1].schema(), other.totalSuccessCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.successiveSuccessCount)) {
        this.successiveSuccessCount = data().deepCopy(fields()[2].schema(), other.successiveSuccessCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.jobId)) {
        this.jobId = data().deepCopy(fields()[3].schema(), other.jobId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recordsReceived)) {
        this.recordsReceived = data().deepCopy(fields()[4].schema(), other.recordsReceived);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.selectedRecords)) {
        this.selectedRecords = data().deepCopy(fields()[5].schema(), other.selectedRecords);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.recordsForwarded)) {
        this.recordsForwarded = data().deepCopy(fields()[6].schema(), other.recordsForwarded);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[7].schema(), other.updateTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lastSuccessTime)) {
        this.lastSuccessTime = data().deepCopy(fields()[8].schema(), other.lastSuccessTime);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'successiveFailureCount' field.
      * @return The value.
      */
    public java.lang.Integer getSuccessiveFailureCount() {
      return successiveFailureCount;
    }

    /**
      * Sets the value of the 'successiveFailureCount' field.
      * @param value The value of 'successiveFailureCount'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setSuccessiveFailureCount(java.lang.Integer value) {
      validate(fields()[0], value);
      this.successiveFailureCount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'successiveFailureCount' field has been set.
      * @return True if the 'successiveFailureCount' field has been set, false otherwise.
      */
    public boolean hasSuccessiveFailureCount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'successiveFailureCount' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearSuccessiveFailureCount() {
      successiveFailureCount = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSuccessCount' field.
      * @return The value.
      */
    public java.lang.Integer getTotalSuccessCount() {
      return totalSuccessCount;
    }

    /**
      * Sets the value of the 'totalSuccessCount' field.
      * @param value The value of 'totalSuccessCount'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setTotalSuccessCount(java.lang.Integer value) {
      validate(fields()[1], value);
      this.totalSuccessCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSuccessCount' field has been set.
      * @return True if the 'totalSuccessCount' field has been set, false otherwise.
      */
    public boolean hasTotalSuccessCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'totalSuccessCount' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearTotalSuccessCount() {
      totalSuccessCount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'successiveSuccessCount' field.
      * @return The value.
      */
    public java.lang.Integer getSuccessiveSuccessCount() {
      return successiveSuccessCount;
    }

    /**
      * Sets the value of the 'successiveSuccessCount' field.
      * @param value The value of 'successiveSuccessCount'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setSuccessiveSuccessCount(java.lang.Integer value) {
      validate(fields()[2], value);
      this.successiveSuccessCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'successiveSuccessCount' field has been set.
      * @return True if the 'successiveSuccessCount' field has been set, false otherwise.
      */
    public boolean hasSuccessiveSuccessCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'successiveSuccessCount' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearSuccessiveSuccessCount() {
      successiveSuccessCount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobId' field.
      * @return The value.
      */
    public java.lang.String getJobId() {
      return jobId;
    }

    /**
      * Sets the value of the 'jobId' field.
      * @param value The value of 'jobId'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setJobId(java.lang.String value) {
      validate(fields()[3], value);
      this.jobId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'jobId' field has been set.
      * @return True if the 'jobId' field has been set, false otherwise.
      */
    public boolean hasJobId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'jobId' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearJobId() {
      jobId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordsReceived' field.
      * @return The value.
      */
    public java.lang.String getRecordsReceived() {
      return recordsReceived;
    }

    /**
      * Sets the value of the 'recordsReceived' field.
      * @param value The value of 'recordsReceived'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setRecordsReceived(java.lang.String value) {
      validate(fields()[4], value);
      this.recordsReceived = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'recordsReceived' field has been set.
      * @return True if the 'recordsReceived' field has been set, false otherwise.
      */
    public boolean hasRecordsReceived() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'recordsReceived' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearRecordsReceived() {
      recordsReceived = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'selectedRecords' field.
      * @return The value.
      */
    public java.lang.String getSelectedRecords() {
      return selectedRecords;
    }

    /**
      * Sets the value of the 'selectedRecords' field.
      * @param value The value of 'selectedRecords'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setSelectedRecords(java.lang.String value) {
      validate(fields()[5], value);
      this.selectedRecords = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'selectedRecords' field has been set.
      * @return True if the 'selectedRecords' field has been set, false otherwise.
      */
    public boolean hasSelectedRecords() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'selectedRecords' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearSelectedRecords() {
      selectedRecords = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordsForwarded' field.
      * @return The value.
      */
    public java.lang.String getRecordsForwarded() {
      return recordsForwarded;
    }

    /**
      * Sets the value of the 'recordsForwarded' field.
      * @param value The value of 'recordsForwarded'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setRecordsForwarded(java.lang.String value) {
      validate(fields()[6], value);
      this.recordsForwarded = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'recordsForwarded' field has been set.
      * @return True if the 'recordsForwarded' field has been set, false otherwise.
      */
    public boolean hasRecordsForwarded() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'recordsForwarded' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearRecordsForwarded() {
      recordsForwarded = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateTime' field.
      * @return The value.
      */
    public java.lang.Long getUpdateTime() {
      return updateTime;
    }

    /**
      * Sets the value of the 'updateTime' field.
      * @param value The value of 'updateTime'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setUpdateTime(java.lang.Long value) {
      validate(fields()[7], value);
      this.updateTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'updateTime' field has been set.
      * @return True if the 'updateTime' field has been set, false otherwise.
      */
    public boolean hasUpdateTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'updateTime' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearUpdateTime() {
      updateTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastSuccessTime' field.
      * @return The value.
      */
    public java.lang.Long getLastSuccessTime() {
      return lastSuccessTime;
    }

    /**
      * Sets the value of the 'lastSuccessTime' field.
      * @param value The value of 'lastSuccessTime'.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder setLastSuccessTime(java.lang.Long value) {
      validate(fields()[8], value);
      this.lastSuccessTime = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'lastSuccessTime' field has been set.
      * @return True if the 'lastSuccessTime' field has been set, false otherwise.
      */
    public boolean hasLastSuccessTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'lastSuccessTime' field.
      * @return This builder.
      */
    public com.fretron.Model.ExecutedEventResponse.Builder clearLastSuccessTime() {
      lastSuccessTime = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public ExecutedEventResponse build() {
      try {
        ExecutedEventResponse record = new ExecutedEventResponse();
        record.successiveFailureCount = fieldSetFlags()[0] ? this.successiveFailureCount : (java.lang.Integer) defaultValue(fields()[0]);
        record.totalSuccessCount = fieldSetFlags()[1] ? this.totalSuccessCount : (java.lang.Integer) defaultValue(fields()[1]);
        record.successiveSuccessCount = fieldSetFlags()[2] ? this.successiveSuccessCount : (java.lang.Integer) defaultValue(fields()[2]);
        record.jobId = fieldSetFlags()[3] ? this.jobId : (java.lang.String) defaultValue(fields()[3]);
        record.recordsReceived = fieldSetFlags()[4] ? this.recordsReceived : (java.lang.String) defaultValue(fields()[4]);
        record.selectedRecords = fieldSetFlags()[5] ? this.selectedRecords : (java.lang.String) defaultValue(fields()[5]);
        record.recordsForwarded = fieldSetFlags()[6] ? this.recordsForwarded : (java.lang.String) defaultValue(fields()[6]);
        record.updateTime = fieldSetFlags()[7] ? this.updateTime : (java.lang.Long) defaultValue(fields()[7]);
        record.lastSuccessTime = fieldSetFlags()[8] ? this.lastSuccessTime : (java.lang.Long) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
