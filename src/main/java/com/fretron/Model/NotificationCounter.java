/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NotificationCounter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6303916855023369960L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NotificationCounter\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"subscriber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"event\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"startTime\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"emailCount\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"smsCount\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"whatsappCount\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"isEmailThrottled\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"isSmsThrottled\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"isWhatsappThrottled\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"emailThrottledTill\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"whatsappThrottledTill\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"smsThrottledTill\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"isEmailThrottledWarningSent\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"isSmsThrottledWarningSent\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"isWhatsappThrottledWarningSent\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String subscriber;
  @Deprecated public java.lang.String event;
  @Deprecated public java.lang.Long startTime;
  @Deprecated public java.lang.Long emailCount;
  @Deprecated public java.lang.Long smsCount;
  @Deprecated public java.lang.Long whatsappCount;
  @Deprecated public java.lang.Boolean isEmailThrottled;
  @Deprecated public java.lang.Boolean isSmsThrottled;
  @Deprecated public java.lang.Boolean isWhatsappThrottled;
  @Deprecated public java.lang.Long emailThrottledTill;
  @Deprecated public java.lang.Long whatsappThrottledTill;
  @Deprecated public java.lang.Long smsThrottledTill;
  @Deprecated public java.lang.Boolean isEmailThrottledWarningSent;
  @Deprecated public java.lang.Boolean isSmsThrottledWarningSent;
  @Deprecated public java.lang.Boolean isWhatsappThrottledWarningSent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NotificationCounter() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param subscriber The new value for subscriber
   * @param event The new value for event
   * @param startTime The new value for startTime
   * @param emailCount The new value for emailCount
   * @param smsCount The new value for smsCount
   * @param whatsappCount The new value for whatsappCount
   * @param isEmailThrottled The new value for isEmailThrottled
   * @param isSmsThrottled The new value for isSmsThrottled
   * @param isWhatsappThrottled The new value for isWhatsappThrottled
   * @param emailThrottledTill The new value for emailThrottledTill
   * @param whatsappThrottledTill The new value for whatsappThrottledTill
   * @param smsThrottledTill The new value for smsThrottledTill
   * @param isEmailThrottledWarningSent The new value for isEmailThrottledWarningSent
   * @param isSmsThrottledWarningSent The new value for isSmsThrottledWarningSent
   * @param isWhatsappThrottledWarningSent The new value for isWhatsappThrottledWarningSent
   */
  public NotificationCounter(java.lang.String uuid, java.lang.String subscriber, java.lang.String event, java.lang.Long startTime, java.lang.Long emailCount, java.lang.Long smsCount, java.lang.Long whatsappCount, java.lang.Boolean isEmailThrottled, java.lang.Boolean isSmsThrottled, java.lang.Boolean isWhatsappThrottled, java.lang.Long emailThrottledTill, java.lang.Long whatsappThrottledTill, java.lang.Long smsThrottledTill, java.lang.Boolean isEmailThrottledWarningSent, java.lang.Boolean isSmsThrottledWarningSent, java.lang.Boolean isWhatsappThrottledWarningSent) {
    this.uuid = uuid;
    this.subscriber = subscriber;
    this.event = event;
    this.startTime = startTime;
    this.emailCount = emailCount;
    this.smsCount = smsCount;
    this.whatsappCount = whatsappCount;
    this.isEmailThrottled = isEmailThrottled;
    this.isSmsThrottled = isSmsThrottled;
    this.isWhatsappThrottled = isWhatsappThrottled;
    this.emailThrottledTill = emailThrottledTill;
    this.whatsappThrottledTill = whatsappThrottledTill;
    this.smsThrottledTill = smsThrottledTill;
    this.isEmailThrottledWarningSent = isEmailThrottledWarningSent;
    this.isSmsThrottledWarningSent = isSmsThrottledWarningSent;
    this.isWhatsappThrottledWarningSent = isWhatsappThrottledWarningSent;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return subscriber;
    case 2: return event;
    case 3: return startTime;
    case 4: return emailCount;
    case 5: return smsCount;
    case 6: return whatsappCount;
    case 7: return isEmailThrottled;
    case 8: return isSmsThrottled;
    case 9: return isWhatsappThrottled;
    case 10: return emailThrottledTill;
    case 11: return whatsappThrottledTill;
    case 12: return smsThrottledTill;
    case 13: return isEmailThrottledWarningSent;
    case 14: return isSmsThrottledWarningSent;
    case 15: return isWhatsappThrottledWarningSent;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: subscriber = (java.lang.String)value$; break;
    case 2: event = (java.lang.String)value$; break;
    case 3: startTime = (java.lang.Long)value$; break;
    case 4: emailCount = (java.lang.Long)value$; break;
    case 5: smsCount = (java.lang.Long)value$; break;
    case 6: whatsappCount = (java.lang.Long)value$; break;
    case 7: isEmailThrottled = (java.lang.Boolean)value$; break;
    case 8: isSmsThrottled = (java.lang.Boolean)value$; break;
    case 9: isWhatsappThrottled = (java.lang.Boolean)value$; break;
    case 10: emailThrottledTill = (java.lang.Long)value$; break;
    case 11: whatsappThrottledTill = (java.lang.Long)value$; break;
    case 12: smsThrottledTill = (java.lang.Long)value$; break;
    case 13: isEmailThrottledWarningSent = (java.lang.Boolean)value$; break;
    case 14: isSmsThrottledWarningSent = (java.lang.Boolean)value$; break;
    case 15: isWhatsappThrottledWarningSent = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'subscriber' field.
   * @return The value of the 'subscriber' field.
   */
  public java.lang.String getSubscriber() {
    return subscriber;
  }

  /**
   * Sets the value of the 'subscriber' field.
   * @param value the value to set.
   */
  public void setSubscriber(java.lang.String value) {
    this.subscriber = value;
  }

  /**
   * Gets the value of the 'event' field.
   * @return The value of the 'event' field.
   */
  public java.lang.String getEvent() {
    return event;
  }

  /**
   * Sets the value of the 'event' field.
   * @param value the value to set.
   */
  public void setEvent(java.lang.String value) {
    this.event = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public java.lang.Long getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.Long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'emailCount' field.
   * @return The value of the 'emailCount' field.
   */
  public java.lang.Long getEmailCount() {
    return emailCount;
  }

  /**
   * Sets the value of the 'emailCount' field.
   * @param value the value to set.
   */
  public void setEmailCount(java.lang.Long value) {
    this.emailCount = value;
  }

  /**
   * Gets the value of the 'smsCount' field.
   * @return The value of the 'smsCount' field.
   */
  public java.lang.Long getSmsCount() {
    return smsCount;
  }

  /**
   * Sets the value of the 'smsCount' field.
   * @param value the value to set.
   */
  public void setSmsCount(java.lang.Long value) {
    this.smsCount = value;
  }

  /**
   * Gets the value of the 'whatsappCount' field.
   * @return The value of the 'whatsappCount' field.
   */
  public java.lang.Long getWhatsappCount() {
    return whatsappCount;
  }

  /**
   * Sets the value of the 'whatsappCount' field.
   * @param value the value to set.
   */
  public void setWhatsappCount(java.lang.Long value) {
    this.whatsappCount = value;
  }

  /**
   * Gets the value of the 'isEmailThrottled' field.
   * @return The value of the 'isEmailThrottled' field.
   */
  public java.lang.Boolean getIsEmailThrottled() {
    return isEmailThrottled;
  }

  /**
   * Sets the value of the 'isEmailThrottled' field.
   * @param value the value to set.
   */
  public void setIsEmailThrottled(java.lang.Boolean value) {
    this.isEmailThrottled = value;
  }

  /**
   * Gets the value of the 'isSmsThrottled' field.
   * @return The value of the 'isSmsThrottled' field.
   */
  public java.lang.Boolean getIsSmsThrottled() {
    return isSmsThrottled;
  }

  /**
   * Sets the value of the 'isSmsThrottled' field.
   * @param value the value to set.
   */
  public void setIsSmsThrottled(java.lang.Boolean value) {
    this.isSmsThrottled = value;
  }

  /**
   * Gets the value of the 'isWhatsappThrottled' field.
   * @return The value of the 'isWhatsappThrottled' field.
   */
  public java.lang.Boolean getIsWhatsappThrottled() {
    return isWhatsappThrottled;
  }

  /**
   * Sets the value of the 'isWhatsappThrottled' field.
   * @param value the value to set.
   */
  public void setIsWhatsappThrottled(java.lang.Boolean value) {
    this.isWhatsappThrottled = value;
  }

  /**
   * Gets the value of the 'emailThrottledTill' field.
   * @return The value of the 'emailThrottledTill' field.
   */
  public java.lang.Long getEmailThrottledTill() {
    return emailThrottledTill;
  }

  /**
   * Sets the value of the 'emailThrottledTill' field.
   * @param value the value to set.
   */
  public void setEmailThrottledTill(java.lang.Long value) {
    this.emailThrottledTill = value;
  }

  /**
   * Gets the value of the 'whatsappThrottledTill' field.
   * @return The value of the 'whatsappThrottledTill' field.
   */
  public java.lang.Long getWhatsappThrottledTill() {
    return whatsappThrottledTill;
  }

  /**
   * Sets the value of the 'whatsappThrottledTill' field.
   * @param value the value to set.
   */
  public void setWhatsappThrottledTill(java.lang.Long value) {
    this.whatsappThrottledTill = value;
  }

  /**
   * Gets the value of the 'smsThrottledTill' field.
   * @return The value of the 'smsThrottledTill' field.
   */
  public java.lang.Long getSmsThrottledTill() {
    return smsThrottledTill;
  }

  /**
   * Sets the value of the 'smsThrottledTill' field.
   * @param value the value to set.
   */
  public void setSmsThrottledTill(java.lang.Long value) {
    this.smsThrottledTill = value;
  }

  /**
   * Gets the value of the 'isEmailThrottledWarningSent' field.
   * @return The value of the 'isEmailThrottledWarningSent' field.
   */
  public java.lang.Boolean getIsEmailThrottledWarningSent() {
    return isEmailThrottledWarningSent;
  }

  /**
   * Sets the value of the 'isEmailThrottledWarningSent' field.
   * @param value the value to set.
   */
  public void setIsEmailThrottledWarningSent(java.lang.Boolean value) {
    this.isEmailThrottledWarningSent = value;
  }

  /**
   * Gets the value of the 'isSmsThrottledWarningSent' field.
   * @return The value of the 'isSmsThrottledWarningSent' field.
   */
  public java.lang.Boolean getIsSmsThrottledWarningSent() {
    return isSmsThrottledWarningSent;
  }

  /**
   * Sets the value of the 'isSmsThrottledWarningSent' field.
   * @param value the value to set.
   */
  public void setIsSmsThrottledWarningSent(java.lang.Boolean value) {
    this.isSmsThrottledWarningSent = value;
  }

  /**
   * Gets the value of the 'isWhatsappThrottledWarningSent' field.
   * @return The value of the 'isWhatsappThrottledWarningSent' field.
   */
  public java.lang.Boolean getIsWhatsappThrottledWarningSent() {
    return isWhatsappThrottledWarningSent;
  }

  /**
   * Sets the value of the 'isWhatsappThrottledWarningSent' field.
   * @param value the value to set.
   */
  public void setIsWhatsappThrottledWarningSent(java.lang.Boolean value) {
    this.isWhatsappThrottledWarningSent = value;
  }

  /**
   * Creates a new NotificationCounter RecordBuilder.
   * @return A new NotificationCounter RecordBuilder
   */
  public static com.fretron.Model.NotificationCounter.Builder newBuilder() {
    return new com.fretron.Model.NotificationCounter.Builder();
  }

  /**
   * Creates a new NotificationCounter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NotificationCounter RecordBuilder
   */
  public static com.fretron.Model.NotificationCounter.Builder newBuilder(com.fretron.Model.NotificationCounter.Builder other) {
    return new com.fretron.Model.NotificationCounter.Builder(other);
  }

  /**
   * Creates a new NotificationCounter RecordBuilder by copying an existing NotificationCounter instance.
   * @param other The existing instance to copy.
   * @return A new NotificationCounter RecordBuilder
   */
  public static com.fretron.Model.NotificationCounter.Builder newBuilder(com.fretron.Model.NotificationCounter other) {
    return new com.fretron.Model.NotificationCounter.Builder(other);
  }

  /**
   * RecordBuilder for NotificationCounter instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotificationCounter>
    implements org.apache.avro.data.RecordBuilder<NotificationCounter> {

    private java.lang.String uuid;
    private java.lang.String subscriber;
    private java.lang.String event;
    private java.lang.Long startTime;
    private java.lang.Long emailCount;
    private java.lang.Long smsCount;
    private java.lang.Long whatsappCount;
    private java.lang.Boolean isEmailThrottled;
    private java.lang.Boolean isSmsThrottled;
    private java.lang.Boolean isWhatsappThrottled;
    private java.lang.Long emailThrottledTill;
    private java.lang.Long whatsappThrottledTill;
    private java.lang.Long smsThrottledTill;
    private java.lang.Boolean isEmailThrottledWarningSent;
    private java.lang.Boolean isSmsThrottledWarningSent;
    private java.lang.Boolean isWhatsappThrottledWarningSent;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.NotificationCounter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subscriber)) {
        this.subscriber = data().deepCopy(fields()[1].schema(), other.subscriber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event)) {
        this.event = data().deepCopy(fields()[2].schema(), other.event);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.startTime)) {
        this.startTime = data().deepCopy(fields()[3].schema(), other.startTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emailCount)) {
        this.emailCount = data().deepCopy(fields()[4].schema(), other.emailCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.smsCount)) {
        this.smsCount = data().deepCopy(fields()[5].schema(), other.smsCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.whatsappCount)) {
        this.whatsappCount = data().deepCopy(fields()[6].schema(), other.whatsappCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isEmailThrottled)) {
        this.isEmailThrottled = data().deepCopy(fields()[7].schema(), other.isEmailThrottled);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isSmsThrottled)) {
        this.isSmsThrottled = data().deepCopy(fields()[8].schema(), other.isSmsThrottled);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isWhatsappThrottled)) {
        this.isWhatsappThrottled = data().deepCopy(fields()[9].schema(), other.isWhatsappThrottled);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.emailThrottledTill)) {
        this.emailThrottledTill = data().deepCopy(fields()[10].schema(), other.emailThrottledTill);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.whatsappThrottledTill)) {
        this.whatsappThrottledTill = data().deepCopy(fields()[11].schema(), other.whatsappThrottledTill);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.smsThrottledTill)) {
        this.smsThrottledTill = data().deepCopy(fields()[12].schema(), other.smsThrottledTill);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.isEmailThrottledWarningSent)) {
        this.isEmailThrottledWarningSent = data().deepCopy(fields()[13].schema(), other.isEmailThrottledWarningSent);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.isSmsThrottledWarningSent)) {
        this.isSmsThrottledWarningSent = data().deepCopy(fields()[14].schema(), other.isSmsThrottledWarningSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.isWhatsappThrottledWarningSent)) {
        this.isWhatsappThrottledWarningSent = data().deepCopy(fields()[15].schema(), other.isWhatsappThrottledWarningSent);
        fieldSetFlags()[15] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NotificationCounter instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.NotificationCounter other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subscriber)) {
        this.subscriber = data().deepCopy(fields()[1].schema(), other.subscriber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event)) {
        this.event = data().deepCopy(fields()[2].schema(), other.event);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.startTime)) {
        this.startTime = data().deepCopy(fields()[3].schema(), other.startTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emailCount)) {
        this.emailCount = data().deepCopy(fields()[4].schema(), other.emailCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.smsCount)) {
        this.smsCount = data().deepCopy(fields()[5].schema(), other.smsCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.whatsappCount)) {
        this.whatsappCount = data().deepCopy(fields()[6].schema(), other.whatsappCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isEmailThrottled)) {
        this.isEmailThrottled = data().deepCopy(fields()[7].schema(), other.isEmailThrottled);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isSmsThrottled)) {
        this.isSmsThrottled = data().deepCopy(fields()[8].schema(), other.isSmsThrottled);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isWhatsappThrottled)) {
        this.isWhatsappThrottled = data().deepCopy(fields()[9].schema(), other.isWhatsappThrottled);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.emailThrottledTill)) {
        this.emailThrottledTill = data().deepCopy(fields()[10].schema(), other.emailThrottledTill);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.whatsappThrottledTill)) {
        this.whatsappThrottledTill = data().deepCopy(fields()[11].schema(), other.whatsappThrottledTill);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.smsThrottledTill)) {
        this.smsThrottledTill = data().deepCopy(fields()[12].schema(), other.smsThrottledTill);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.isEmailThrottledWarningSent)) {
        this.isEmailThrottledWarningSent = data().deepCopy(fields()[13].schema(), other.isEmailThrottledWarningSent);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.isSmsThrottledWarningSent)) {
        this.isSmsThrottledWarningSent = data().deepCopy(fields()[14].schema(), other.isSmsThrottledWarningSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.isWhatsappThrottledWarningSent)) {
        this.isWhatsappThrottledWarningSent = data().deepCopy(fields()[15].schema(), other.isWhatsappThrottledWarningSent);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscriber' field.
      * @return The value.
      */
    public java.lang.String getSubscriber() {
      return subscriber;
    }

    /**
      * Sets the value of the 'subscriber' field.
      * @param value The value of 'subscriber'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setSubscriber(java.lang.String value) {
      validate(fields()[1], value);
      this.subscriber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subscriber' field has been set.
      * @return True if the 'subscriber' field has been set, false otherwise.
      */
    public boolean hasSubscriber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subscriber' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearSubscriber() {
      subscriber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'event' field.
      * @return The value.
      */
    public java.lang.String getEvent() {
      return event;
    }

    /**
      * Sets the value of the 'event' field.
      * @param value The value of 'event'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setEvent(java.lang.String value) {
      validate(fields()[2], value);
      this.event = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'event' field has been set.
      * @return True if the 'event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'event' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearEvent() {
      event = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public java.lang.Long getStartTime() {
      return startTime;
    }

    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setStartTime(java.lang.Long value) {
      validate(fields()[3], value);
      this.startTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearStartTime() {
      startTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailCount' field.
      * @return The value.
      */
    public java.lang.Long getEmailCount() {
      return emailCount;
    }

    /**
      * Sets the value of the 'emailCount' field.
      * @param value The value of 'emailCount'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setEmailCount(java.lang.Long value) {
      validate(fields()[4], value);
      this.emailCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'emailCount' field has been set.
      * @return True if the 'emailCount' field has been set, false otherwise.
      */
    public boolean hasEmailCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'emailCount' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearEmailCount() {
      emailCount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'smsCount' field.
      * @return The value.
      */
    public java.lang.Long getSmsCount() {
      return smsCount;
    }

    /**
      * Sets the value of the 'smsCount' field.
      * @param value The value of 'smsCount'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setSmsCount(java.lang.Long value) {
      validate(fields()[5], value);
      this.smsCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'smsCount' field has been set.
      * @return True if the 'smsCount' field has been set, false otherwise.
      */
    public boolean hasSmsCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'smsCount' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearSmsCount() {
      smsCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'whatsappCount' field.
      * @return The value.
      */
    public java.lang.Long getWhatsappCount() {
      return whatsappCount;
    }

    /**
      * Sets the value of the 'whatsappCount' field.
      * @param value The value of 'whatsappCount'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setWhatsappCount(java.lang.Long value) {
      validate(fields()[6], value);
      this.whatsappCount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'whatsappCount' field has been set.
      * @return True if the 'whatsappCount' field has been set, false otherwise.
      */
    public boolean hasWhatsappCount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'whatsappCount' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearWhatsappCount() {
      whatsappCount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'isEmailThrottled' field.
      * @return The value.
      */
    public java.lang.Boolean getIsEmailThrottled() {
      return isEmailThrottled;
    }

    /**
      * Sets the value of the 'isEmailThrottled' field.
      * @param value The value of 'isEmailThrottled'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setIsEmailThrottled(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.isEmailThrottled = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'isEmailThrottled' field has been set.
      * @return True if the 'isEmailThrottled' field has been set, false otherwise.
      */
    public boolean hasIsEmailThrottled() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'isEmailThrottled' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearIsEmailThrottled() {
      isEmailThrottled = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSmsThrottled' field.
      * @return The value.
      */
    public java.lang.Boolean getIsSmsThrottled() {
      return isSmsThrottled;
    }

    /**
      * Sets the value of the 'isSmsThrottled' field.
      * @param value The value of 'isSmsThrottled'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setIsSmsThrottled(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.isSmsThrottled = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'isSmsThrottled' field has been set.
      * @return True if the 'isSmsThrottled' field has been set, false otherwise.
      */
    public boolean hasIsSmsThrottled() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'isSmsThrottled' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearIsSmsThrottled() {
      isSmsThrottled = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'isWhatsappThrottled' field.
      * @return The value.
      */
    public java.lang.Boolean getIsWhatsappThrottled() {
      return isWhatsappThrottled;
    }

    /**
      * Sets the value of the 'isWhatsappThrottled' field.
      * @param value The value of 'isWhatsappThrottled'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setIsWhatsappThrottled(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.isWhatsappThrottled = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'isWhatsappThrottled' field has been set.
      * @return True if the 'isWhatsappThrottled' field has been set, false otherwise.
      */
    public boolean hasIsWhatsappThrottled() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'isWhatsappThrottled' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearIsWhatsappThrottled() {
      isWhatsappThrottled = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailThrottledTill' field.
      * @return The value.
      */
    public java.lang.Long getEmailThrottledTill() {
      return emailThrottledTill;
    }

    /**
      * Sets the value of the 'emailThrottledTill' field.
      * @param value The value of 'emailThrottledTill'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setEmailThrottledTill(java.lang.Long value) {
      validate(fields()[10], value);
      this.emailThrottledTill = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'emailThrottledTill' field has been set.
      * @return True if the 'emailThrottledTill' field has been set, false otherwise.
      */
    public boolean hasEmailThrottledTill() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'emailThrottledTill' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearEmailThrottledTill() {
      emailThrottledTill = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'whatsappThrottledTill' field.
      * @return The value.
      */
    public java.lang.Long getWhatsappThrottledTill() {
      return whatsappThrottledTill;
    }

    /**
      * Sets the value of the 'whatsappThrottledTill' field.
      * @param value The value of 'whatsappThrottledTill'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setWhatsappThrottledTill(java.lang.Long value) {
      validate(fields()[11], value);
      this.whatsappThrottledTill = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'whatsappThrottledTill' field has been set.
      * @return True if the 'whatsappThrottledTill' field has been set, false otherwise.
      */
    public boolean hasWhatsappThrottledTill() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'whatsappThrottledTill' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearWhatsappThrottledTill() {
      whatsappThrottledTill = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'smsThrottledTill' field.
      * @return The value.
      */
    public java.lang.Long getSmsThrottledTill() {
      return smsThrottledTill;
    }

    /**
      * Sets the value of the 'smsThrottledTill' field.
      * @param value The value of 'smsThrottledTill'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setSmsThrottledTill(java.lang.Long value) {
      validate(fields()[12], value);
      this.smsThrottledTill = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'smsThrottledTill' field has been set.
      * @return True if the 'smsThrottledTill' field has been set, false otherwise.
      */
    public boolean hasSmsThrottledTill() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'smsThrottledTill' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearSmsThrottledTill() {
      smsThrottledTill = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'isEmailThrottledWarningSent' field.
      * @return The value.
      */
    public java.lang.Boolean getIsEmailThrottledWarningSent() {
      return isEmailThrottledWarningSent;
    }

    /**
      * Sets the value of the 'isEmailThrottledWarningSent' field.
      * @param value The value of 'isEmailThrottledWarningSent'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setIsEmailThrottledWarningSent(java.lang.Boolean value) {
      validate(fields()[13], value);
      this.isEmailThrottledWarningSent = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'isEmailThrottledWarningSent' field has been set.
      * @return True if the 'isEmailThrottledWarningSent' field has been set, false otherwise.
      */
    public boolean hasIsEmailThrottledWarningSent() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'isEmailThrottledWarningSent' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearIsEmailThrottledWarningSent() {
      isEmailThrottledWarningSent = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSmsThrottledWarningSent' field.
      * @return The value.
      */
    public java.lang.Boolean getIsSmsThrottledWarningSent() {
      return isSmsThrottledWarningSent;
    }

    /**
      * Sets the value of the 'isSmsThrottledWarningSent' field.
      * @param value The value of 'isSmsThrottledWarningSent'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setIsSmsThrottledWarningSent(java.lang.Boolean value) {
      validate(fields()[14], value);
      this.isSmsThrottledWarningSent = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'isSmsThrottledWarningSent' field has been set.
      * @return True if the 'isSmsThrottledWarningSent' field has been set, false otherwise.
      */
    public boolean hasIsSmsThrottledWarningSent() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'isSmsThrottledWarningSent' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearIsSmsThrottledWarningSent() {
      isSmsThrottledWarningSent = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'isWhatsappThrottledWarningSent' field.
      * @return The value.
      */
    public java.lang.Boolean getIsWhatsappThrottledWarningSent() {
      return isWhatsappThrottledWarningSent;
    }

    /**
      * Sets the value of the 'isWhatsappThrottledWarningSent' field.
      * @param value The value of 'isWhatsappThrottledWarningSent'.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder setIsWhatsappThrottledWarningSent(java.lang.Boolean value) {
      validate(fields()[15], value);
      this.isWhatsappThrottledWarningSent = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'isWhatsappThrottledWarningSent' field has been set.
      * @return True if the 'isWhatsappThrottledWarningSent' field has been set, false otherwise.
      */
    public boolean hasIsWhatsappThrottledWarningSent() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'isWhatsappThrottledWarningSent' field.
      * @return This builder.
      */
    public com.fretron.Model.NotificationCounter.Builder clearIsWhatsappThrottledWarningSent() {
      isWhatsappThrottledWarningSent = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    public NotificationCounter build() {
      try {
        NotificationCounter record = new NotificationCounter();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.subscriber = fieldSetFlags()[1] ? this.subscriber : (java.lang.String) defaultValue(fields()[1]);
        record.event = fieldSetFlags()[2] ? this.event : (java.lang.String) defaultValue(fields()[2]);
        record.startTime = fieldSetFlags()[3] ? this.startTime : (java.lang.Long) defaultValue(fields()[3]);
        record.emailCount = fieldSetFlags()[4] ? this.emailCount : (java.lang.Long) defaultValue(fields()[4]);
        record.smsCount = fieldSetFlags()[5] ? this.smsCount : (java.lang.Long) defaultValue(fields()[5]);
        record.whatsappCount = fieldSetFlags()[6] ? this.whatsappCount : (java.lang.Long) defaultValue(fields()[6]);
        record.isEmailThrottled = fieldSetFlags()[7] ? this.isEmailThrottled : (java.lang.Boolean) defaultValue(fields()[7]);
        record.isSmsThrottled = fieldSetFlags()[8] ? this.isSmsThrottled : (java.lang.Boolean) defaultValue(fields()[8]);
        record.isWhatsappThrottled = fieldSetFlags()[9] ? this.isWhatsappThrottled : (java.lang.Boolean) defaultValue(fields()[9]);
        record.emailThrottledTill = fieldSetFlags()[10] ? this.emailThrottledTill : (java.lang.Long) defaultValue(fields()[10]);
        record.whatsappThrottledTill = fieldSetFlags()[11] ? this.whatsappThrottledTill : (java.lang.Long) defaultValue(fields()[11]);
        record.smsThrottledTill = fieldSetFlags()[12] ? this.smsThrottledTill : (java.lang.Long) defaultValue(fields()[12]);
        record.isEmailThrottledWarningSent = fieldSetFlags()[13] ? this.isEmailThrottledWarningSent : (java.lang.Boolean) defaultValue(fields()[13]);
        record.isSmsThrottledWarningSent = fieldSetFlags()[14] ? this.isSmsThrottledWarningSent : (java.lang.Boolean) defaultValue(fields()[14]);
        record.isWhatsappThrottledWarningSent = fieldSetFlags()[15] ? this.isWhatsappThrottledWarningSent : (java.lang.Boolean) defaultValue(fields()[15]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
