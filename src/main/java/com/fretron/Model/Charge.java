/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Charge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4732313607266665205L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Charge\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"rateUnit\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"rate\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"base\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"amountByVendor\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"chartsOfAccount\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ChartsOfAccountLite\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"accountGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"accountPath\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String uuid;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String rateUnit;
  @Deprecated public java.lang.Double rate;
  @Deprecated public java.lang.Double base;
  @Deprecated public java.lang.Double amount;
  @Deprecated public java.lang.Double amountByVendor;
  @Deprecated public com.fretron.Model.ChartsOfAccountLite chartsOfAccount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Charge() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param name The new value for name
   * @param rateUnit The new value for rateUnit
   * @param rate The new value for rate
   * @param base The new value for base
   * @param amount The new value for amount
   * @param amountByVendor The new value for amountByVendor
   * @param chartsOfAccount The new value for chartsOfAccount
   */
  public Charge(java.lang.String uuid, java.lang.String name, java.lang.String rateUnit, java.lang.Double rate, java.lang.Double base, java.lang.Double amount, java.lang.Double amountByVendor, com.fretron.Model.ChartsOfAccountLite chartsOfAccount) {
    this.uuid = uuid;
    this.name = name;
    this.rateUnit = rateUnit;
    this.rate = rate;
    this.base = base;
    this.amount = amount;
    this.amountByVendor = amountByVendor;
    this.chartsOfAccount = chartsOfAccount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return name;
    case 2: return rateUnit;
    case 3: return rate;
    case 4: return base;
    case 5: return amount;
    case 6: return amountByVendor;
    case 7: return chartsOfAccount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: rateUnit = (java.lang.String)value$; break;
    case 3: rate = (java.lang.Double)value$; break;
    case 4: base = (java.lang.Double)value$; break;
    case 5: amount = (java.lang.Double)value$; break;
    case 6: amountByVendor = (java.lang.Double)value$; break;
    case 7: chartsOfAccount = (com.fretron.Model.ChartsOfAccountLite)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'rateUnit' field.
   * @return The value of the 'rateUnit' field.
   */
  public java.lang.String getRateUnit() {
    return rateUnit;
  }

  /**
   * Sets the value of the 'rateUnit' field.
   * @param value the value to set.
   */
  public void setRateUnit(java.lang.String value) {
    this.rateUnit = value;
  }

  /**
   * Gets the value of the 'rate' field.
   * @return The value of the 'rate' field.
   */
  public java.lang.Double getRate() {
    return rate;
  }

  /**
   * Sets the value of the 'rate' field.
   * @param value the value to set.
   */
  public void setRate(java.lang.Double value) {
    this.rate = value;
  }

  /**
   * Gets the value of the 'base' field.
   * @return The value of the 'base' field.
   */
  public java.lang.Double getBase() {
    return base;
  }

  /**
   * Sets the value of the 'base' field.
   * @param value the value to set.
   */
  public void setBase(java.lang.Double value) {
    this.base = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'amountByVendor' field.
   * @return The value of the 'amountByVendor' field.
   */
  public java.lang.Double getAmountByVendor() {
    return amountByVendor;
  }

  /**
   * Sets the value of the 'amountByVendor' field.
   * @param value the value to set.
   */
  public void setAmountByVendor(java.lang.Double value) {
    this.amountByVendor = value;
  }

  /**
   * Gets the value of the 'chartsOfAccount' field.
   * @return The value of the 'chartsOfAccount' field.
   */
  public com.fretron.Model.ChartsOfAccountLite getChartsOfAccount() {
    return chartsOfAccount;
  }

  /**
   * Sets the value of the 'chartsOfAccount' field.
   * @param value the value to set.
   */
  public void setChartsOfAccount(com.fretron.Model.ChartsOfAccountLite value) {
    this.chartsOfAccount = value;
  }

  /**
   * Creates a new Charge RecordBuilder.
   * @return A new Charge RecordBuilder
   */
  public static com.fretron.Model.Charge.Builder newBuilder() {
    return new com.fretron.Model.Charge.Builder();
  }

  /**
   * Creates a new Charge RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Charge RecordBuilder
   */
  public static com.fretron.Model.Charge.Builder newBuilder(com.fretron.Model.Charge.Builder other) {
    return new com.fretron.Model.Charge.Builder(other);
  }

  /**
   * Creates a new Charge RecordBuilder by copying an existing Charge instance.
   * @param other The existing instance to copy.
   * @return A new Charge RecordBuilder
   */
  public static com.fretron.Model.Charge.Builder newBuilder(com.fretron.Model.Charge other) {
    return new com.fretron.Model.Charge.Builder(other);
  }

  /**
   * RecordBuilder for Charge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Charge>
    implements org.apache.avro.data.RecordBuilder<Charge> {

    private java.lang.String uuid;
    private java.lang.String name;
    private java.lang.String rateUnit;
    private java.lang.Double rate;
    private java.lang.Double base;
    private java.lang.Double amount;
    private java.lang.Double amountByVendor;
    private com.fretron.Model.ChartsOfAccountLite chartsOfAccount;
    private com.fretron.Model.ChartsOfAccountLite.Builder chartsOfAccountBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fretron.Model.Charge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rateUnit)) {
        this.rateUnit = data().deepCopy(fields()[2].schema(), other.rateUnit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rate)) {
        this.rate = data().deepCopy(fields()[3].schema(), other.rate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.base)) {
        this.base = data().deepCopy(fields()[4].schema(), other.base);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.amountByVendor)) {
        this.amountByVendor = data().deepCopy(fields()[6].schema(), other.amountByVendor);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.chartsOfAccount)) {
        this.chartsOfAccount = data().deepCopy(fields()[7].schema(), other.chartsOfAccount);
        fieldSetFlags()[7] = true;
      }
      if (other.hasChartsOfAccountBuilder()) {
        this.chartsOfAccountBuilder = com.fretron.Model.ChartsOfAccountLite.newBuilder(other.getChartsOfAccountBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Charge instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fretron.Model.Charge other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rateUnit)) {
        this.rateUnit = data().deepCopy(fields()[2].schema(), other.rateUnit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rate)) {
        this.rate = data().deepCopy(fields()[3].schema(), other.rate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.base)) {
        this.base = data().deepCopy(fields()[4].schema(), other.base);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.amountByVendor)) {
        this.amountByVendor = data().deepCopy(fields()[6].schema(), other.amountByVendor);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.chartsOfAccount)) {
        this.chartsOfAccount = data().deepCopy(fields()[7].schema(), other.chartsOfAccount);
        fieldSetFlags()[7] = true;
      }
      this.chartsOfAccountBuilder = null;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rateUnit' field.
      * @return The value.
      */
    public java.lang.String getRateUnit() {
      return rateUnit;
    }

    /**
      * Sets the value of the 'rateUnit' field.
      * @param value The value of 'rateUnit'.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder setRateUnit(java.lang.String value) {
      validate(fields()[2], value);
      this.rateUnit = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rateUnit' field has been set.
      * @return True if the 'rateUnit' field has been set, false otherwise.
      */
    public boolean hasRateUnit() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rateUnit' field.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder clearRateUnit() {
      rateUnit = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'rate' field.
      * @return The value.
      */
    public java.lang.Double getRate() {
      return rate;
    }

    /**
      * Sets the value of the 'rate' field.
      * @param value The value of 'rate'.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder setRate(java.lang.Double value) {
      validate(fields()[3], value);
      this.rate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'rate' field has been set.
      * @return True if the 'rate' field has been set, false otherwise.
      */
    public boolean hasRate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'rate' field.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder clearRate() {
      rate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'base' field.
      * @return The value.
      */
    public java.lang.Double getBase() {
      return base;
    }

    /**
      * Sets the value of the 'base' field.
      * @param value The value of 'base'.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder setBase(java.lang.Double value) {
      validate(fields()[4], value);
      this.base = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'base' field has been set.
      * @return True if the 'base' field has been set, false otherwise.
      */
    public boolean hasBase() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'base' field.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder clearBase() {
      base = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder setAmount(java.lang.Double value) {
      validate(fields()[5], value);
      this.amount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountByVendor' field.
      * @return The value.
      */
    public java.lang.Double getAmountByVendor() {
      return amountByVendor;
    }

    /**
      * Sets the value of the 'amountByVendor' field.
      * @param value The value of 'amountByVendor'.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder setAmountByVendor(java.lang.Double value) {
      validate(fields()[6], value);
      this.amountByVendor = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'amountByVendor' field has been set.
      * @return True if the 'amountByVendor' field has been set, false otherwise.
      */
    public boolean hasAmountByVendor() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'amountByVendor' field.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder clearAmountByVendor() {
      amountByVendor = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'chartsOfAccount' field.
      * @return The value.
      */
    public com.fretron.Model.ChartsOfAccountLite getChartsOfAccount() {
      return chartsOfAccount;
    }

    /**
      * Sets the value of the 'chartsOfAccount' field.
      * @param value The value of 'chartsOfAccount'.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder setChartsOfAccount(com.fretron.Model.ChartsOfAccountLite value) {
      validate(fields()[7], value);
      this.chartsOfAccountBuilder = null;
      this.chartsOfAccount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'chartsOfAccount' field has been set.
      * @return True if the 'chartsOfAccount' field has been set, false otherwise.
      */
    public boolean hasChartsOfAccount() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'chartsOfAccount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fretron.Model.ChartsOfAccountLite.Builder getChartsOfAccountBuilder() {
      if (chartsOfAccountBuilder == null) {
        if (hasChartsOfAccount()) {
          setChartsOfAccountBuilder(com.fretron.Model.ChartsOfAccountLite.newBuilder(chartsOfAccount));
        } else {
          setChartsOfAccountBuilder(com.fretron.Model.ChartsOfAccountLite.newBuilder());
        }
      }
      return chartsOfAccountBuilder;
    }

    /**
     * Sets the Builder instance for the 'chartsOfAccount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.fretron.Model.Charge.Builder setChartsOfAccountBuilder(com.fretron.Model.ChartsOfAccountLite.Builder value) {
      clearChartsOfAccount();
      chartsOfAccountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'chartsOfAccount' field has an active Builder instance
     * @return True if the 'chartsOfAccount' field has an active Builder instance
     */
    public boolean hasChartsOfAccountBuilder() {
      return chartsOfAccountBuilder != null;
    }

    /**
      * Clears the value of the 'chartsOfAccount' field.
      * @return This builder.
      */
    public com.fretron.Model.Charge.Builder clearChartsOfAccount() {
      chartsOfAccount = null;
      chartsOfAccountBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Charge build() {
      try {
        Charge record = new Charge();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.rateUnit = fieldSetFlags()[2] ? this.rateUnit : (java.lang.String) defaultValue(fields()[2]);
        record.rate = fieldSetFlags()[3] ? this.rate : (java.lang.Double) defaultValue(fields()[3]);
        record.base = fieldSetFlags()[4] ? this.base : (java.lang.Double) defaultValue(fields()[4]);
        record.amount = fieldSetFlags()[5] ? this.amount : (java.lang.Double) defaultValue(fields()[5]);
        record.amountByVendor = fieldSetFlags()[6] ? this.amountByVendor : (java.lang.Double) defaultValue(fields()[6]);
        if (chartsOfAccountBuilder != null) {
          record.chartsOfAccount = this.chartsOfAccountBuilder.build();
        } else {
          record.chartsOfAccount = fieldSetFlags()[7] ? this.chartsOfAccount : (com.fretron.Model.ChartsOfAccountLite) defaultValue(fields()[7]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
